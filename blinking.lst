
blinking.elf:     file format elf32-littlearm
blinking.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000d55

Program Header:
0x70000001 off    0x00012260 vaddr 0x1a002260 paddr 0x1a002260 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010064 vaddr 0x10000064 paddr 0x10000064 align 2**16
         filesz 0x00000000 memsz 0x00000028 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002268 memsz 0x00002268 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002268 align 2**16
         filesz 0x00000064 memsz 0x00000064 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002260  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  10000000  1a002268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020064  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020064  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020064  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020064  2**2
                  CONTENTS
  6 .bss          00000028  10000064  10000064  00010064  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020064  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020064  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020064  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020064  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002260  1a002260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020064  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020064  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020064  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020064  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020064  2**2
                  CONTENTS
 17 .noinit       00000000  1000008c  1000008c  00020064  2**2
                  CONTENTS
 18 .debug_info   0000c18e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000207a  00000000  00000000  0002c1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00003a1a  00000000  00000000  0002e26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000518  00000000  00000000  00031c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000004f0  00000000  00000000  0003219e  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00007c93  00000000  00000000  0003268e  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000075c3  00000000  00000000  0003a321  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001c1d1  00000000  00000000  000418e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  0005dab5  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  0005db1d  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000011e8  00000000  00000000  0005db50  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000064 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002260 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000008c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
10000064 l     O .bss	00000004 tick_ct
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002078 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00054c l     F .text	0000002c Chip_UART_GetIndex
1a0020c0 l     O .text	00000008 UART_BClock
1a0020c8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0006ac l     F .text	000000a0 pll_calc_divs
1a00074c l     F .text	00000100 pll_get_frac
1a00084c l     F .text	0000004c Chip_Clock_FindBaseClock
1a000ac0 l     F .text	00000022 Chip_Clock_GetDivRate
10000068 l     O .bss	00000008 audio_usb_pll_freq
1a0020dc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 system.c
10000070 l     O .bss	00000004 heap_end.11990
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002148 l     O .text	0000000c InitClkStates
1a002154 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000dd0 l     F .text	00000044 Board_LED_Init
1a0021bc l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 findfp.c
1a001258 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0014fc l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
10000004 l     O .data	00000060 impure_data
1a0008e4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000c18 g     F .text	00000012 _isatty_r
1a00018a  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a000c2a g     F .text	0000000a _lseek_r
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a001228 g     F .text	00000030 printf
10000080 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a001b0e g     F .text	00000024 __sseek
1a001308 g     F .text	00000070 __sinit
1a001b3c g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a0012ac g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a001fbc g     F .text	0000000c __malloc_unlock
1a000300 g     F .text	00000010 SysTick_Handler
10000081 g     O .bss	00000001 __lock___arc4random_mutex
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a000e64 g     F .text	0000001c Board_UARTGetChar
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002268 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
1a000c0e g     F .text	0000000a _fstat_r
1a002268 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a00018a  w    F .text	00000002 TIMER3_IRQHandler
1a000b62 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a0012a0 g     F .text	0000000c _cleanup_r
1a000f14 g     F .text	00000000 .hidden __aeabi_uldivmod
1000008c g       .noinit	00000000 _noinit
1000007c g     O .bss	00000004 SystemCoreClock
1a000578 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000bac g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a000cdc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000f44 g     F .text	000002d0 .hidden __udivmoddi4
1a000c5c g     F .text	00000020 _sbrk_r
1a0021b4 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000c34 g     F .text	00000028 _read_r
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a002260 g       .text	00000000 __exidx_start
10000082 g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
10000083 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a002228 g     O .text	00000004 _global_impure_ptr
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a000eec g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
1000008c g       .bss	00000000 _ebss
1a00018a  w    F .text	00000002 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a000898 g     F .text	0000004c Chip_Clock_EnableCrystal
10000084 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a00018a  w    F .text	00000002 TIMER1_IRQHandler
1a0021c8 g     O .text	00000020 __sf_fake_stderr
1a001444 g     F .text	00000002 __retarget_lock_release_recursive
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a000a54 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00152a g     F .text	00000024 __sfputs_r
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a0012d8 g     F .text	0000000c __sfp_lock_acquire
1a001f10 g     F .text	00000000 memchr
1a001fc8 g     F .text	0000009c _free_r
1a000b3c g     F .text	00000026 Chip_Clock_GetBaseClock
10000064 g       .bss	00000000 _bss
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a0006a8 g     F .text	00000002 Chip_GPIO_Init
1a0021b8 g     O .text	00000004 OscRateIn
1000008c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000c04 g     F .text	0000000a _close_r
1a001be0 g     F .text	000000dc __swsetup_r
1a001214  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001378 g     F .text	0000008c __sfp
1a0012fc g     F .text	0000000c __sinit_lock_release
1a001ab4 g     F .text	00000022 __sread
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a001fb0 g     F .text	0000000c __malloc_lock
1a000e50 g     F .text	00000014 Board_UARTPutChar
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a001dc8 g     F .text	00000078 _fflush_r
1a0021e8 g     O .text	00000020 __sf_fake_stdin
1a000900 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001442 g     F .text	00000002 __retarget_lock_acquire_recursive
1a001218 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000328 g     F .text	00000064 main
1a001440 g     F .text	00000002 __retarget_lock_init_recursive
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a001b32 g     F .text	00000008 __sclose
1a000ed4 g     F .text	00000016 Board_LED_Toggle
1a001448 g     F .text	000000b4 _malloc_r
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a000b70 g     F .text	0000003c Chip_Clock_EnableOpts
1a00091c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0004e4 g     F .text	00000054 fpuInit
1a000ea8 g     F .text	0000002c Board_LED_Test
1a0009d4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000bf8 g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a000310 g     F .text	00000018 delay
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001228 g     F .text	00000030 iprintf
1a000ca4 g     F .text	00000038 Board_SetupMuxing
1a0005cc g     F .text	000000dc Chip_UART_SetBaudFDR
1a000c7c g     F .text	00000028 _write_r
1a00018a  w    F .text	00000002 ETH_IRQHandler
1a0017a0 g     F .text	000000ea _printf_common
10000000 g     O .data	00000004 _impure_ptr
1a001cbc g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000008c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a001e40 g     F .text	00000048 __swhatbuf_r
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a000e28 g     F .text	00000028 Board_Debug_Init
10000064 g       .data	00000000 _edata
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
10000085 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00038c g     F .text	00000158 Chip_SetupCoreClock
1a001ad6 g     F .text	00000038 __swrite
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a001550 g     F .text	00000250 _vfiprintf_r
1a000000 g     O .text	00000114 g_pfnVectors
1a000d54 g     F .text	0000007c ResetISR
1a001404 g     F .text	0000003c _fwalk_reent
1a000538 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0012e4 g     F .text	0000000c __sfp_lock_release
1a002208 g     O .text	00000020 __sf_fake_stdout
1a001214  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
10000086 g     O .bss	00000001 __lock___dd_hash_mutex
1a001e88 g     F .text	00000080 __smakebuf_r
10000087 g     O .bss	00000001 __lock___tz_mutex
1a00188c g     F .text	00000228 _printf_i
1a00018a  w    F .text	00000002 UART3_IRQHandler
10000078 g     O .bss	00000004 __malloc_sbrk_start
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a000e80 g     F .text	00000028 Board_LED_Set
1a00018a  w    F .text	00000002 M0APP_IRQHandler
10000074 g     O .bss	00000004 __malloc_free_list
1a001550 g     F .text	00000250 _vfprintf_r
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000e14 g     F .text	00000014 Board_UART_Init
1a000ae4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
10000088 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0012f0 g     F .text	0000000c __sinit_lock_acquire
1a000d48 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 55 0d 00 1a 79 01 00 1a 7b 01 00 1a     ....U...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 00 00 00 00     }...............
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	01 03 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00007c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002268 	.word	0x1a002268
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000064 	.word	0x00000064
1a000120:	1a002268 	.word	0x1a002268
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002268 	.word	0x1a002268
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002268 	.word	0x1a002268
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002268 	.word	0x1a002268
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000064 	.word	0x10000064
1a000154:	00000028 	.word	0x00000028
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <SysTick_Handler>:
#define TICKRATE_HZ (1000)

static volatile uint32_t tick_ct = 0;

void SysTick_Handler(void) {
   tick_ct++;
1a000300:	4a02      	ldr	r2, [pc, #8]	; (1a00030c <SysTick_Handler+0xc>)
1a000302:	6813      	ldr	r3, [r2, #0]
1a000304:	3301      	adds	r3, #1
1a000306:	6013      	str	r3, [r2, #0]
}
1a000308:	4770      	bx	lr
1a00030a:	bf00      	nop
1a00030c:	10000064 	.word	0x10000064

1a000310 <delay>:

void delay(uint32_t tk) {
   uint32_t end = tick_ct + tk;
1a000310:	4b04      	ldr	r3, [pc, #16]	; (1a000324 <delay+0x14>)
1a000312:	681b      	ldr	r3, [r3, #0]
1a000314:	4418      	add	r0, r3
   while(tick_ct < end)
1a000316:	4b03      	ldr	r3, [pc, #12]	; (1a000324 <delay+0x14>)
1a000318:	681b      	ldr	r3, [r3, #0]
1a00031a:	4283      	cmp	r3, r0
1a00031c:	d201      	bcs.n	1a000322 <delay+0x12>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
1a00031e:	bf30      	wfi
1a000320:	e7f9      	b.n	1a000316 <delay+0x6>
       __WFI();
}
1a000322:	4770      	bx	lr
1a000324:	10000064 	.word	0x10000064

1a000328 <main>:

int main(void) {
1a000328:	b508      	push	{r3, lr}
   SystemCoreClockUpdate();
1a00032a:	f000 f905 	bl	1a000538 <SystemCoreClockUpdate>
   Board_Init();
1a00032e:	f000 fddd 	bl	1a000eec <Board_Init>
   SysTick_Config(SystemCoreClock / TICKRATE_HZ);
1a000332:	4b10      	ldr	r3, [pc, #64]	; (1a000374 <main+0x4c>)
1a000334:	681b      	ldr	r3, [r3, #0]
1a000336:	4a10      	ldr	r2, [pc, #64]	; (1a000378 <main+0x50>)
1a000338:	fba2 2303 	umull	r2, r3, r2, r3
1a00033c:	099b      	lsrs	r3, r3, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a00033e:	3b01      	subs	r3, #1
1a000340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a000344:	d209      	bcs.n	1a00035a <main+0x32>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000346:	4a0d      	ldr	r2, [pc, #52]	; (1a00037c <main+0x54>)
1a000348:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00034a:	4b0d      	ldr	r3, [pc, #52]	; (1a000380 <main+0x58>)
1a00034c:	21e0      	movs	r1, #224	; 0xe0
1a00034e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000352:	2300      	movs	r3, #0
1a000354:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000356:	2307      	movs	r3, #7
1a000358:	6013      	str	r3, [r2, #0]

   while (1) {
       Board_LED_Toggle(LED_3);
1a00035a:	2002      	movs	r0, #2
1a00035c:	f000 fdba 	bl	1a000ed4 <Board_LED_Toggle>
       delay(100);
1a000360:	2064      	movs	r0, #100	; 0x64
1a000362:	f7ff ffd5 	bl	1a000310 <delay>
       printf("Hola mundo at %d\r\n", tick_ct);
1a000366:	4b07      	ldr	r3, [pc, #28]	; (1a000384 <main+0x5c>)
1a000368:	6819      	ldr	r1, [r3, #0]
1a00036a:	4807      	ldr	r0, [pc, #28]	; (1a000388 <main+0x60>)
1a00036c:	f000 ff5c 	bl	1a001228 <iprintf>
1a000370:	e7f3      	b.n	1a00035a <main+0x32>
1a000372:	bf00      	nop
1a000374:	1000007c 	.word	0x1000007c
1a000378:	10624dd3 	.word	0x10624dd3
1a00037c:	e000e010 	.word	0xe000e010
1a000380:	e000ed00 	.word	0xe000ed00
1a000384:	10000064 	.word	0x10000064
1a000388:	1a002064 	.word	0x1a002064

1a00038c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00038c:	b570      	push	{r4, r5, r6, lr}
1a00038e:	b092      	sub	sp, #72	; 0x48
1a000390:	4605      	mov	r5, r0
1a000392:	460e      	mov	r6, r1
1a000394:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a000396:	f241 537c 	movw	r3, #5500	; 0x157c
1a00039a:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a00039c:	2806      	cmp	r0, #6
1a00039e:	d044      	beq.n	1a00042a <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0003a0:	2300      	movs	r3, #0
1a0003a2:	2201      	movs	r2, #1
1a0003a4:	4629      	mov	r1, r5
1a0003a6:	2004      	movs	r0, #4
1a0003a8:	f000 fb9c 	bl	1a000ae4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a0003ac:	4a4a      	ldr	r2, [pc, #296]	; (1a0004d8 <Chip_SetupCoreClock+0x14c>)
1a0003ae:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0003b0:	f043 0301 	orr.w	r3, r3, #1
1a0003b4:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a0003b6:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0003ba:	a909      	add	r1, sp, #36	; 0x24
1a0003bc:	4630      	mov	r0, r6
1a0003be:	f000 fb09 	bl	1a0009d4 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a0003c2:	4b46      	ldr	r3, [pc, #280]	; (1a0004dc <Chip_SetupCoreClock+0x150>)
1a0003c4:	429e      	cmp	r6, r3
1a0003c6:	d938      	bls.n	1a00043a <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a0003c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0003ca:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0003ce:	d001      	beq.n	1a0003d4 <Chip_SetupCoreClock+0x48>
1a0003d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0003d2:	b36a      	cbz	r2, 1a000430 <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a0003d4:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a0003d8:	a901      	add	r1, sp, #4
1a0003da:	4840      	ldr	r0, [pc, #256]	; (1a0004dc <Chip_SetupCoreClock+0x150>)
1a0003dc:	f000 fafa 	bl	1a0009d4 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a0003e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0003e4:	9b01      	ldr	r3, [sp, #4]
1a0003e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0003ea:	9a05      	ldr	r2, [sp, #20]
1a0003ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0003f0:	9a03      	ldr	r2, [sp, #12]
1a0003f2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0003f6:	9a04      	ldr	r2, [sp, #16]
1a0003f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0003fc:	4a36      	ldr	r2, [pc, #216]	; (1a0004d8 <Chip_SetupCoreClock+0x14c>)
1a0003fe:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000400:	4b35      	ldr	r3, [pc, #212]	; (1a0004d8 <Chip_SetupCoreClock+0x14c>)
1a000402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000404:	f013 0f01 	tst.w	r3, #1
1a000408:	d0fa      	beq.n	1a000400 <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00040a:	2300      	movs	r3, #0
1a00040c:	2201      	movs	r2, #1
1a00040e:	2109      	movs	r1, #9
1a000410:	2004      	movs	r0, #4
1a000412:	f000 fb67 	bl	1a000ae4 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000416:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000418:	1e5a      	subs	r2, r3, #1
1a00041a:	9211      	str	r2, [sp, #68]	; 0x44
1a00041c:	2b00      	cmp	r3, #0
1a00041e:	d1fa      	bne.n	1a000416 <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a000420:	f241 537c 	movw	r3, #5500	; 0x157c
1a000424:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a000426:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000428:	e008      	b.n	1a00043c <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a00042a:	f000 fa35 	bl	1a000898 <Chip_Clock_EnableCrystal>
1a00042e:	e7b7      	b.n	1a0003a0 <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a000430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000434:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a000436:	2501      	movs	r5, #1
1a000438:	e000      	b.n	1a00043c <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a00043a:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a00043c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000440:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000442:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00044c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00044e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000454:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000458:	4a1f      	ldr	r2, [pc, #124]	; (1a0004d8 <Chip_SetupCoreClock+0x14c>)
1a00045a:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00045c:	4b1e      	ldr	r3, [pc, #120]	; (1a0004d8 <Chip_SetupCoreClock+0x14c>)
1a00045e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000460:	f013 0f01 	tst.w	r3, #1
1a000464:	d0fa      	beq.n	1a00045c <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000466:	2300      	movs	r3, #0
1a000468:	2201      	movs	r2, #1
1a00046a:	2109      	movs	r1, #9
1a00046c:	2004      	movs	r0, #4
1a00046e:	f000 fb39 	bl	1a000ae4 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000472:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000474:	1e5a      	subs	r2, r3, #1
1a000476:	9211      	str	r2, [sp, #68]	; 0x44
1a000478:	2b00      	cmp	r3, #0
1a00047a:	d1fa      	bne.n	1a000472 <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a00047c:	b1d5      	cbz	r5, 1a0004b4 <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a00047e:	f241 537c 	movw	r3, #5500	; 0x157c
1a000482:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a000484:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00048a:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a00048c:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000490:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00049a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00049c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0004a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0004a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0004a6:	4a0c      	ldr	r2, [pc, #48]	; (1a0004d8 <Chip_SetupCoreClock+0x14c>)
1a0004a8:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a0004aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0004ac:	1e5a      	subs	r2, r3, #1
1a0004ae:	9211      	str	r2, [sp, #68]	; 0x44
1a0004b0:	2b00      	cmp	r3, #0
1a0004b2:	d1fa      	bne.n	1a0004aa <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a0004b4:	b90c      	cbnz	r4, 1a0004ba <Chip_SetupCoreClock+0x12e>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a0004b6:	b012      	add	sp, #72	; 0x48
1a0004b8:	bd70      	pop	{r4, r5, r6, pc}
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0004ba:	2400      	movs	r4, #0
1a0004bc:	2c11      	cmp	r4, #17
1a0004be:	d8fa      	bhi.n	1a0004b6 <Chip_SetupCoreClock+0x12a>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0004c0:	4807      	ldr	r0, [pc, #28]	; (1a0004e0 <Chip_SetupCoreClock+0x154>)
1a0004c2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0004c6:	78cb      	ldrb	r3, [r1, #3]
1a0004c8:	788a      	ldrb	r2, [r1, #2]
1a0004ca:	7849      	ldrb	r1, [r1, #1]
1a0004cc:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0004d0:	f000 fb08 	bl	1a000ae4 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0004d4:	3401      	adds	r4, #1
1a0004d6:	e7f1      	b.n	1a0004bc <Chip_SetupCoreClock+0x130>
1a0004d8:	40050000 	.word	0x40050000
1a0004dc:	068e7780 	.word	0x068e7780
1a0004e0:	1a002078 	.word	0x1a002078

1a0004e4 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0004e4:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a0004e6:	4b0f      	ldr	r3, [pc, #60]	; (1a000524 <fpuInit+0x40>)
1a0004e8:	681b      	ldr	r3, [r3, #0]
1a0004ea:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a0004ec:	4b0e      	ldr	r3, [pc, #56]	; (1a000528 <fpuInit+0x44>)
1a0004ee:	681b      	ldr	r3, [r3, #0]
1a0004f0:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0004f2:	9a02      	ldr	r2, [sp, #8]
1a0004f4:	4b0d      	ldr	r3, [pc, #52]	; (1a00052c <fpuInit+0x48>)
1a0004f6:	429a      	cmp	r2, r3
1a0004f8:	d00c      	beq.n	1a000514 <fpuInit+0x30>
1a0004fa:	2300      	movs	r3, #0

   if (vfpPresent) {
1a0004fc:	b143      	cbz	r3, 1a000510 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a0004fe:	4a0c      	ldr	r2, [pc, #48]	; (1a000530 <fpuInit+0x4c>)
1a000500:	6813      	ldr	r3, [r2, #0]
1a000502:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000504:	9b03      	ldr	r3, [sp, #12]
1a000506:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00050a:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a00050c:	9b03      	ldr	r3, [sp, #12]
1a00050e:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000510:	b004      	add	sp, #16
1a000512:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000514:	9a01      	ldr	r2, [sp, #4]
1a000516:	4b07      	ldr	r3, [pc, #28]	; (1a000534 <fpuInit+0x50>)
1a000518:	429a      	cmp	r2, r3
1a00051a:	d001      	beq.n	1a000520 <fpuInit+0x3c>
1a00051c:	2300      	movs	r3, #0
1a00051e:	e7ed      	b.n	1a0004fc <fpuInit+0x18>
1a000520:	2301      	movs	r3, #1
1a000522:	e7eb      	b.n	1a0004fc <fpuInit+0x18>
1a000524:	e000ef40 	.word	0xe000ef40
1a000528:	e000ef44 	.word	0xe000ef44
1a00052c:	10110021 	.word	0x10110021
1a000530:	e000ed88 	.word	0xe000ed88
1a000534:	11000011 	.word	0x11000011

1a000538 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000538:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00053a:	2069      	movs	r0, #105	; 0x69
1a00053c:	f000 fb36 	bl	1a000bac <Chip_Clock_GetRate>
1a000540:	4b01      	ldr	r3, [pc, #4]	; (1a000548 <SystemCoreClockUpdate+0x10>)
1a000542:	6018      	str	r0, [r3, #0]
}
1a000544:	bd08      	pop	{r3, pc}
1a000546:	bf00      	nop
1a000548:	1000007c 	.word	0x1000007c

1a00054c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a00054c:	4b09      	ldr	r3, [pc, #36]	; (1a000574 <Chip_UART_GetIndex+0x28>)
1a00054e:	4298      	cmp	r0, r3
1a000550:	d009      	beq.n	1a000566 <Chip_UART_GetIndex+0x1a>
1a000552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000556:	4298      	cmp	r0, r3
1a000558:	d007      	beq.n	1a00056a <Chip_UART_GetIndex+0x1e>
1a00055a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00055e:	4298      	cmp	r0, r3
1a000560:	d005      	beq.n	1a00056e <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000562:	2000      	movs	r0, #0
1a000564:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a000566:	2002      	movs	r0, #2
1a000568:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a00056a:	2003      	movs	r0, #3
1a00056c:	4770      	bx	lr
           return 1;
1a00056e:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a000570:	4770      	bx	lr
1a000572:	bf00      	nop
1a000574:	400c1000 	.word	0x400c1000

1a000578 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000578:	b530      	push	{r4, r5, lr}
1a00057a:	b083      	sub	sp, #12
1a00057c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00057e:	f7ff ffe5 	bl	1a00054c <Chip_UART_GetIndex>
1a000582:	2301      	movs	r3, #1
1a000584:	461a      	mov	r2, r3
1a000586:	4619      	mov	r1, r3
1a000588:	4d0e      	ldr	r5, [pc, #56]	; (1a0005c4 <Chip_UART_Init+0x4c>)
1a00058a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00058e:	f000 faef 	bl	1a000b70 <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a000592:	2307      	movs	r3, #7
1a000594:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000596:	2300      	movs	r3, #0
1a000598:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a00059a:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a00059c:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a00059e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a0005a0:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a0005a2:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a0005a4:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0005a6:	4b08      	ldr	r3, [pc, #32]	; (1a0005c8 <Chip_UART_Init+0x50>)
1a0005a8:	429c      	cmp	r4, r3
1a0005aa:	d005      	beq.n	1a0005b8 <Chip_UART_Init+0x40>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a0005ac:	2303      	movs	r3, #3
1a0005ae:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a0005b0:	2310      	movs	r3, #16
1a0005b2:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a0005b4:	b003      	add	sp, #12
1a0005b6:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a0005b8:	2300      	movs	r3, #0
1a0005ba:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a0005bc:	69a3      	ldr	r3, [r4, #24]
1a0005be:	9301      	str	r3, [sp, #4]
1a0005c0:	e7f4      	b.n	1a0005ac <Chip_UART_Init+0x34>
1a0005c2:	bf00      	nop
1a0005c4:	1a0020c8 	.word	0x1a0020c8
1a0005c8:	40082000 	.word	0x40082000

1a0005cc <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0005cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0005d0:	b083      	sub	sp, #12
1a0005d2:	9001      	str	r0, [sp, #4]
1a0005d4:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0005d6:	f7ff ffb9 	bl	1a00054c <Chip_UART_GetIndex>
1a0005da:	4b32      	ldr	r3, [pc, #200]	; (1a0006a4 <Chip_UART_SetBaudFDR+0xd8>)
1a0005dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0005e0:	f000 fae4 	bl	1a000bac <Chip_Clock_GetRate>
1a0005e4:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a0005e6:	f04f 37ff 	mov.w	r7, #4294967295

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a0005ea:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a0005ec:	f04f 0b00 	mov.w	fp, #0
1a0005f0:	46a2      	mov	sl, r4
1a0005f2:	46d9      	mov	r9, fp
   for (m = 1; odiff && m < 16; m++) {
1a0005f4:	e02a      	b.n	1a00064c <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a0005f6:	4242      	negs	r2, r0
               div ++;
1a0005f8:	1c4b      	adds	r3, r1, #1
1a0005fa:	e017      	b.n	1a00062c <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a0005fc:	b30a      	cbz	r2, 1a000642 <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a0005fe:	4617      	mov	r7, r2
           sd = d;
1a000600:	46ab      	mov	fp, r5
           sm = m;
1a000602:	46a2      	mov	sl, r4
           sdiv = div;
1a000604:	4699      	mov	r9, r3
       for (d = 0; d < m; d++) {
1a000606:	3501      	adds	r5, #1
1a000608:	42ac      	cmp	r4, r5
1a00060a:	d91e      	bls.n	1a00064a <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00060c:	0933      	lsrs	r3, r6, #4
1a00060e:	0730      	lsls	r0, r6, #28
1a000610:	fba4 0100 	umull	r0, r1, r4, r0
1a000614:	fb04 1103 	mla	r1, r4, r3, r1
1a000618:	1962      	adds	r2, r4, r5
1a00061a:	fb08 f202 	mul.w	r2, r8, r2
1a00061e:	2300      	movs	r3, #0
1a000620:	f000 fc78 	bl	1a000f14 <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a000624:	4602      	mov	r2, r0
           div = (uint32_t) (dval >> 32);
1a000626:	460b      	mov	r3, r1
           if ((int)diff < 0) {
1a000628:	2800      	cmp	r0, #0
1a00062a:	dbe4      	blt.n	1a0005f6 <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00062c:	4297      	cmp	r7, r2
1a00062e:	d3ea      	bcc.n	1a000606 <Chip_UART_SetBaudFDR+0x3a>
1a000630:	2b00      	cmp	r3, #0
1a000632:	d0e8      	beq.n	1a000606 <Chip_UART_SetBaudFDR+0x3a>
1a000634:	0c19      	lsrs	r1, r3, #16
1a000636:	d1e6      	bne.n	1a000606 <Chip_UART_SetBaudFDR+0x3a>
1a000638:	2b02      	cmp	r3, #2
1a00063a:	d8df      	bhi.n	1a0005fc <Chip_UART_SetBaudFDR+0x30>
1a00063c:	2d00      	cmp	r5, #0
1a00063e:	d0dd      	beq.n	1a0005fc <Chip_UART_SetBaudFDR+0x30>
1a000640:	e7e1      	b.n	1a000606 <Chip_UART_SetBaudFDR+0x3a>
           odiff = diff;
1a000642:	4617      	mov	r7, r2
           sd = d;
1a000644:	46ab      	mov	fp, r5
           sm = m;
1a000646:	46a2      	mov	sl, r4
           sdiv = div;
1a000648:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a00064a:	3401      	adds	r4, #1
1a00064c:	b11f      	cbz	r7, 1a000656 <Chip_UART_SetBaudFDR+0x8a>
1a00064e:	2c0f      	cmp	r4, #15
1a000650:	d801      	bhi.n	1a000656 <Chip_UART_SetBaudFDR+0x8a>
       for (d = 0; d < m; d++) {
1a000652:	2500      	movs	r5, #0
1a000654:	e7d8      	b.n	1a000608 <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000656:	f1b9 0f00 	cmp.w	r9, #0
1a00065a:	d01e      	beq.n	1a00069a <Chip_UART_SetBaudFDR+0xce>
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a00065c:	9a01      	ldr	r2, [sp, #4]
1a00065e:	4611      	mov	r1, r2
1a000660:	68d3      	ldr	r3, [r2, #12]
1a000662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000666:	60d3      	str	r3, [r2, #12]
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a000668:	fa5f f389 	uxtb.w	r3, r9
1a00066c:	6013      	str	r3, [r2, #0]
   pUART->DLM = (uint32_t) dlm;
1a00066e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000672:	6053      	str	r3, [r2, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000674:	68d3      	ldr	r3, [r2, #12]
1a000676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00067a:	60d3      	str	r3, [r2, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00067c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000680:	b2db      	uxtb	r3, r3
1a000682:	f00b 020f 	and.w	r2, fp, #15
1a000686:	4313      	orrs	r3, r2
1a000688:	628b      	str	r3, [r1, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00068a:	0933      	lsrs	r3, r6, #4
1a00068c:	fb0a f303 	mul.w	r3, sl, r3
1a000690:	44da      	add	sl, fp
1a000692:	fb09 f90a 	mul.w	r9, r9, sl
1a000696:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00069a:	4648      	mov	r0, r9
1a00069c:	b003      	add	sp, #12
1a00069e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0006a2:	bf00      	nop
1a0006a4:	1a0020c0 	.word	0x1a0020c0

1a0006a8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0006a8:	4770      	bx	lr
1a0006aa:	Address 0x1a0006aa is out of bounds.


1a0006ac <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0006ac:	b4f0      	push	{r4, r5, r6, r7}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a0006ae:	680b      	ldr	r3, [r1, #0]
1a0006b0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0006b4:	d002      	beq.n	1a0006bc <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a0006b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0006ba:	600b      	str	r3, [r1, #0]
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a0006bc:	4607      	mov	r7, r0
1a0006be:	2501      	movs	r5, #1
1a0006c0:	e03a      	b.n	1a000738 <pll_calc_divs+0x8c>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a0006c2:	694b      	ldr	r3, [r1, #20]
1a0006c4:	fb03 f302 	mul.w	r3, r3, r2
1a0006c8:	fbb3 f3f5 	udiv	r3, r3, r5
1a0006cc:	e01c      	b.n	1a000708 <pll_calc_divs+0x5c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a0006ce:	461c      	mov	r4, r3
   if (val < 0)
1a0006d0:	ebb0 0c04 	subs.w	ip, r0, r4
1a0006d4:	d427      	bmi.n	1a000726 <pll_calc_divs+0x7a>
               } else {
                   fout = fcco >> (p + 1);
               }

               if (ABS(freq - fout) < prev) {
1a0006d6:	4567      	cmp	r7, ip
1a0006d8:	d906      	bls.n	1a0006e8 <pll_calc_divs+0x3c>
                   ppll->nsel = n;
1a0006da:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a0006dc:	1c77      	adds	r7, r6, #1
1a0006de:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a0006e0:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a0006e2:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a0006e4:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a0006e6:	4667      	mov	r7, ip
           for (m = 1; m <= 256; m++) {
1a0006e8:	3201      	adds	r2, #1
1a0006ea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0006ee:	dc1d      	bgt.n	1a00072c <pll_calc_divs+0x80>
               if (ppll->ctrl & (1 << 6)) {
1a0006f0:	680c      	ldr	r4, [r1, #0]
1a0006f2:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0006f6:	d0e4      	beq.n	1a0006c2 <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0006f8:	1c73      	adds	r3, r6, #1
1a0006fa:	fa02 fc03 	lsl.w	ip, r2, r3
1a0006fe:	694b      	ldr	r3, [r1, #20]
1a000700:	fb03 f30c 	mul.w	r3, r3, ip
1a000704:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000708:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000744 <pll_calc_divs+0x98>
1a00070c:	4563      	cmp	r3, ip
1a00070e:	d9eb      	bls.n	1a0006e8 <pll_calc_divs+0x3c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a000710:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000748 <pll_calc_divs+0x9c>
1a000714:	4563      	cmp	r3, ip
1a000716:	d809      	bhi.n	1a00072c <pll_calc_divs+0x80>
               if (ppll->ctrl & (1 << 7)) {
1a000718:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00071c:	d1d7      	bne.n	1a0006ce <pll_calc_divs+0x22>
                   fout = fcco >> (p + 1);
1a00071e:	1c74      	adds	r4, r6, #1
1a000720:	fa23 f404 	lsr.w	r4, r3, r4
1a000724:	e7d4      	b.n	1a0006d0 <pll_calc_divs+0x24>
       return -val;
1a000726:	f1cc 0c00 	rsb	ip, ip, #0
1a00072a:	e7d4      	b.n	1a0006d6 <pll_calc_divs+0x2a>
       for (p = 0; p < 4; p ++) {
1a00072c:	3601      	adds	r6, #1
1a00072e:	2e03      	cmp	r6, #3
1a000730:	dc01      	bgt.n	1a000736 <pll_calc_divs+0x8a>
           for (m = 1; m <= 256; m++) {
1a000732:	2201      	movs	r2, #1
1a000734:	e7d9      	b.n	1a0006ea <pll_calc_divs+0x3e>
   for (n = 1; n <= 4; n++) {
1a000736:	3501      	adds	r5, #1
1a000738:	2d04      	cmp	r5, #4
1a00073a:	dc01      	bgt.n	1a000740 <pll_calc_divs+0x94>
       for (p = 0; p < 4; p ++) {
1a00073c:	2600      	movs	r6, #0
1a00073e:	e7f6      	b.n	1a00072e <pll_calc_divs+0x82>
               }
           }
       }
   }
}
1a000740:	bcf0      	pop	{r4, r5, r6, r7}
1a000742:	4770      	bx	lr
1a000744:	094c5eff 	.word	0x094c5eff
1a000748:	1312d000 	.word	0x1312d000

1a00074c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00074c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00074e:	b099      	sub	sp, #100	; 0x64
1a000750:	4605      	mov	r5, r0
1a000752:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000754:	225c      	movs	r2, #92	; 0x5c
1a000756:	2100      	movs	r1, #0
1a000758:	a801      	add	r0, sp, #4
1a00075a:	f000 fd5d 	bl	1a001218 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a00075e:	2380      	movs	r3, #128	; 0x80
1a000760:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a000762:	6963      	ldr	r3, [r4, #20]
1a000764:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a000766:	7923      	ldrb	r3, [r4, #4]
1a000768:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a00076c:	4669      	mov	r1, sp
1a00076e:	4628      	mov	r0, r5
1a000770:	f7ff ff9c 	bl	1a0006ac <pll_calc_divs>
   if (pll[0].fout == freq) {
1a000774:	9b06      	ldr	r3, [sp, #24]
1a000776:	42ab      	cmp	r3, r5
1a000778:	d02f      	beq.n	1a0007da <pll_get_frac+0x8e>
   if (val < 0)
1a00077a:	1aeb      	subs	r3, r5, r3
1a00077c:	d436      	bmi.n	1a0007ec <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a00077e:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a000780:	2340      	movs	r3, #64	; 0x40
1a000782:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a000784:	6963      	ldr	r3, [r4, #20]
1a000786:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a000788:	7923      	ldrb	r3, [r4, #4]
1a00078a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a00078e:	a910      	add	r1, sp, #64	; 0x40
1a000790:	4628      	mov	r0, r5
1a000792:	f7ff ff8b 	bl	1a0006ac <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000796:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000798:	42ab      	cmp	r3, r5
1a00079a:	d029      	beq.n	1a0007f0 <pll_get_frac+0xa4>
   if (val < 0)
1a00079c:	1aeb      	subs	r3, r5, r3
1a00079e:	d42f      	bmi.n	1a000800 <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a0007a0:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a0007a2:	2340      	movs	r3, #64	; 0x40
1a0007a4:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a0007a6:	6963      	ldr	r3, [r4, #20]
1a0007a8:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a0007aa:	7923      	ldrb	r3, [r4, #4]
1a0007ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a0007b0:	a908      	add	r1, sp, #32
1a0007b2:	4628      	mov	r0, r5
1a0007b4:	f7ff ff7a 	bl	1a0006ac <pll_calc_divs>
   if (pll[1].fout == freq) {
1a0007b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0007ba:	42ab      	cmp	r3, r5
1a0007bc:	d022      	beq.n	1a000804 <pll_get_frac+0xb8>
   if (val < 0)
1a0007be:	1aed      	subs	r5, r5, r3
1a0007c0:	d428      	bmi.n	1a000814 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a0007c2:	42ae      	cmp	r6, r5
1a0007c4:	dc30      	bgt.n	1a000828 <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a0007c6:	42be      	cmp	r6, r7
1a0007c8:	dc26      	bgt.n	1a000818 <pll_get_frac+0xcc>
           *ppll = pll[0];
1a0007ca:	466d      	mov	r5, sp
1a0007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0007d8:	e006      	b.n	1a0007e8 <pll_get_frac+0x9c>
       *ppll = pll[0];
1a0007da:	466d      	mov	r5, sp
1a0007dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a0007e8:	b019      	add	sp, #100	; 0x64
1a0007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a0007ec:	425b      	negs	r3, r3
1a0007ee:	e7c6      	b.n	1a00077e <pll_get_frac+0x32>
       *ppll = pll[2];
1a0007f0:	ad10      	add	r5, sp, #64	; 0x40
1a0007f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0007f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0007f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0007fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0007fe:	e7f3      	b.n	1a0007e8 <pll_get_frac+0x9c>
       return -val;
1a000800:	425b      	negs	r3, r3
1a000802:	e7cd      	b.n	1a0007a0 <pll_get_frac+0x54>
       *ppll = pll[1];
1a000804:	ad08      	add	r5, sp, #32
1a000806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00080a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00080e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000812:	e7e9      	b.n	1a0007e8 <pll_get_frac+0x9c>
       return -val;
1a000814:	426d      	negs	r5, r5
1a000816:	e7d4      	b.n	1a0007c2 <pll_get_frac+0x76>
           *ppll = pll[2];
1a000818:	ad10      	add	r5, sp, #64	; 0x40
1a00081a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00081c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00081e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000822:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000826:	e7df      	b.n	1a0007e8 <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a000828:	42af      	cmp	r7, r5
1a00082a:	db07      	blt.n	1a00083c <pll_get_frac+0xf0>
           *ppll = pll[1];
1a00082c:	ad08      	add	r5, sp, #32
1a00082e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000832:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00083a:	e7d5      	b.n	1a0007e8 <pll_get_frac+0x9c>
           *ppll = pll[2];
1a00083c:	ad10      	add	r5, sp, #64	; 0x40
1a00083e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000842:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00084a:	e7cd      	b.n	1a0007e8 <pll_get_frac+0x9c>

1a00084c <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00084c:	b430      	push	{r4, r5}
1a00084e:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a000850:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000852:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000854:	e000      	b.n	1a000858 <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a000856:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000858:	281c      	cmp	r0, #28
1a00085a:	d118      	bne.n	1a00088e <Chip_Clock_FindBaseClock+0x42>
1a00085c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000860:	0051      	lsls	r1, r2, #1
1a000862:	4a0c      	ldr	r2, [pc, #48]	; (1a000894 <Chip_Clock_FindBaseClock+0x48>)
1a000864:	440a      	add	r2, r1
1a000866:	7914      	ldrb	r4, [r2, #4]
1a000868:	4284      	cmp	r4, r0
1a00086a:	d010      	beq.n	1a00088e <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00086c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000870:	004a      	lsls	r2, r1, #1
1a000872:	4908      	ldr	r1, [pc, #32]	; (1a000894 <Chip_Clock_FindBaseClock+0x48>)
1a000874:	5a8a      	ldrh	r2, [r1, r2]
1a000876:	42aa      	cmp	r2, r5
1a000878:	d8ed      	bhi.n	1a000856 <Chip_Clock_FindBaseClock+0xa>
1a00087a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00087e:	0051      	lsls	r1, r2, #1
1a000880:	4a04      	ldr	r2, [pc, #16]	; (1a000894 <Chip_Clock_FindBaseClock+0x48>)
1a000882:	440a      	add	r2, r1
1a000884:	8852      	ldrh	r2, [r2, #2]
1a000886:	42aa      	cmp	r2, r5
1a000888:	d3e5      	bcc.n	1a000856 <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a00088a:	4620      	mov	r0, r4
1a00088c:	e7e4      	b.n	1a000858 <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a00088e:	bc30      	pop	{r4, r5}
1a000890:	4770      	bx	lr
1a000892:	bf00      	nop
1a000894:	1a0020dc 	.word	0x1a0020dc

1a000898 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000898:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a00089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00089e:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0008a0:	4a0d      	ldr	r2, [pc, #52]	; (1a0008d8 <Chip_Clock_EnableCrystal+0x40>)
1a0008a2:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a0008a4:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0008a8:	6992      	ldr	r2, [r2, #24]
1a0008aa:	428a      	cmp	r2, r1
1a0008ac:	d001      	beq.n	1a0008b2 <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0008ae:	4a0a      	ldr	r2, [pc, #40]	; (1a0008d8 <Chip_Clock_EnableCrystal+0x40>)
1a0008b0:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a0008b2:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a0008b6:	4a09      	ldr	r2, [pc, #36]	; (1a0008dc <Chip_Clock_EnableCrystal+0x44>)
1a0008b8:	6811      	ldr	r1, [r2, #0]
1a0008ba:	4a09      	ldr	r2, [pc, #36]	; (1a0008e0 <Chip_Clock_EnableCrystal+0x48>)
1a0008bc:	4291      	cmp	r1, r2
1a0008be:	d901      	bls.n	1a0008c4 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a0008c0:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0008c4:	4a04      	ldr	r2, [pc, #16]	; (1a0008d8 <Chip_Clock_EnableCrystal+0x40>)
1a0008c6:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a0008c8:	9b01      	ldr	r3, [sp, #4]
1a0008ca:	1e5a      	subs	r2, r3, #1
1a0008cc:	9201      	str	r2, [sp, #4]
1a0008ce:	2b00      	cmp	r3, #0
1a0008d0:	d1fa      	bne.n	1a0008c8 <Chip_Clock_EnableCrystal+0x30>
}
1a0008d2:	b002      	add	sp, #8
1a0008d4:	4770      	bx	lr
1a0008d6:	bf00      	nop
1a0008d8:	40050000 	.word	0x40050000
1a0008dc:	1a0021b8 	.word	0x1a0021b8
1a0008e0:	01312cff 	.word	0x01312cff

1a0008e4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0008e4:	3012      	adds	r0, #18
1a0008e6:	4b05      	ldr	r3, [pc, #20]	; (1a0008fc <Chip_Clock_GetDividerSource+0x18>)
1a0008e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a0008ec:	f010 0f01 	tst.w	r0, #1
1a0008f0:	d102      	bne.n	1a0008f8 <Chip_Clock_GetDividerSource+0x14>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0008f2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0008f6:	4770      	bx	lr
       return CLKINPUT_PD;
1a0008f8:	2011      	movs	r0, #17
}
1a0008fa:	4770      	bx	lr
1a0008fc:	40050000 	.word	0x40050000

1a000900 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000900:	f100 0212 	add.w	r2, r0, #18
1a000904:	4b03      	ldr	r3, [pc, #12]	; (1a000914 <Chip_Clock_GetDividerDivisor+0x14>)
1a000906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00090a:	4b03      	ldr	r3, [pc, #12]	; (1a000918 <Chip_Clock_GetDividerDivisor+0x18>)
1a00090c:	5c18      	ldrb	r0, [r3, r0]
}
1a00090e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000912:	4770      	bx	lr
1a000914:	40050000 	.word	0x40050000
1a000918:	1a0020d4 	.word	0x1a0020d4

1a00091c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00091c:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a00091e:	2810      	cmp	r0, #16
1a000920:	d80a      	bhi.n	1a000938 <Chip_Clock_GetClockInputHz+0x1c>
1a000922:	e8df f000 	tbb	[pc, r0]
1a000926:	0b44      	.short	0x0b44
1a000928:	0921180d 	.word	0x0921180d
1a00092c:	2d2a2724 	.word	0x2d2a2724
1a000930:	34300909 	.word	0x34300909
1a000934:	3c38      	.short	0x3c38
1a000936:	40          	.byte	0x40
1a000937:	00          	.byte	0x00
   uint32_t rate = 0;
1a000938:	2000      	movs	r0, #0
1a00093a:	e03a      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a00093c:	481e      	ldr	r0, [pc, #120]	; (1a0009b8 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a00093e:	e038      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000940:	4b1e      	ldr	r3, [pc, #120]	; (1a0009bc <Chip_Clock_GetClockInputHz+0xa0>)
1a000942:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000946:	f003 0307 	and.w	r3, r3, #7
1a00094a:	2b04      	cmp	r3, #4
1a00094c:	d001      	beq.n	1a000952 <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a00094e:	481c      	ldr	r0, [pc, #112]	; (1a0009c0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000950:	e02f      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>
   uint32_t rate = 0;
1a000952:	2000      	movs	r0, #0
1a000954:	e02d      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000956:	4b19      	ldr	r3, [pc, #100]	; (1a0009bc <Chip_Clock_GetClockInputHz+0xa0>)
1a000958:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00095c:	f003 0307 	and.w	r3, r3, #7
1a000960:	2b04      	cmp	r3, #4
1a000962:	d027      	beq.n	1a0009b4 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000964:	4816      	ldr	r0, [pc, #88]	; (1a0009c0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000966:	e024      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a000968:	4b16      	ldr	r3, [pc, #88]	; (1a0009c4 <Chip_Clock_GetClockInputHz+0xa8>)
1a00096a:	6818      	ldr	r0, [r3, #0]
       break;
1a00096c:	e021      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a00096e:	4b16      	ldr	r3, [pc, #88]	; (1a0009c8 <Chip_Clock_GetClockInputHz+0xac>)
1a000970:	6818      	ldr	r0, [r3, #0]
       break;
1a000972:	e01e      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000974:	4b15      	ldr	r3, [pc, #84]	; (1a0009cc <Chip_Clock_GetClockInputHz+0xb0>)
1a000976:	6818      	ldr	r0, [r3, #0]
       break;
1a000978:	e01b      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00097a:	4b14      	ldr	r3, [pc, #80]	; (1a0009cc <Chip_Clock_GetClockInputHz+0xb0>)
1a00097c:	6858      	ldr	r0, [r3, #4]
       break;
1a00097e:	e018      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a000980:	f000 f868 	bl	1a000a54 <Chip_Clock_GetMainPLLHz>
       break;
1a000984:	e015      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000986:	2100      	movs	r1, #0
1a000988:	f000 f89a 	bl	1a000ac0 <Chip_Clock_GetDivRate>
       break;
1a00098c:	e011      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00098e:	2101      	movs	r1, #1
1a000990:	f000 f896 	bl	1a000ac0 <Chip_Clock_GetDivRate>
       break;
1a000994:	e00d      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000996:	2102      	movs	r1, #2
1a000998:	f000 f892 	bl	1a000ac0 <Chip_Clock_GetDivRate>
       break;
1a00099c:	e009      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00099e:	2103      	movs	r1, #3
1a0009a0:	f000 f88e 	bl	1a000ac0 <Chip_Clock_GetDivRate>
       break;
1a0009a4:	e005      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0009a6:	2104      	movs	r1, #4
1a0009a8:	f000 f88a 	bl	1a000ac0 <Chip_Clock_GetDivRate>
       break;
1a0009ac:	e001      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>
       rate = CRYSTAL_32K_FREQ_IN;
1a0009ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   default:
       break;
   }

   return rate;
}
1a0009b2:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a0009b4:	4806      	ldr	r0, [pc, #24]	; (1a0009d0 <Chip_Clock_GetClockInputHz+0xb4>)
   return rate;
1a0009b6:	e7fc      	b.n	1a0009b2 <Chip_Clock_GetClockInputHz+0x96>
1a0009b8:	00b71b00 	.word	0x00b71b00
1a0009bc:	40043000 	.word	0x40043000
1a0009c0:	017d7840 	.word	0x017d7840
1a0009c4:	1a0021b4 	.word	0x1a0021b4
1a0009c8:	1a0021b8 	.word	0x1a0021b8
1a0009cc:	10000068 	.word	0x10000068
1a0009d0:	02faf080 	.word	0x02faf080

1a0009d4 <Chip_Clock_CalcMainPLLValue>:
{
1a0009d4:	b538      	push	{r3, r4, r5, lr}
1a0009d6:	4605      	mov	r5, r0
1a0009d8:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0009da:	7908      	ldrb	r0, [r1, #4]
1a0009dc:	f7ff ff9e 	bl	1a00091c <Chip_Clock_GetClockInputHz>
1a0009e0:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0009e2:	4b19      	ldr	r3, [pc, #100]	; (1a000a48 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0009e4:	442b      	add	r3, r5
1a0009e6:	4a19      	ldr	r2, [pc, #100]	; (1a000a4c <Chip_Clock_CalcMainPLLValue+0x78>)
1a0009e8:	4293      	cmp	r3, r2
1a0009ea:	d821      	bhi.n	1a000a30 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0009ec:	b318      	cbz	r0, 1a000a36 <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0009ee:	2380      	movs	r3, #128	; 0x80
1a0009f0:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a0009f2:	2300      	movs	r3, #0
1a0009f4:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a0009f6:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a0009f8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0009fc:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0009fe:	4a14      	ldr	r2, [pc, #80]	; (1a000a50 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000a00:	4295      	cmp	r5, r2
1a000a02:	d903      	bls.n	1a000a0c <Chip_Clock_CalcMainPLLValue+0x38>
1a000a04:	fb03 f000 	mul.w	r0, r3, r0
1a000a08:	42a8      	cmp	r0, r5
1a000a0a:	d007      	beq.n	1a000a1c <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a000a0c:	4621      	mov	r1, r4
1a000a0e:	4628      	mov	r0, r5
1a000a10:	f7ff fe9c 	bl	1a00074c <pll_get_frac>
       if (!ppll->nsel) {
1a000a14:	68a3      	ldr	r3, [r4, #8]
1a000a16:	b18b      	cbz	r3, 1a000a3c <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a000a18:	3b01      	subs	r3, #1
1a000a1a:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a000a1c:	6923      	ldr	r3, [r4, #16]
1a000a1e:	b183      	cbz	r3, 1a000a42 <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a000a20:	68e2      	ldr	r2, [r4, #12]
1a000a22:	b10a      	cbz	r2, 1a000a28 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a000a24:	3a01      	subs	r2, #1
1a000a26:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a000a28:	3b01      	subs	r3, #1
1a000a2a:	6123      	str	r3, [r4, #16]
   return 0;
1a000a2c:	2000      	movs	r0, #0
}
1a000a2e:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a000a30:	f04f 30ff 	mov.w	r0, #4294967295
1a000a34:	e7fb      	b.n	1a000a2e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000a36:	f04f 30ff 	mov.w	r0, #4294967295
1a000a3a:	e7f8      	b.n	1a000a2e <Chip_Clock_CalcMainPLLValue+0x5a>
           return -1;
1a000a3c:	f04f 30ff 	mov.w	r0, #4294967295
1a000a40:	e7f5      	b.n	1a000a2e <Chip_Clock_CalcMainPLLValue+0x5a>
       return - 1;
1a000a42:	f04f 30ff 	mov.w	r0, #4294967295
1a000a46:	e7f2      	b.n	1a000a2e <Chip_Clock_CalcMainPLLValue+0x5a>
1a000a48:	ff6b3a10 	.word	0xff6b3a10
1a000a4c:	0b940510 	.word	0x0b940510
1a000a50:	094c5eff 	.word	0x094c5eff

1a000a54 <Chip_Clock_GetMainPLLHz>:
{
1a000a54:	b530      	push	{r4, r5, lr}
1a000a56:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000a58:	4d17      	ldr	r5, [pc, #92]	; (1a000ab8 <Chip_Clock_GetMainPLLHz+0x64>)
1a000a5a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000a5c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000a60:	f7ff ff5c 	bl	1a00091c <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000a64:	4b15      	ldr	r3, [pc, #84]	; (1a000abc <Chip_Clock_GetMainPLLHz+0x68>)
1a000a66:	681b      	ldr	r3, [r3, #0]
1a000a68:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000a6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000a6c:	f013 0f01 	tst.w	r3, #1
1a000a70:	d020      	beq.n	1a000ab4 <Chip_Clock_GetMainPLLHz+0x60>
   msel = (PLLReg >> 16) & 0xFF;
1a000a72:	f3c4 4307 	ubfx	r3, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000a76:	f3c4 3201 	ubfx	r2, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000a7a:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a000a7e:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a000a82:	3301      	adds	r3, #1
   n = nsel + 1;
1a000a84:	3201      	adds	r2, #1
   p = ptab[psel];
1a000a86:	f10d 0c08 	add.w	ip, sp, #8
1a000a8a:	4461      	add	r1, ip
1a000a8c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a000a90:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000a94:	d108      	bne.n	1a000aa8 <Chip_Clock_GetMainPLLHz+0x54>
1a000a96:	b93d      	cbnz	r5, 1a000aa8 <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a000a98:	0049      	lsls	r1, r1, #1
1a000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
1a000a9e:	fbb0 f0f2 	udiv	r0, r0, r2
1a000aa2:	fb00 f003 	mul.w	r0, r0, r3
1a000aa6:	e003      	b.n	1a000ab0 <Chip_Clock_GetMainPLLHz+0x5c>
       return m * (freq / n);
1a000aa8:	fbb0 f0f2 	udiv	r0, r0, r2
1a000aac:	fb03 f000 	mul.w	r0, r3, r0
}
1a000ab0:	b003      	add	sp, #12
1a000ab2:	bd30      	pop	{r4, r5, pc}
       return 0;
1a000ab4:	2000      	movs	r0, #0
1a000ab6:	e7fb      	b.n	1a000ab0 <Chip_Clock_GetMainPLLHz+0x5c>
1a000ab8:	40050000 	.word	0x40050000
1a000abc:	1a0020d0 	.word	0x1a0020d0

1a000ac0 <Chip_Clock_GetDivRate>:
{
1a000ac0:	b538      	push	{r3, r4, r5, lr}
1a000ac2:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a000ac4:	4608      	mov	r0, r1
1a000ac6:	f7ff ff0d 	bl	1a0008e4 <Chip_Clock_GetDividerSource>
1a000aca:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a000acc:	4620      	mov	r0, r4
1a000ace:	f7ff ff17 	bl	1a000900 <Chip_Clock_GetDividerDivisor>
1a000ad2:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000ad4:	4628      	mov	r0, r5
1a000ad6:	f7ff ff21 	bl	1a00091c <Chip_Clock_GetClockInputHz>
1a000ada:	3401      	adds	r4, #1
}
1a000adc:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ae0:	bd38      	pop	{r3, r4, r5, pc}
1a000ae2:	Address 0x1a000ae2 is out of bounds.


1a000ae4 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000ae4:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000ae6:	f100 0416 	add.w	r4, r0, #22
1a000aea:	00a4      	lsls	r4, r4, #2
1a000aec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000af0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000af4:	6864      	ldr	r4, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a000af6:	281b      	cmp	r0, #27
1a000af8:	d813      	bhi.n	1a000b22 <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a000afa:	2911      	cmp	r1, #17
1a000afc:	d01a      	beq.n	1a000b34 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000afe:	4d0e      	ldr	r5, [pc, #56]	; (1a000b38 <Chip_Clock_SetBaseClock+0x54>)
1a000b00:	4025      	ands	r5, r4

           if (autoblocken) {
1a000b02:	b10a      	cbz	r2, 1a000b08 <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a000b04:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
           }
           if (powerdn) {
1a000b08:	b10b      	cbz	r3, 1a000b0e <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a000b0a:	f045 0501 	orr.w	r5, r5, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000b0e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000b12:	3016      	adds	r0, #22
1a000b14:	0080      	lsls	r0, r0, #2
1a000b16:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000b1a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000b1e:	6045      	str	r5, [r0, #4]
1a000b20:	e008      	b.n	1a000b34 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a000b22:	f044 0401 	orr.w	r4, r4, #1
1a000b26:	3016      	adds	r0, #22
1a000b28:	0080      	lsls	r0, r0, #2
1a000b2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000b2e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000b32:	6044      	str	r4, [r0, #4]
   }
}
1a000b34:	bc30      	pop	{r4, r5}
1a000b36:	4770      	bx	lr
1a000b38:	e0fff7fe 	.word	0xe0fff7fe

1a000b3c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000b3c:	281b      	cmp	r0, #27
1a000b3e:	d80c      	bhi.n	1a000b5a <Chip_Clock_GetBaseClock+0x1e>
       return CLKINPUT_PD;
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000b40:	3016      	adds	r0, #22
1a000b42:	0080      	lsls	r0, r0, #2
1a000b44:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000b48:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000b4c:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a000b4e:	f010 0f01 	tst.w	r0, #1
1a000b52:	d104      	bne.n	1a000b5e <Chip_Clock_GetBaseClock+0x22>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000b54:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000b58:	4770      	bx	lr
       return CLKINPUT_PD;
1a000b5a:	2011      	movs	r0, #17
1a000b5c:	4770      	bx	lr
       return CLKINPUT_PD;
1a000b5e:	2011      	movs	r0, #17
}
1a000b60:	4770      	bx	lr

1a000b62 <Chip_Clock_GetBaseClocktHz>:
{
1a000b62:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000b64:	f7ff ffea 	bl	1a000b3c <Chip_Clock_GetBaseClock>
1a000b68:	f7ff fed8 	bl	1a00091c <Chip_Clock_GetClockInputHz>
}
1a000b6c:	bd08      	pop	{r3, pc}
1a000b6e:	Address 0x1a000b6e is out of bounds.


1a000b70 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000b70:	b971      	cbnz	r1, 1a000b90 <Chip_Clock_EnableOpts+0x20>
   uint32_t reg = 1;
1a000b72:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a000b74:	b10a      	cbz	r2, 1a000b7a <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a000b76:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000b7a:	2b02      	cmp	r3, #2
1a000b7c:	d00a      	beq.n	1a000b94 <Chip_Clock_EnableOpts+0x24>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000b7e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000b82:	d30a      	bcc.n	1a000b9a <Chip_Clock_EnableOpts+0x2a>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000b84:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000b88:	4b06      	ldr	r3, [pc, #24]	; (1a000ba4 <Chip_Clock_EnableOpts+0x34>)
1a000b8a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000b8e:	4770      	bx	lr
       reg |= (1 << 1);
1a000b90:	2103      	movs	r1, #3
1a000b92:	e7ef      	b.n	1a000b74 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a000b94:	f041 0120 	orr.w	r1, r1, #32
1a000b98:	e7f1      	b.n	1a000b7e <Chip_Clock_EnableOpts+0xe>
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000b9a:	3020      	adds	r0, #32
1a000b9c:	4b02      	ldr	r3, [pc, #8]	; (1a000ba8 <Chip_Clock_EnableOpts+0x38>)
1a000b9e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
   }
}
1a000ba2:	4770      	bx	lr
1a000ba4:	40052000 	.word	0x40052000
1a000ba8:	40051000 	.word	0x40051000

1a000bac <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000bac:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a000bae:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000bb2:	d309      	bcc.n	1a000bc8 <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000bb4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000bb8:	4a0d      	ldr	r2, [pc, #52]	; (1a000bf0 <Chip_Clock_GetRate+0x44>)
1a000bba:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a000bbe:	f014 0f01 	tst.w	r4, #1
1a000bc2:	d107      	bne.n	1a000bd4 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a000bc4:	2000      	movs	r0, #0
   }

   return rate;
}
1a000bc6:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000bc8:	f100 0320 	add.w	r3, r0, #32
1a000bcc:	4a09      	ldr	r2, [pc, #36]	; (1a000bf4 <Chip_Clock_GetRate+0x48>)
1a000bce:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000bd2:	e7f4      	b.n	1a000bbe <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000bd4:	f7ff fe3a 	bl	1a00084c <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000bd8:	f7ff ffc3 	bl	1a000b62 <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a000bdc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000be0:	d103      	bne.n	1a000bea <Chip_Clock_GetRate+0x3e>
           div = 1;
1a000be2:	2301      	movs	r3, #1
       rate = rate / div;
1a000be4:	fbb0 f0f3 	udiv	r0, r0, r3
1a000be8:	e7ed      	b.n	1a000bc6 <Chip_Clock_GetRate+0x1a>
           div = 2;/* No other dividers supported */
1a000bea:	2302      	movs	r3, #2
1a000bec:	e7fa      	b.n	1a000be4 <Chip_Clock_GetRate+0x38>
1a000bee:	bf00      	nop
1a000bf0:	40052000 	.word	0x40052000
1a000bf4:	40051000 	.word	0x40051000

1a000bf8 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000bf8:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000bfa:	f7ff fc73 	bl	1a0004e4 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a000bfe:	f000 f8a3 	bl	1a000d48 <Board_SystemInit>
#endif

#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a000c02:	bd08      	pop	{r3, pc}

1a000c04 <_close_r>:
       __asm__ __volatile__("bkpt 0");
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000c04:	2309      	movs	r3, #9
1a000c06:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c08:	f04f 30ff 	mov.w	r0, #4294967295
1a000c0c:	4770      	bx	lr

1a000c0e <_fstat_r>:
   return -1;
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd, st);
   SET_ERR(ENOSYS);
1a000c0e:	2358      	movs	r3, #88	; 0x58
1a000c10:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c12:	f04f 30ff 	mov.w	r0, #4294967295
1a000c16:	4770      	bx	lr

1a000c18 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000c18:	2902      	cmp	r1, #2
1a000c1a:	d904      	bls.n	1a000c26 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000c1c:	2309      	movs	r3, #9
1a000c1e:	6003      	str	r3, [r0, #0]
       return -1;
1a000c20:	f04f 30ff 	mov.w	r0, #4294967295
1a000c24:	4770      	bx	lr
       return 1;
1a000c26:	2001      	movs	r0, #1
   }
}
1a000c28:	4770      	bx	lr

1a000c2a <_lseek_r>:
   return -1;
}

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd, off, w);
   SET_ERR(ENOSYS);
1a000c2a:	2358      	movs	r3, #88	; 0x58
1a000c2c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c2e:	f04f 30ff 	mov.w	r0, #4294967295
1a000c32:	4770      	bx	lr

1a000c34 <_read_r>:
   return -1;
}

_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000c34:	2902      	cmp	r1, #2
1a000c36:	d80c      	bhi.n	1a000c52 <_read_r+0x1e>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000c38:	b570      	push	{r4, r5, r6, lr}
1a000c3a:	461d      	mov	r5, r3
1a000c3c:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000c3e:	2400      	movs	r4, #0
1a000c40:	42ac      	cmp	r4, r5
1a000c42:	d204      	bcs.n	1a000c4e <_read_r+0x1a>
           ((char*) b)[i] = Board_UARTGetChar();
1a000c44:	f000 f90e 	bl	1a000e64 <Board_UARTGetChar>
1a000c48:	5530      	strb	r0, [r6, r4]
       for (i = 0; i < n; i++)
1a000c4a:	3401      	adds	r4, #1
1a000c4c:	e7f8      	b.n	1a000c40 <_read_r+0xc>
       return n;
1a000c4e:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000c50:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000c52:	2313      	movs	r3, #19
1a000c54:	6003      	str	r3, [r0, #0]
       return -1;
1a000c56:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000c5a:	4770      	bx	lr

1a000c5c <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000c5c:	4b05      	ldr	r3, [pc, #20]	; (1a000c74 <_sbrk_r+0x18>)
1a000c5e:	681b      	ldr	r3, [r3, #0]
1a000c60:	b123      	cbz	r3, 1a000c6c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000c62:	4b04      	ldr	r3, [pc, #16]	; (1a000c74 <_sbrk_r+0x18>)
1a000c64:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000c66:	4401      	add	r1, r0
1a000c68:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000c6a:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000c6c:	4b01      	ldr	r3, [pc, #4]	; (1a000c74 <_sbrk_r+0x18>)
1a000c6e:	4a02      	ldr	r2, [pc, #8]	; (1a000c78 <_sbrk_r+0x1c>)
1a000c70:	601a      	str	r2, [r3, #0]
1a000c72:	e7f6      	b.n	1a000c62 <_sbrk_r+0x6>
1a000c74:	10000070 	.word	0x10000070
1a000c78:	1000008c 	.word	0x1000008c

1a000c7c <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000c7c:	2902      	cmp	r1, #2
1a000c7e:	d80c      	bhi.n	1a000c9a <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000c80:	b570      	push	{r4, r5, r6, lr}
1a000c82:	461d      	mov	r5, r3
1a000c84:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000c86:	2400      	movs	r4, #0
1a000c88:	42ac      	cmp	r4, r5
1a000c8a:	d204      	bcs.n	1a000c96 <_write_r+0x1a>
           Board_UARTPutChar(((char*) b)[i]);
1a000c8c:	5d30      	ldrb	r0, [r6, r4]
1a000c8e:	f000 f8df 	bl	1a000e50 <Board_UARTPutChar>
       for (i = 0; i < n; i++)
1a000c92:	3401      	adds	r4, #1
1a000c94:	e7f8      	b.n	1a000c88 <_write_r+0xc>
       return n;
1a000c96:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000c98:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000c9a:	2313      	movs	r3, #19
1a000c9c:	6003      	str	r3, [r0, #0]
       return -1;
1a000c9e:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000ca2:	4770      	bx	lr

1a000ca4 <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000ca4:	2300      	movs	r3, #0
1a000ca6:	2b17      	cmp	r3, #23
1a000ca8:	d812      	bhi.n	1a000cd0 <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a000caa:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000cac:	4a09      	ldr	r2, [pc, #36]	; (1a000cd4 <Board_SetupMuxing+0x30>)
1a000cae:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000cb2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000cb6:	784a      	ldrb	r2, [r1, #1]
1a000cb8:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000cba:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000cbe:	4906      	ldr	r1, [pc, #24]	; (1a000cd8 <Board_SetupMuxing+0x34>)
1a000cc0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000cc4:	3301      	adds	r3, #1
1a000cc6:	2b17      	cmp	r3, #23
1a000cc8:	d9f0      	bls.n	1a000cac <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000cca:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000cce:	4770      	bx	lr
1a000cd0:	4770      	bx	lr
1a000cd2:	bf00      	nop
1a000cd4:	1a002154 	.word	0x1a002154
1a000cd8:	40086000 	.word	0x40086000

1a000cdc <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a000cdc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000cde:	4a17      	ldr	r2, [pc, #92]	; (1a000d3c <Board_SetupClocking+0x60>)
1a000ce0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000ce8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000cec:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000cf0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000cf8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000cfc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000d00:	2201      	movs	r2, #1
1a000d02:	490f      	ldr	r1, [pc, #60]	; (1a000d40 <Board_SetupClocking+0x64>)
1a000d04:	2006      	movs	r0, #6
1a000d06:	f7ff fb41 	bl	1a00038c <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000d0a:	2400      	movs	r4, #0
1a000d0c:	2c02      	cmp	r4, #2
1a000d0e:	d80b      	bhi.n	1a000d28 <Board_SetupClocking+0x4c>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000d10:	480c      	ldr	r0, [pc, #48]	; (1a000d44 <Board_SetupClocking+0x68>)
1a000d12:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000d16:	78cb      	ldrb	r3, [r1, #3]
1a000d18:	788a      	ldrb	r2, [r1, #2]
1a000d1a:	7849      	ldrb	r1, [r1, #1]
1a000d1c:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000d20:	f7ff fee0 	bl	1a000ae4 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000d24:	3401      	adds	r4, #1
1a000d26:	e7f1      	b.n	1a000d0c <Board_SetupClocking+0x30>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000d28:	4b04      	ldr	r3, [pc, #16]	; (1a000d3c <Board_SetupClocking+0x60>)
1a000d2a:	685a      	ldr	r2, [r3, #4]
1a000d2c:	f022 020c 	bic.w	r2, r2, #12
1a000d30:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000d32:	685a      	ldr	r2, [r3, #4]
1a000d34:	f042 0203 	orr.w	r2, r2, #3
1a000d38:	605a      	str	r2, [r3, #4]
}
1a000d3a:	bd10      	pop	{r4, pc}
1a000d3c:	40043000 	.word	0x40043000
1a000d40:	0c28cb00 	.word	0x0c28cb00
1a000d44:	1a002148 	.word	0x1a002148

1a000d48 <Board_SystemInit>:

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000d48:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a000d4a:	f7ff ffab 	bl	1a000ca4 <Board_SetupMuxing>
   Board_SetupClocking();
1a000d4e:	f7ff ffc5 	bl	1a000cdc <Board_SetupClocking>
}
1a000d52:	bd08      	pop	{r3, pc}

1a000d54 <ResetISR>:
void ResetISR(void) {
1a000d54:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a000d56:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000d58:	4b16      	ldr	r3, [pc, #88]	; (1a000db4 <ResetISR+0x60>)
1a000d5a:	4a17      	ldr	r2, [pc, #92]	; (1a000db8 <ResetISR+0x64>)
1a000d5c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000d5e:	3304      	adds	r3, #4
1a000d60:	4a16      	ldr	r2, [pc, #88]	; (1a000dbc <ResetISR+0x68>)
1a000d62:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000d64:	2300      	movs	r3, #0
1a000d66:	e005      	b.n	1a000d74 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000d68:	4a15      	ldr	r2, [pc, #84]	; (1a000dc0 <ResetISR+0x6c>)
1a000d6a:	f04f 31ff 	mov.w	r1, #4294967295
1a000d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000d72:	3301      	adds	r3, #1
1a000d74:	2b07      	cmp	r3, #7
1a000d76:	d9f7      	bls.n	1a000d68 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a000d78:	b662      	cpsie	i
    SystemInit();
1a000d7a:	f7ff ff3d 	bl	1a000bf8 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a000d7e:	4b11      	ldr	r3, [pc, #68]	; (1a000dc4 <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000d80:	e007      	b.n	1a000d92 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a000d82:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000d86:	689a      	ldr	r2, [r3, #8]
1a000d88:	6859      	ldr	r1, [r3, #4]
1a000d8a:	6818      	ldr	r0, [r3, #0]
1a000d8c:	f7ff f9fe 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a000d90:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000d92:	4a0d      	ldr	r2, [pc, #52]	; (1a000dc8 <ResetISR+0x74>)
1a000d94:	4293      	cmp	r3, r2
1a000d96:	d3f4      	bcc.n	1a000d82 <ResetISR+0x2e>
1a000d98:	e006      	b.n	1a000da8 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a000d9a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000d9c:	6859      	ldr	r1, [r3, #4]
1a000d9e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000da2:	f7ff fa02 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a000da6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000da8:	4a08      	ldr	r2, [pc, #32]	; (1a000dcc <ResetISR+0x78>)
1a000daa:	4293      	cmp	r3, r2
1a000dac:	d3f5      	bcc.n	1a000d9a <ResetISR+0x46>
    main();
1a000dae:	f7ff fabb 	bl	1a000328 <main>
        ;
1a000db2:	e7fe      	b.n	1a000db2 <ResetISR+0x5e>
1a000db4:	40053100 	.word	0x40053100
1a000db8:	10df1000 	.word	0x10df1000
1a000dbc:	01dff7ff 	.word	0x01dff7ff
1a000dc0:	e000e280 	.word	0xe000e280
1a000dc4:	1a000114 	.word	0x1a000114
1a000dc8:	1a000150 	.word	0x1a000150
1a000dcc:	1a000178 	.word	0x1a000178

1a000dd0 <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000dd0:	2200      	movs	r2, #0
1a000dd2:	2a05      	cmp	r2, #5
1a000dd4:	d819      	bhi.n	1a000e0a <Board_LED_Init+0x3a>
{
1a000dd6:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000dd8:	490c      	ldr	r1, [pc, #48]	; (1a000e0c <Board_LED_Init+0x3c>)
1a000dda:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000dde:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000de2:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a000de4:	4b0a      	ldr	r3, [pc, #40]	; (1a000e10 <Board_LED_Init+0x40>)
1a000de6:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000dea:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000dee:	2001      	movs	r0, #1
1a000df0:	40a0      	lsls	r0, r4
1a000df2:	4301      	orrs	r1, r0
1a000df4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a000df8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000dfc:	2100      	movs	r1, #0
1a000dfe:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000e00:	3201      	adds	r2, #1
1a000e02:	2a05      	cmp	r2, #5
1a000e04:	d9e8      	bls.n	1a000dd8 <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000e06:	bc70      	pop	{r4, r5, r6}
1a000e08:	4770      	bx	lr
1a000e0a:	4770      	bx	lr
1a000e0c:	1a0021bc 	.word	0x1a0021bc
1a000e10:	400f4000 	.word	0x400f4000

1a000e14 <Board_UART_Init>:
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000e14:	4b03      	ldr	r3, [pc, #12]	; (1a000e24 <Board_UART_Init+0x10>)
1a000e16:	2212      	movs	r2, #18
1a000e18:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a000e1c:	22d1      	movs	r2, #209	; 0xd1
1a000e1e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
1a000e22:	4770      	bx	lr
1a000e24:	40086000 	.word	0x40086000

1a000e28 <Board_Debug_Init>:
{
1a000e28:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a000e2a:	4c08      	ldr	r4, [pc, #32]	; (1a000e4c <Board_Debug_Init+0x24>)
1a000e2c:	4620      	mov	r0, r4
1a000e2e:	f7ff fff1 	bl	1a000e14 <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a000e32:	4620      	mov	r0, r4
1a000e34:	f7ff fba0 	bl	1a000578 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a000e38:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000e3c:	4620      	mov	r0, r4
1a000e3e:	f7ff fbc5 	bl	1a0005cc <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a000e42:	2303      	movs	r3, #3
1a000e44:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000e46:	2301      	movs	r3, #1
1a000e48:	65e3      	str	r3, [r4, #92]	; 0x5c
}
1a000e4a:	bd10      	pop	{r4, pc}
1a000e4c:	400c1000 	.word	0x400c1000

1a000e50 <Board_UARTPutChar>:
 * @note   Mask bits of the returned status value with UART_LSR_*
 *         definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
   return pUART->LSR;
1a000e50:	4b03      	ldr	r3, [pc, #12]	; (1a000e60 <Board_UARTPutChar+0x10>)
1a000e52:	695b      	ldr	r3, [r3, #20]
   while ((Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE) == 0) {}
1a000e54:	f013 0f20 	tst.w	r3, #32
1a000e58:	d0fa      	beq.n	1a000e50 <Board_UARTPutChar>
   pUART->THR = (uint32_t) data;
1a000e5a:	4b01      	ldr	r3, [pc, #4]	; (1a000e60 <Board_UARTPutChar+0x10>)
1a000e5c:	6018      	str	r0, [r3, #0]
}
1a000e5e:	4770      	bx	lr
1a000e60:	400c1000 	.word	0x400c1000

1a000e64 <Board_UARTGetChar>:
   return pUART->LSR;
1a000e64:	4b05      	ldr	r3, [pc, #20]	; (1a000e7c <Board_UARTGetChar+0x18>)
1a000e66:	695b      	ldr	r3, [r3, #20]
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000e68:	f013 0f01 	tst.w	r3, #1
1a000e6c:	d003      	beq.n	1a000e76 <Board_UARTGetChar+0x12>
   return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000e6e:	4b03      	ldr	r3, [pc, #12]	; (1a000e7c <Board_UARTGetChar+0x18>)
1a000e70:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000e72:	b2c0      	uxtb	r0, r0
1a000e74:	4770      	bx	lr
   return EOF;
1a000e76:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000e7a:	4770      	bx	lr
1a000e7c:	400c1000 	.word	0x400c1000

1a000e80 <Board_LED_Set>:

void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a000e80:	2805      	cmp	r0, #5
1a000e82:	d80d      	bhi.n	1a000ea0 <Board_LED_Set+0x20>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin, (bool) !On);
1a000e84:	4a07      	ldr	r2, [pc, #28]	; (1a000ea4 <Board_LED_Set+0x24>)
1a000e86:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a000e8a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a000e8e:	7842      	ldrb	r2, [r0, #1]
1a000e90:	f081 0101 	eor.w	r1, r1, #1
1a000e94:	015b      	lsls	r3, r3, #5
1a000e96:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a000e9a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000e9e:	5499      	strb	r1, [r3, r2]
}
1a000ea0:	4770      	bx	lr
1a000ea2:	bf00      	nop
1a000ea4:	1a0021bc 	.word	0x1a0021bc

1a000ea8 <Board_LED_Test>:

bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a000ea8:	2805      	cmp	r0, #5
1a000eaa:	d901      	bls.n	1a000eb0 <Board_LED_Test+0x8>
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);

   return false;
1a000eac:	2000      	movs	r0, #0
}
1a000eae:	4770      	bx	lr
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);
1a000eb0:	4a07      	ldr	r2, [pc, #28]	; (1a000ed0 <Board_LED_Test+0x28>)
1a000eb2:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a000eb6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a000eba:	7842      	ldrb	r2, [r0, #1]
   return (bool) pGPIO->B[port][pin];
1a000ebc:	015b      	lsls	r3, r3, #5
1a000ebe:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a000ec2:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000ec6:	5c98      	ldrb	r0, [r3, r2]
1a000ec8:	fab0 f080 	clz	r0, r0
1a000ecc:	0940      	lsrs	r0, r0, #5
1a000ece:	4770      	bx	lr
1a000ed0:	1a0021bc 	.word	0x1a0021bc

1a000ed4 <Board_LED_Toggle>:

void Board_LED_Toggle(uint8_t LEDNumber)
{
1a000ed4:	b510      	push	{r4, lr}
1a000ed6:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a000ed8:	f7ff ffe6 	bl	1a000ea8 <Board_LED_Test>
1a000edc:	f080 0101 	eor.w	r1, r0, #1
1a000ee0:	b2c9      	uxtb	r1, r1
1a000ee2:	4620      	mov	r0, r4
1a000ee4:	f7ff ffcc 	bl	1a000e80 <Board_LED_Set>
}
1a000ee8:	bd10      	pop	{r4, pc}
1a000eea:	Address 0x1a000eea is out of bounds.


1a000eec <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a000eec:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a000eee:	f7ff ff9b 	bl	1a000e28 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a000ef2:	4806      	ldr	r0, [pc, #24]	; (1a000f0c <Board_Init+0x20>)
1a000ef4:	f7ff fbd8 	bl	1a0006a8 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a000ef8:	f7ff ff6a 	bl	1a000dd0 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a000efc:	4a04      	ldr	r2, [pc, #16]	; (1a000f10 <Board_Init+0x24>)
1a000efe:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a000f02:	f043 0304 	orr.w	r3, r3, #4
1a000f06:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a000f0a:	bd08      	pop	{r3, pc}
1a000f0c:	400f4000 	.word	0x400f4000
1a000f10:	40043000 	.word	0x40043000

1a000f14 <__aeabi_uldivmod>:
1a000f14:	b953      	cbnz	r3, 1a000f2c <__aeabi_uldivmod+0x18>
1a000f16:	b94a      	cbnz	r2, 1a000f2c <__aeabi_uldivmod+0x18>
1a000f18:	2900      	cmp	r1, #0
1a000f1a:	bf08      	it	eq
1a000f1c:	2800      	cmpeq	r0, #0
1a000f1e:	bf1c      	itt	ne
1a000f20:	f04f 31ff 	movne.w	r1, #4294967295
1a000f24:	f04f 30ff 	movne.w	r0, #4294967295
1a000f28:	f000 b974 	b.w	1a001214 <__aeabi_idiv0>
1a000f2c:	f1ad 0c08 	sub.w	ip, sp, #8
1a000f30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a000f34:	f000 f806 	bl	1a000f44 <__udivmoddi4>
1a000f38:	f8dd e004 	ldr.w	lr, [sp, #4]
1a000f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000f40:	b004      	add	sp, #16
1a000f42:	4770      	bx	lr

1a000f44 <__udivmoddi4>:
1a000f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000f48:	9e08      	ldr	r6, [sp, #32]
1a000f4a:	4604      	mov	r4, r0
1a000f4c:	4688      	mov	r8, r1
1a000f4e:	2b00      	cmp	r3, #0
1a000f50:	f040 8085 	bne.w	1a00105e <__udivmoddi4+0x11a>
1a000f54:	428a      	cmp	r2, r1
1a000f56:	4615      	mov	r5, r2
1a000f58:	d948      	bls.n	1a000fec <__udivmoddi4+0xa8>
1a000f5a:	fab2 f282 	clz	r2, r2
1a000f5e:	b14a      	cbz	r2, 1a000f74 <__udivmoddi4+0x30>
1a000f60:	f1c2 0720 	rsb	r7, r2, #32
1a000f64:	fa01 f302 	lsl.w	r3, r1, r2
1a000f68:	fa20 f707 	lsr.w	r7, r0, r7
1a000f6c:	4095      	lsls	r5, r2
1a000f6e:	ea47 0803 	orr.w	r8, r7, r3
1a000f72:	4094      	lsls	r4, r2
1a000f74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a000f78:	0c23      	lsrs	r3, r4, #16
1a000f7a:	fbb8 f7fe 	udiv	r7, r8, lr
1a000f7e:	fa1f fc85 	uxth.w	ip, r5
1a000f82:	fb0e 8817 	mls	r8, lr, r7, r8
1a000f86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a000f8a:	fb07 f10c 	mul.w	r1, r7, ip
1a000f8e:	4299      	cmp	r1, r3
1a000f90:	d909      	bls.n	1a000fa6 <__udivmoddi4+0x62>
1a000f92:	18eb      	adds	r3, r5, r3
1a000f94:	f107 30ff 	add.w	r0, r7, #4294967295
1a000f98:	f080 80e3 	bcs.w	1a001162 <__udivmoddi4+0x21e>
1a000f9c:	4299      	cmp	r1, r3
1a000f9e:	f240 80e0 	bls.w	1a001162 <__udivmoddi4+0x21e>
1a000fa2:	3f02      	subs	r7, #2
1a000fa4:	442b      	add	r3, r5
1a000fa6:	1a5b      	subs	r3, r3, r1
1a000fa8:	b2a4      	uxth	r4, r4
1a000faa:	fbb3 f0fe 	udiv	r0, r3, lr
1a000fae:	fb0e 3310 	mls	r3, lr, r0, r3
1a000fb2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a000fb6:	fb00 fc0c 	mul.w	ip, r0, ip
1a000fba:	45a4      	cmp	ip, r4
1a000fbc:	d909      	bls.n	1a000fd2 <__udivmoddi4+0x8e>
1a000fbe:	192c      	adds	r4, r5, r4
1a000fc0:	f100 33ff 	add.w	r3, r0, #4294967295
1a000fc4:	f080 80cb 	bcs.w	1a00115e <__udivmoddi4+0x21a>
1a000fc8:	45a4      	cmp	ip, r4
1a000fca:	f240 80c8 	bls.w	1a00115e <__udivmoddi4+0x21a>
1a000fce:	3802      	subs	r0, #2
1a000fd0:	442c      	add	r4, r5
1a000fd2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a000fd6:	eba4 040c 	sub.w	r4, r4, ip
1a000fda:	2700      	movs	r7, #0
1a000fdc:	b11e      	cbz	r6, 1a000fe6 <__udivmoddi4+0xa2>
1a000fde:	40d4      	lsrs	r4, r2
1a000fe0:	2300      	movs	r3, #0
1a000fe2:	e9c6 4300 	strd	r4, r3, [r6]
1a000fe6:	4639      	mov	r1, r7
1a000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000fec:	2a00      	cmp	r2, #0
1a000fee:	d053      	beq.n	1a001098 <__udivmoddi4+0x154>
1a000ff0:	fab2 f282 	clz	r2, r2
1a000ff4:	2a00      	cmp	r2, #0
1a000ff6:	f040 80b6 	bne.w	1a001166 <__udivmoddi4+0x222>
1a000ffa:	1b49      	subs	r1, r1, r5
1a000ffc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001000:	fa1f f885 	uxth.w	r8, r5
1a001004:	2701      	movs	r7, #1
1a001006:	fbb1 fcfe 	udiv	ip, r1, lr
1a00100a:	0c23      	lsrs	r3, r4, #16
1a00100c:	fb0e 111c 	mls	r1, lr, ip, r1
1a001010:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001014:	fb08 f10c 	mul.w	r1, r8, ip
1a001018:	4299      	cmp	r1, r3
1a00101a:	d907      	bls.n	1a00102c <__udivmoddi4+0xe8>
1a00101c:	18eb      	adds	r3, r5, r3
1a00101e:	f10c 30ff 	add.w	r0, ip, #4294967295
1a001022:	d202      	bcs.n	1a00102a <__udivmoddi4+0xe6>
1a001024:	4299      	cmp	r1, r3
1a001026:	f200 80ec 	bhi.w	1a001202 <__udivmoddi4+0x2be>
1a00102a:	4684      	mov	ip, r0
1a00102c:	1a59      	subs	r1, r3, r1
1a00102e:	b2a3      	uxth	r3, r4
1a001030:	fbb1 f0fe 	udiv	r0, r1, lr
1a001034:	fb0e 1410 	mls	r4, lr, r0, r1
1a001038:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a00103c:	fb08 f800 	mul.w	r8, r8, r0
1a001040:	45a0      	cmp	r8, r4
1a001042:	d907      	bls.n	1a001054 <__udivmoddi4+0x110>
1a001044:	192c      	adds	r4, r5, r4
1a001046:	f100 33ff 	add.w	r3, r0, #4294967295
1a00104a:	d202      	bcs.n	1a001052 <__udivmoddi4+0x10e>
1a00104c:	45a0      	cmp	r8, r4
1a00104e:	f200 80dc 	bhi.w	1a00120a <__udivmoddi4+0x2c6>
1a001052:	4618      	mov	r0, r3
1a001054:	eba4 0408 	sub.w	r4, r4, r8
1a001058:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a00105c:	e7be      	b.n	1a000fdc <__udivmoddi4+0x98>
1a00105e:	428b      	cmp	r3, r1
1a001060:	d908      	bls.n	1a001074 <__udivmoddi4+0x130>
1a001062:	2e00      	cmp	r6, #0
1a001064:	d078      	beq.n	1a001158 <__udivmoddi4+0x214>
1a001066:	2700      	movs	r7, #0
1a001068:	e9c6 0100 	strd	r0, r1, [r6]
1a00106c:	4638      	mov	r0, r7
1a00106e:	4639      	mov	r1, r7
1a001070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001074:	fab3 f783 	clz	r7, r3
1a001078:	b97f      	cbnz	r7, 1a00109a <__udivmoddi4+0x156>
1a00107a:	428b      	cmp	r3, r1
1a00107c:	d302      	bcc.n	1a001084 <__udivmoddi4+0x140>
1a00107e:	4282      	cmp	r2, r0
1a001080:	f200 80bd 	bhi.w	1a0011fe <__udivmoddi4+0x2ba>
1a001084:	1a84      	subs	r4, r0, r2
1a001086:	eb61 0303 	sbc.w	r3, r1, r3
1a00108a:	2001      	movs	r0, #1
1a00108c:	4698      	mov	r8, r3
1a00108e:	2e00      	cmp	r6, #0
1a001090:	d0a9      	beq.n	1a000fe6 <__udivmoddi4+0xa2>
1a001092:	e9c6 4800 	strd	r4, r8, [r6]
1a001096:	e7a6      	b.n	1a000fe6 <__udivmoddi4+0xa2>
1a001098:	deff      	udf	#255	; 0xff
1a00109a:	f1c7 0520 	rsb	r5, r7, #32
1a00109e:	40bb      	lsls	r3, r7
1a0010a0:	fa22 fc05 	lsr.w	ip, r2, r5
1a0010a4:	ea4c 0c03 	orr.w	ip, ip, r3
1a0010a8:	fa01 f407 	lsl.w	r4, r1, r7
1a0010ac:	fa20 f805 	lsr.w	r8, r0, r5
1a0010b0:	fa21 f305 	lsr.w	r3, r1, r5
1a0010b4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0010b8:	ea48 0404 	orr.w	r4, r8, r4
1a0010bc:	fbb3 f9fe 	udiv	r9, r3, lr
1a0010c0:	0c21      	lsrs	r1, r4, #16
1a0010c2:	fb0e 3319 	mls	r3, lr, r9, r3
1a0010c6:	fa1f f88c 	uxth.w	r8, ip
1a0010ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0010ce:	fb09 fa08 	mul.w	sl, r9, r8
1a0010d2:	459a      	cmp	sl, r3
1a0010d4:	fa02 f207 	lsl.w	r2, r2, r7
1a0010d8:	fa00 f107 	lsl.w	r1, r0, r7
1a0010dc:	d90b      	bls.n	1a0010f6 <__udivmoddi4+0x1b2>
1a0010de:	eb1c 0303 	adds.w	r3, ip, r3
1a0010e2:	f109 30ff 	add.w	r0, r9, #4294967295
1a0010e6:	f080 8088 	bcs.w	1a0011fa <__udivmoddi4+0x2b6>
1a0010ea:	459a      	cmp	sl, r3
1a0010ec:	f240 8085 	bls.w	1a0011fa <__udivmoddi4+0x2b6>
1a0010f0:	f1a9 0902 	sub.w	r9, r9, #2
1a0010f4:	4463      	add	r3, ip
1a0010f6:	eba3 030a 	sub.w	r3, r3, sl
1a0010fa:	b2a4      	uxth	r4, r4
1a0010fc:	fbb3 f0fe 	udiv	r0, r3, lr
1a001100:	fb0e 3310 	mls	r3, lr, r0, r3
1a001104:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001108:	fb00 f808 	mul.w	r8, r0, r8
1a00110c:	45a0      	cmp	r8, r4
1a00110e:	d908      	bls.n	1a001122 <__udivmoddi4+0x1de>
1a001110:	eb1c 0404 	adds.w	r4, ip, r4
1a001114:	f100 33ff 	add.w	r3, r0, #4294967295
1a001118:	d26b      	bcs.n	1a0011f2 <__udivmoddi4+0x2ae>
1a00111a:	45a0      	cmp	r8, r4
1a00111c:	d969      	bls.n	1a0011f2 <__udivmoddi4+0x2ae>
1a00111e:	3802      	subs	r0, #2
1a001120:	4464      	add	r4, ip
1a001122:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001126:	eba4 0408 	sub.w	r4, r4, r8
1a00112a:	fba0 8902 	umull	r8, r9, r0, r2
1a00112e:	454c      	cmp	r4, r9
1a001130:	46c6      	mov	lr, r8
1a001132:	464b      	mov	r3, r9
1a001134:	d354      	bcc.n	1a0011e0 <__udivmoddi4+0x29c>
1a001136:	d051      	beq.n	1a0011dc <__udivmoddi4+0x298>
1a001138:	2e00      	cmp	r6, #0
1a00113a:	d069      	beq.n	1a001210 <__udivmoddi4+0x2cc>
1a00113c:	ebb1 020e 	subs.w	r2, r1, lr
1a001140:	eb64 0403 	sbc.w	r4, r4, r3
1a001144:	fa04 f505 	lsl.w	r5, r4, r5
1a001148:	fa22 f307 	lsr.w	r3, r2, r7
1a00114c:	40fc      	lsrs	r4, r7
1a00114e:	431d      	orrs	r5, r3
1a001150:	e9c6 5400 	strd	r5, r4, [r6]
1a001154:	2700      	movs	r7, #0
1a001156:	e746      	b.n	1a000fe6 <__udivmoddi4+0xa2>
1a001158:	4637      	mov	r7, r6
1a00115a:	4630      	mov	r0, r6
1a00115c:	e743      	b.n	1a000fe6 <__udivmoddi4+0xa2>
1a00115e:	4618      	mov	r0, r3
1a001160:	e737      	b.n	1a000fd2 <__udivmoddi4+0x8e>
1a001162:	4607      	mov	r7, r0
1a001164:	e71f      	b.n	1a000fa6 <__udivmoddi4+0x62>
1a001166:	f1c2 0320 	rsb	r3, r2, #32
1a00116a:	fa20 f703 	lsr.w	r7, r0, r3
1a00116e:	4095      	lsls	r5, r2
1a001170:	fa01 f002 	lsl.w	r0, r1, r2
1a001174:	fa21 f303 	lsr.w	r3, r1, r3
1a001178:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00117c:	4338      	orrs	r0, r7
1a00117e:	0c01      	lsrs	r1, r0, #16
1a001180:	fbb3 f7fe 	udiv	r7, r3, lr
1a001184:	fa1f f885 	uxth.w	r8, r5
1a001188:	fb0e 3317 	mls	r3, lr, r7, r3
1a00118c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001190:	fb07 f308 	mul.w	r3, r7, r8
1a001194:	428b      	cmp	r3, r1
1a001196:	fa04 f402 	lsl.w	r4, r4, r2
1a00119a:	d907      	bls.n	1a0011ac <__udivmoddi4+0x268>
1a00119c:	1869      	adds	r1, r5, r1
1a00119e:	f107 3cff 	add.w	ip, r7, #4294967295
1a0011a2:	d228      	bcs.n	1a0011f6 <__udivmoddi4+0x2b2>
1a0011a4:	428b      	cmp	r3, r1
1a0011a6:	d926      	bls.n	1a0011f6 <__udivmoddi4+0x2b2>
1a0011a8:	3f02      	subs	r7, #2
1a0011aa:	4429      	add	r1, r5
1a0011ac:	1acb      	subs	r3, r1, r3
1a0011ae:	b281      	uxth	r1, r0
1a0011b0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0011b4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0011b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0011bc:	fb00 f308 	mul.w	r3, r0, r8
1a0011c0:	428b      	cmp	r3, r1
1a0011c2:	d907      	bls.n	1a0011d4 <__udivmoddi4+0x290>
1a0011c4:	1869      	adds	r1, r5, r1
1a0011c6:	f100 3cff 	add.w	ip, r0, #4294967295
1a0011ca:	d210      	bcs.n	1a0011ee <__udivmoddi4+0x2aa>
1a0011cc:	428b      	cmp	r3, r1
1a0011ce:	d90e      	bls.n	1a0011ee <__udivmoddi4+0x2aa>
1a0011d0:	3802      	subs	r0, #2
1a0011d2:	4429      	add	r1, r5
1a0011d4:	1ac9      	subs	r1, r1, r3
1a0011d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0011da:	e714      	b.n	1a001006 <__udivmoddi4+0xc2>
1a0011dc:	4541      	cmp	r1, r8
1a0011de:	d2ab      	bcs.n	1a001138 <__udivmoddi4+0x1f4>
1a0011e0:	ebb8 0e02 	subs.w	lr, r8, r2
1a0011e4:	eb69 020c 	sbc.w	r2, r9, ip
1a0011e8:	3801      	subs	r0, #1
1a0011ea:	4613      	mov	r3, r2
1a0011ec:	e7a4      	b.n	1a001138 <__udivmoddi4+0x1f4>
1a0011ee:	4660      	mov	r0, ip
1a0011f0:	e7f0      	b.n	1a0011d4 <__udivmoddi4+0x290>
1a0011f2:	4618      	mov	r0, r3
1a0011f4:	e795      	b.n	1a001122 <__udivmoddi4+0x1de>
1a0011f6:	4667      	mov	r7, ip
1a0011f8:	e7d8      	b.n	1a0011ac <__udivmoddi4+0x268>
1a0011fa:	4681      	mov	r9, r0
1a0011fc:	e77b      	b.n	1a0010f6 <__udivmoddi4+0x1b2>
1a0011fe:	4638      	mov	r0, r7
1a001200:	e745      	b.n	1a00108e <__udivmoddi4+0x14a>
1a001202:	f1ac 0c02 	sub.w	ip, ip, #2
1a001206:	442b      	add	r3, r5
1a001208:	e710      	b.n	1a00102c <__udivmoddi4+0xe8>
1a00120a:	3802      	subs	r0, #2
1a00120c:	442c      	add	r4, r5
1a00120e:	e721      	b.n	1a001054 <__udivmoddi4+0x110>
1a001210:	4637      	mov	r7, r6
1a001212:	e6e8      	b.n	1a000fe6 <__udivmoddi4+0xa2>

1a001214 <__aeabi_idiv0>:
1a001214:	4770      	bx	lr
1a001216:	bf00      	nop

1a001218 <memset>:
1a001218:	4402      	add	r2, r0
1a00121a:	4603      	mov	r3, r0
1a00121c:	4293      	cmp	r3, r2
1a00121e:	d100      	bne.n	1a001222 <memset+0xa>
1a001220:	4770      	bx	lr
1a001222:	f803 1b01 	strb.w	r1, [r3], #1
1a001226:	e7f9      	b.n	1a00121c <memset+0x4>

1a001228 <iprintf>:
1a001228:	b40f      	push	{r0, r1, r2, r3}
1a00122a:	4b0a      	ldr	r3, [pc, #40]	; (1a001254 <iprintf+0x2c>)
1a00122c:	b513      	push	{r0, r1, r4, lr}
1a00122e:	681c      	ldr	r4, [r3, #0]
1a001230:	b124      	cbz	r4, 1a00123c <iprintf+0x14>
1a001232:	69a3      	ldr	r3, [r4, #24]
1a001234:	b913      	cbnz	r3, 1a00123c <iprintf+0x14>
1a001236:	4620      	mov	r0, r4
1a001238:	f000 f866 	bl	1a001308 <__sinit>
1a00123c:	ab05      	add	r3, sp, #20
1a00123e:	9a04      	ldr	r2, [sp, #16]
1a001240:	68a1      	ldr	r1, [r4, #8]
1a001242:	9301      	str	r3, [sp, #4]
1a001244:	4620      	mov	r0, r4
1a001246:	f000 f983 	bl	1a001550 <_vfiprintf_r>
1a00124a:	b002      	add	sp, #8
1a00124c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001250:	b004      	add	sp, #16
1a001252:	4770      	bx	lr
1a001254:	10000000 	.word	0x10000000

1a001258 <std>:
1a001258:	2300      	movs	r3, #0
1a00125a:	b510      	push	{r4, lr}
1a00125c:	4604      	mov	r4, r0
1a00125e:	e9c0 3300 	strd	r3, r3, [r0]
1a001262:	6083      	str	r3, [r0, #8]
1a001264:	8181      	strh	r1, [r0, #12]
1a001266:	6643      	str	r3, [r0, #100]	; 0x64
1a001268:	81c2      	strh	r2, [r0, #14]
1a00126a:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00126e:	6183      	str	r3, [r0, #24]
1a001270:	4619      	mov	r1, r3
1a001272:	2208      	movs	r2, #8
1a001274:	305c      	adds	r0, #92	; 0x5c
1a001276:	f7ff ffcf 	bl	1a001218 <memset>
1a00127a:	4b05      	ldr	r3, [pc, #20]	; (1a001290 <std+0x38>)
1a00127c:	6263      	str	r3, [r4, #36]	; 0x24
1a00127e:	4b05      	ldr	r3, [pc, #20]	; (1a001294 <std+0x3c>)
1a001280:	62a3      	str	r3, [r4, #40]	; 0x28
1a001282:	4b05      	ldr	r3, [pc, #20]	; (1a001298 <std+0x40>)
1a001284:	62e3      	str	r3, [r4, #44]	; 0x2c
1a001286:	4b05      	ldr	r3, [pc, #20]	; (1a00129c <std+0x44>)
1a001288:	6224      	str	r4, [r4, #32]
1a00128a:	6323      	str	r3, [r4, #48]	; 0x30
1a00128c:	bd10      	pop	{r4, pc}
1a00128e:	bf00      	nop
1a001290:	1a001ab5 	.word	0x1a001ab5
1a001294:	1a001ad7 	.word	0x1a001ad7
1a001298:	1a001b0f 	.word	0x1a001b0f
1a00129c:	1a001b33 	.word	0x1a001b33

1a0012a0 <_cleanup_r>:
1a0012a0:	4901      	ldr	r1, [pc, #4]	; (1a0012a8 <_cleanup_r+0x8>)
1a0012a2:	f000 b8af 	b.w	1a001404 <_fwalk_reent>
1a0012a6:	bf00      	nop
1a0012a8:	1a001dc9 	.word	0x1a001dc9

1a0012ac <__sfmoreglue>:
1a0012ac:	b570      	push	{r4, r5, r6, lr}
1a0012ae:	1e4a      	subs	r2, r1, #1
1a0012b0:	2568      	movs	r5, #104	; 0x68
1a0012b2:	4355      	muls	r5, r2
1a0012b4:	460e      	mov	r6, r1
1a0012b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0012ba:	f000 f8c5 	bl	1a001448 <_malloc_r>
1a0012be:	4604      	mov	r4, r0
1a0012c0:	b140      	cbz	r0, 1a0012d4 <__sfmoreglue+0x28>
1a0012c2:	2100      	movs	r1, #0
1a0012c4:	e9c0 1600 	strd	r1, r6, [r0]
1a0012c8:	300c      	adds	r0, #12
1a0012ca:	60a0      	str	r0, [r4, #8]
1a0012cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0012d0:	f7ff ffa2 	bl	1a001218 <memset>
1a0012d4:	4620      	mov	r0, r4
1a0012d6:	bd70      	pop	{r4, r5, r6, pc}

1a0012d8 <__sfp_lock_acquire>:
1a0012d8:	4801      	ldr	r0, [pc, #4]	; (1a0012e0 <__sfp_lock_acquire+0x8>)
1a0012da:	f000 b8b2 	b.w	1a001442 <__retarget_lock_acquire_recursive>
1a0012de:	bf00      	nop
1a0012e0:	10000088 	.word	0x10000088

1a0012e4 <__sfp_lock_release>:
1a0012e4:	4801      	ldr	r0, [pc, #4]	; (1a0012ec <__sfp_lock_release+0x8>)
1a0012e6:	f000 b8ad 	b.w	1a001444 <__retarget_lock_release_recursive>
1a0012ea:	bf00      	nop
1a0012ec:	10000088 	.word	0x10000088

1a0012f0 <__sinit_lock_acquire>:
1a0012f0:	4801      	ldr	r0, [pc, #4]	; (1a0012f8 <__sinit_lock_acquire+0x8>)
1a0012f2:	f000 b8a6 	b.w	1a001442 <__retarget_lock_acquire_recursive>
1a0012f6:	bf00      	nop
1a0012f8:	10000083 	.word	0x10000083

1a0012fc <__sinit_lock_release>:
1a0012fc:	4801      	ldr	r0, [pc, #4]	; (1a001304 <__sinit_lock_release+0x8>)
1a0012fe:	f000 b8a1 	b.w	1a001444 <__retarget_lock_release_recursive>
1a001302:	bf00      	nop
1a001304:	10000083 	.word	0x10000083

1a001308 <__sinit>:
1a001308:	b510      	push	{r4, lr}
1a00130a:	4604      	mov	r4, r0
1a00130c:	f7ff fff0 	bl	1a0012f0 <__sinit_lock_acquire>
1a001310:	69a3      	ldr	r3, [r4, #24]
1a001312:	b11b      	cbz	r3, 1a00131c <__sinit+0x14>
1a001314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001318:	f7ff bff0 	b.w	1a0012fc <__sinit_lock_release>
1a00131c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a001320:	6523      	str	r3, [r4, #80]	; 0x50
1a001322:	4b13      	ldr	r3, [pc, #76]	; (1a001370 <__sinit+0x68>)
1a001324:	4a13      	ldr	r2, [pc, #76]	; (1a001374 <__sinit+0x6c>)
1a001326:	681b      	ldr	r3, [r3, #0]
1a001328:	62a2      	str	r2, [r4, #40]	; 0x28
1a00132a:	42a3      	cmp	r3, r4
1a00132c:	bf04      	itt	eq
1a00132e:	2301      	moveq	r3, #1
1a001330:	61a3      	streq	r3, [r4, #24]
1a001332:	4620      	mov	r0, r4
1a001334:	f000 f820 	bl	1a001378 <__sfp>
1a001338:	6060      	str	r0, [r4, #4]
1a00133a:	4620      	mov	r0, r4
1a00133c:	f000 f81c 	bl	1a001378 <__sfp>
1a001340:	60a0      	str	r0, [r4, #8]
1a001342:	4620      	mov	r0, r4
1a001344:	f000 f818 	bl	1a001378 <__sfp>
1a001348:	2200      	movs	r2, #0
1a00134a:	60e0      	str	r0, [r4, #12]
1a00134c:	2104      	movs	r1, #4
1a00134e:	6860      	ldr	r0, [r4, #4]
1a001350:	f7ff ff82 	bl	1a001258 <std>
1a001354:	2201      	movs	r2, #1
1a001356:	2109      	movs	r1, #9
1a001358:	68a0      	ldr	r0, [r4, #8]
1a00135a:	f7ff ff7d 	bl	1a001258 <std>
1a00135e:	2202      	movs	r2, #2
1a001360:	2112      	movs	r1, #18
1a001362:	68e0      	ldr	r0, [r4, #12]
1a001364:	f7ff ff78 	bl	1a001258 <std>
1a001368:	2301      	movs	r3, #1
1a00136a:	61a3      	str	r3, [r4, #24]
1a00136c:	e7d2      	b.n	1a001314 <__sinit+0xc>
1a00136e:	bf00      	nop
1a001370:	1a002228 	.word	0x1a002228
1a001374:	1a0012a1 	.word	0x1a0012a1

1a001378 <__sfp>:
1a001378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00137a:	4607      	mov	r7, r0
1a00137c:	f7ff ffac 	bl	1a0012d8 <__sfp_lock_acquire>
1a001380:	4b1e      	ldr	r3, [pc, #120]	; (1a0013fc <__sfp+0x84>)
1a001382:	681e      	ldr	r6, [r3, #0]
1a001384:	69b3      	ldr	r3, [r6, #24]
1a001386:	b913      	cbnz	r3, 1a00138e <__sfp+0x16>
1a001388:	4630      	mov	r0, r6
1a00138a:	f7ff ffbd 	bl	1a001308 <__sinit>
1a00138e:	3648      	adds	r6, #72	; 0x48
1a001390:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a001394:	3b01      	subs	r3, #1
1a001396:	d503      	bpl.n	1a0013a0 <__sfp+0x28>
1a001398:	6833      	ldr	r3, [r6, #0]
1a00139a:	b30b      	cbz	r3, 1a0013e0 <__sfp+0x68>
1a00139c:	6836      	ldr	r6, [r6, #0]
1a00139e:	e7f7      	b.n	1a001390 <__sfp+0x18>
1a0013a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0013a4:	b9d5      	cbnz	r5, 1a0013dc <__sfp+0x64>
1a0013a6:	4b16      	ldr	r3, [pc, #88]	; (1a001400 <__sfp+0x88>)
1a0013a8:	60e3      	str	r3, [r4, #12]
1a0013aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0013ae:	6665      	str	r5, [r4, #100]	; 0x64
1a0013b0:	f000 f846 	bl	1a001440 <__retarget_lock_init_recursive>
1a0013b4:	f7ff ff96 	bl	1a0012e4 <__sfp_lock_release>
1a0013b8:	6025      	str	r5, [r4, #0]
1a0013ba:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a0013be:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0013c2:	61a5      	str	r5, [r4, #24]
1a0013c4:	2208      	movs	r2, #8
1a0013c6:	4629      	mov	r1, r5
1a0013c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0013cc:	f7ff ff24 	bl	1a001218 <memset>
1a0013d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0013d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0013d8:	4620      	mov	r0, r4
1a0013da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0013dc:	3468      	adds	r4, #104	; 0x68
1a0013de:	e7d9      	b.n	1a001394 <__sfp+0x1c>
1a0013e0:	2104      	movs	r1, #4
1a0013e2:	4638      	mov	r0, r7
1a0013e4:	f7ff ff62 	bl	1a0012ac <__sfmoreglue>
1a0013e8:	4604      	mov	r4, r0
1a0013ea:	6030      	str	r0, [r6, #0]
1a0013ec:	2800      	cmp	r0, #0
1a0013ee:	d1d5      	bne.n	1a00139c <__sfp+0x24>
1a0013f0:	f7ff ff78 	bl	1a0012e4 <__sfp_lock_release>
1a0013f4:	230c      	movs	r3, #12
1a0013f6:	603b      	str	r3, [r7, #0]
1a0013f8:	e7ee      	b.n	1a0013d8 <__sfp+0x60>
1a0013fa:	bf00      	nop
1a0013fc:	1a002228 	.word	0x1a002228
1a001400:	ffff0001 	.word	0xffff0001

1a001404 <_fwalk_reent>:
1a001404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001408:	4680      	mov	r8, r0
1a00140a:	4689      	mov	r9, r1
1a00140c:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a001410:	2600      	movs	r6, #0
1a001412:	b914      	cbnz	r4, 1a00141a <_fwalk_reent+0x16>
1a001414:	4630      	mov	r0, r6
1a001416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00141a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00141e:	3f01      	subs	r7, #1
1a001420:	d501      	bpl.n	1a001426 <_fwalk_reent+0x22>
1a001422:	6824      	ldr	r4, [r4, #0]
1a001424:	e7f5      	b.n	1a001412 <_fwalk_reent+0xe>
1a001426:	89ab      	ldrh	r3, [r5, #12]
1a001428:	2b01      	cmp	r3, #1
1a00142a:	d907      	bls.n	1a00143c <_fwalk_reent+0x38>
1a00142c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a001430:	3301      	adds	r3, #1
1a001432:	d003      	beq.n	1a00143c <_fwalk_reent+0x38>
1a001434:	4629      	mov	r1, r5
1a001436:	4640      	mov	r0, r8
1a001438:	47c8      	blx	r9
1a00143a:	4306      	orrs	r6, r0
1a00143c:	3568      	adds	r5, #104	; 0x68
1a00143e:	e7ee      	b.n	1a00141e <_fwalk_reent+0x1a>

1a001440 <__retarget_lock_init_recursive>:
1a001440:	4770      	bx	lr

1a001442 <__retarget_lock_acquire_recursive>:
1a001442:	4770      	bx	lr

1a001444 <__retarget_lock_release_recursive>:
1a001444:	4770      	bx	lr
1a001446:	Address 0x1a001446 is out of bounds.


1a001448 <_malloc_r>:
1a001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00144a:	1ccd      	adds	r5, r1, #3
1a00144c:	f025 0503 	bic.w	r5, r5, #3
1a001450:	3508      	adds	r5, #8
1a001452:	2d0c      	cmp	r5, #12
1a001454:	bf38      	it	cc
1a001456:	250c      	movcc	r5, #12
1a001458:	2d00      	cmp	r5, #0
1a00145a:	4606      	mov	r6, r0
1a00145c:	db01      	blt.n	1a001462 <_malloc_r+0x1a>
1a00145e:	42a9      	cmp	r1, r5
1a001460:	d903      	bls.n	1a00146a <_malloc_r+0x22>
1a001462:	230c      	movs	r3, #12
1a001464:	6033      	str	r3, [r6, #0]
1a001466:	2000      	movs	r0, #0
1a001468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00146a:	f000 fda1 	bl	1a001fb0 <__malloc_lock>
1a00146e:	4921      	ldr	r1, [pc, #132]	; (1a0014f4 <_malloc_r+0xac>)
1a001470:	680a      	ldr	r2, [r1, #0]
1a001472:	4614      	mov	r4, r2
1a001474:	b99c      	cbnz	r4, 1a00149e <_malloc_r+0x56>
1a001476:	4f20      	ldr	r7, [pc, #128]	; (1a0014f8 <_malloc_r+0xb0>)
1a001478:	683b      	ldr	r3, [r7, #0]
1a00147a:	b923      	cbnz	r3, 1a001486 <_malloc_r+0x3e>
1a00147c:	4621      	mov	r1, r4
1a00147e:	4630      	mov	r0, r6
1a001480:	f7ff fbec 	bl	1a000c5c <_sbrk_r>
1a001484:	6038      	str	r0, [r7, #0]
1a001486:	4629      	mov	r1, r5
1a001488:	4630      	mov	r0, r6
1a00148a:	f7ff fbe7 	bl	1a000c5c <_sbrk_r>
1a00148e:	1c43      	adds	r3, r0, #1
1a001490:	d123      	bne.n	1a0014da <_malloc_r+0x92>
1a001492:	230c      	movs	r3, #12
1a001494:	6033      	str	r3, [r6, #0]
1a001496:	4630      	mov	r0, r6
1a001498:	f000 fd90 	bl	1a001fbc <__malloc_unlock>
1a00149c:	e7e3      	b.n	1a001466 <_malloc_r+0x1e>
1a00149e:	6823      	ldr	r3, [r4, #0]
1a0014a0:	1b5b      	subs	r3, r3, r5
1a0014a2:	d417      	bmi.n	1a0014d4 <_malloc_r+0x8c>
1a0014a4:	2b0b      	cmp	r3, #11
1a0014a6:	d903      	bls.n	1a0014b0 <_malloc_r+0x68>
1a0014a8:	6023      	str	r3, [r4, #0]
1a0014aa:	441c      	add	r4, r3
1a0014ac:	6025      	str	r5, [r4, #0]
1a0014ae:	e004      	b.n	1a0014ba <_malloc_r+0x72>
1a0014b0:	6863      	ldr	r3, [r4, #4]
1a0014b2:	42a2      	cmp	r2, r4
1a0014b4:	bf0c      	ite	eq
1a0014b6:	600b      	streq	r3, [r1, #0]
1a0014b8:	6053      	strne	r3, [r2, #4]
1a0014ba:	4630      	mov	r0, r6
1a0014bc:	f000 fd7e 	bl	1a001fbc <__malloc_unlock>
1a0014c0:	f104 000b 	add.w	r0, r4, #11
1a0014c4:	1d23      	adds	r3, r4, #4
1a0014c6:	f020 0007 	bic.w	r0, r0, #7
1a0014ca:	1ac2      	subs	r2, r0, r3
1a0014cc:	d0cc      	beq.n	1a001468 <_malloc_r+0x20>
1a0014ce:	1a1b      	subs	r3, r3, r0
1a0014d0:	50a3      	str	r3, [r4, r2]
1a0014d2:	e7c9      	b.n	1a001468 <_malloc_r+0x20>
1a0014d4:	4622      	mov	r2, r4
1a0014d6:	6864      	ldr	r4, [r4, #4]
1a0014d8:	e7cc      	b.n	1a001474 <_malloc_r+0x2c>
1a0014da:	1cc4      	adds	r4, r0, #3
1a0014dc:	f024 0403 	bic.w	r4, r4, #3
1a0014e0:	42a0      	cmp	r0, r4
1a0014e2:	d0e3      	beq.n	1a0014ac <_malloc_r+0x64>
1a0014e4:	1a21      	subs	r1, r4, r0
1a0014e6:	4630      	mov	r0, r6
1a0014e8:	f7ff fbb8 	bl	1a000c5c <_sbrk_r>
1a0014ec:	3001      	adds	r0, #1
1a0014ee:	d1dd      	bne.n	1a0014ac <_malloc_r+0x64>
1a0014f0:	e7cf      	b.n	1a001492 <_malloc_r+0x4a>
1a0014f2:	bf00      	nop
1a0014f4:	10000074 	.word	0x10000074
1a0014f8:	10000078 	.word	0x10000078

1a0014fc <__sfputc_r>:
1a0014fc:	6893      	ldr	r3, [r2, #8]
1a0014fe:	3b01      	subs	r3, #1
1a001500:	2b00      	cmp	r3, #0
1a001502:	b410      	push	{r4}
1a001504:	6093      	str	r3, [r2, #8]
1a001506:	da08      	bge.n	1a00151a <__sfputc_r+0x1e>
1a001508:	6994      	ldr	r4, [r2, #24]
1a00150a:	42a3      	cmp	r3, r4
1a00150c:	db01      	blt.n	1a001512 <__sfputc_r+0x16>
1a00150e:	290a      	cmp	r1, #10
1a001510:	d103      	bne.n	1a00151a <__sfputc_r+0x1e>
1a001512:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001516:	f000 bb11 	b.w	1a001b3c <__swbuf_r>
1a00151a:	6813      	ldr	r3, [r2, #0]
1a00151c:	1c58      	adds	r0, r3, #1
1a00151e:	6010      	str	r0, [r2, #0]
1a001520:	7019      	strb	r1, [r3, #0]
1a001522:	4608      	mov	r0, r1
1a001524:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001528:	4770      	bx	lr

1a00152a <__sfputs_r>:
1a00152a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00152c:	4606      	mov	r6, r0
1a00152e:	460f      	mov	r7, r1
1a001530:	4614      	mov	r4, r2
1a001532:	18d5      	adds	r5, r2, r3
1a001534:	42ac      	cmp	r4, r5
1a001536:	d101      	bne.n	1a00153c <__sfputs_r+0x12>
1a001538:	2000      	movs	r0, #0
1a00153a:	e007      	b.n	1a00154c <__sfputs_r+0x22>
1a00153c:	463a      	mov	r2, r7
1a00153e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a001542:	4630      	mov	r0, r6
1a001544:	f7ff ffda 	bl	1a0014fc <__sfputc_r>
1a001548:	1c43      	adds	r3, r0, #1
1a00154a:	d1f3      	bne.n	1a001534 <__sfputs_r+0xa>
1a00154c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00154e:	Address 0x1a00154e is out of bounds.


1a001550 <_vfiprintf_r>:
1a001550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001554:	460d      	mov	r5, r1
1a001556:	b09d      	sub	sp, #116	; 0x74
1a001558:	4614      	mov	r4, r2
1a00155a:	461e      	mov	r6, r3
1a00155c:	4607      	mov	r7, r0
1a00155e:	b118      	cbz	r0, 1a001568 <_vfiprintf_r+0x18>
1a001560:	6983      	ldr	r3, [r0, #24]
1a001562:	b90b      	cbnz	r3, 1a001568 <_vfiprintf_r+0x18>
1a001564:	f7ff fed0 	bl	1a001308 <__sinit>
1a001568:	4b85      	ldr	r3, [pc, #532]	; (1a001780 <_vfiprintf_r+0x230>)
1a00156a:	429d      	cmp	r5, r3
1a00156c:	d11b      	bne.n	1a0015a6 <_vfiprintf_r+0x56>
1a00156e:	687d      	ldr	r5, [r7, #4]
1a001570:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a001572:	07d9      	lsls	r1, r3, #31
1a001574:	d405      	bmi.n	1a001582 <_vfiprintf_r+0x32>
1a001576:	89ab      	ldrh	r3, [r5, #12]
1a001578:	059a      	lsls	r2, r3, #22
1a00157a:	d402      	bmi.n	1a001582 <_vfiprintf_r+0x32>
1a00157c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00157e:	f7ff ff60 	bl	1a001442 <__retarget_lock_acquire_recursive>
1a001582:	89ab      	ldrh	r3, [r5, #12]
1a001584:	071b      	lsls	r3, r3, #28
1a001586:	d501      	bpl.n	1a00158c <_vfiprintf_r+0x3c>
1a001588:	692b      	ldr	r3, [r5, #16]
1a00158a:	b9eb      	cbnz	r3, 1a0015c8 <_vfiprintf_r+0x78>
1a00158c:	4629      	mov	r1, r5
1a00158e:	4638      	mov	r0, r7
1a001590:	f000 fb26 	bl	1a001be0 <__swsetup_r>
1a001594:	b1c0      	cbz	r0, 1a0015c8 <_vfiprintf_r+0x78>
1a001596:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a001598:	07d8      	lsls	r0, r3, #31
1a00159a:	d50e      	bpl.n	1a0015ba <_vfiprintf_r+0x6a>
1a00159c:	f04f 30ff 	mov.w	r0, #4294967295
1a0015a0:	b01d      	add	sp, #116	; 0x74
1a0015a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0015a6:	4b77      	ldr	r3, [pc, #476]	; (1a001784 <_vfiprintf_r+0x234>)
1a0015a8:	429d      	cmp	r5, r3
1a0015aa:	d101      	bne.n	1a0015b0 <_vfiprintf_r+0x60>
1a0015ac:	68bd      	ldr	r5, [r7, #8]
1a0015ae:	e7df      	b.n	1a001570 <_vfiprintf_r+0x20>
1a0015b0:	4b75      	ldr	r3, [pc, #468]	; (1a001788 <_vfiprintf_r+0x238>)
1a0015b2:	429d      	cmp	r5, r3
1a0015b4:	bf08      	it	eq
1a0015b6:	68fd      	ldreq	r5, [r7, #12]
1a0015b8:	e7da      	b.n	1a001570 <_vfiprintf_r+0x20>
1a0015ba:	89ab      	ldrh	r3, [r5, #12]
1a0015bc:	0599      	lsls	r1, r3, #22
1a0015be:	d4ed      	bmi.n	1a00159c <_vfiprintf_r+0x4c>
1a0015c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a0015c2:	f7ff ff3f 	bl	1a001444 <__retarget_lock_release_recursive>
1a0015c6:	e7e9      	b.n	1a00159c <_vfiprintf_r+0x4c>
1a0015c8:	2300      	movs	r3, #0
1a0015ca:	9309      	str	r3, [sp, #36]	; 0x24
1a0015cc:	2320      	movs	r3, #32
1a0015ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0015d2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 1a00178c <_vfiprintf_r+0x23c>
1a0015d6:	9603      	str	r6, [sp, #12]
1a0015d8:	2330      	movs	r3, #48	; 0x30
1a0015da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0015de:	f04f 0a01 	mov.w	sl, #1
1a0015e2:	4623      	mov	r3, r4
1a0015e4:	461e      	mov	r6, r3
1a0015e6:	f813 2b01 	ldrb.w	r2, [r3], #1
1a0015ea:	b10a      	cbz	r2, 1a0015f0 <_vfiprintf_r+0xa0>
1a0015ec:	2a25      	cmp	r2, #37	; 0x25
1a0015ee:	d1f9      	bne.n	1a0015e4 <_vfiprintf_r+0x94>
1a0015f0:	ebb6 0b04 	subs.w	fp, r6, r4
1a0015f4:	d00b      	beq.n	1a00160e <_vfiprintf_r+0xbe>
1a0015f6:	465b      	mov	r3, fp
1a0015f8:	4622      	mov	r2, r4
1a0015fa:	4629      	mov	r1, r5
1a0015fc:	4638      	mov	r0, r7
1a0015fe:	f7ff ff94 	bl	1a00152a <__sfputs_r>
1a001602:	3001      	adds	r0, #1
1a001604:	f000 80a3 	beq.w	1a00174e <_vfiprintf_r+0x1fe>
1a001608:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00160a:	445b      	add	r3, fp
1a00160c:	9309      	str	r3, [sp, #36]	; 0x24
1a00160e:	7833      	ldrb	r3, [r6, #0]
1a001610:	2b00      	cmp	r3, #0
1a001612:	f000 809c 	beq.w	1a00174e <_vfiprintf_r+0x1fe>
1a001616:	2300      	movs	r3, #0
1a001618:	f04f 32ff 	mov.w	r2, #4294967295
1a00161c:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a001620:	3601      	adds	r6, #1
1a001622:	9304      	str	r3, [sp, #16]
1a001624:	9307      	str	r3, [sp, #28]
1a001626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00162a:	931a      	str	r3, [sp, #104]	; 0x68
1a00162c:	4634      	mov	r4, r6
1a00162e:	2205      	movs	r2, #5
1a001630:	f814 1b01 	ldrb.w	r1, [r4], #1
1a001634:	4855      	ldr	r0, [pc, #340]	; (1a00178c <_vfiprintf_r+0x23c>)
1a001636:	f000 fc6b 	bl	1a001f10 <memchr>
1a00163a:	9b04      	ldr	r3, [sp, #16]
1a00163c:	b9c0      	cbnz	r0, 1a001670 <_vfiprintf_r+0x120>
1a00163e:	06da      	lsls	r2, r3, #27
1a001640:	bf44      	itt	mi
1a001642:	2220      	movmi	r2, #32
1a001644:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a001648:	0718      	lsls	r0, r3, #28
1a00164a:	bf44      	itt	mi
1a00164c:	222b      	movmi	r2, #43	; 0x2b
1a00164e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a001652:	7832      	ldrb	r2, [r6, #0]
1a001654:	2a2a      	cmp	r2, #42	; 0x2a
1a001656:	d013      	beq.n	1a001680 <_vfiprintf_r+0x130>
1a001658:	9a07      	ldr	r2, [sp, #28]
1a00165a:	4634      	mov	r4, r6
1a00165c:	2000      	movs	r0, #0
1a00165e:	260a      	movs	r6, #10
1a001660:	4621      	mov	r1, r4
1a001662:	f811 3b01 	ldrb.w	r3, [r1], #1
1a001666:	3b30      	subs	r3, #48	; 0x30
1a001668:	2b09      	cmp	r3, #9
1a00166a:	d94b      	bls.n	1a001704 <_vfiprintf_r+0x1b4>
1a00166c:	b970      	cbnz	r0, 1a00168c <_vfiprintf_r+0x13c>
1a00166e:	e014      	b.n	1a00169a <_vfiprintf_r+0x14a>
1a001670:	eba0 0009 	sub.w	r0, r0, r9
1a001674:	fa0a f000 	lsl.w	r0, sl, r0
1a001678:	4318      	orrs	r0, r3
1a00167a:	9004      	str	r0, [sp, #16]
1a00167c:	4626      	mov	r6, r4
1a00167e:	e7d5      	b.n	1a00162c <_vfiprintf_r+0xdc>
1a001680:	9a03      	ldr	r2, [sp, #12]
1a001682:	1d11      	adds	r1, r2, #4
1a001684:	6812      	ldr	r2, [r2, #0]
1a001686:	9103      	str	r1, [sp, #12]
1a001688:	2a00      	cmp	r2, #0
1a00168a:	db01      	blt.n	1a001690 <_vfiprintf_r+0x140>
1a00168c:	9207      	str	r2, [sp, #28]
1a00168e:	e004      	b.n	1a00169a <_vfiprintf_r+0x14a>
1a001690:	4252      	negs	r2, r2
1a001692:	f043 0302 	orr.w	r3, r3, #2
1a001696:	9207      	str	r2, [sp, #28]
1a001698:	9304      	str	r3, [sp, #16]
1a00169a:	7823      	ldrb	r3, [r4, #0]
1a00169c:	2b2e      	cmp	r3, #46	; 0x2e
1a00169e:	d10c      	bne.n	1a0016ba <_vfiprintf_r+0x16a>
1a0016a0:	7863      	ldrb	r3, [r4, #1]
1a0016a2:	2b2a      	cmp	r3, #42	; 0x2a
1a0016a4:	d133      	bne.n	1a00170e <_vfiprintf_r+0x1be>
1a0016a6:	9b03      	ldr	r3, [sp, #12]
1a0016a8:	1d1a      	adds	r2, r3, #4
1a0016aa:	681b      	ldr	r3, [r3, #0]
1a0016ac:	9203      	str	r2, [sp, #12]
1a0016ae:	2b00      	cmp	r3, #0
1a0016b0:	bfb8      	it	lt
1a0016b2:	f04f 33ff 	movlt.w	r3, #4294967295
1a0016b6:	3402      	adds	r4, #2
1a0016b8:	9305      	str	r3, [sp, #20]
1a0016ba:	4e35      	ldr	r6, [pc, #212]	; (1a001790 <_vfiprintf_r+0x240>)
1a0016bc:	7821      	ldrb	r1, [r4, #0]
1a0016be:	2203      	movs	r2, #3
1a0016c0:	4630      	mov	r0, r6
1a0016c2:	f000 fc25 	bl	1a001f10 <memchr>
1a0016c6:	b138      	cbz	r0, 1a0016d8 <_vfiprintf_r+0x188>
1a0016c8:	2340      	movs	r3, #64	; 0x40
1a0016ca:	1b80      	subs	r0, r0, r6
1a0016cc:	fa03 f000 	lsl.w	r0, r3, r0
1a0016d0:	9b04      	ldr	r3, [sp, #16]
1a0016d2:	4303      	orrs	r3, r0
1a0016d4:	3401      	adds	r4, #1
1a0016d6:	9304      	str	r3, [sp, #16]
1a0016d8:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0016dc:	482d      	ldr	r0, [pc, #180]	; (1a001794 <_vfiprintf_r+0x244>)
1a0016de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0016e2:	2206      	movs	r2, #6
1a0016e4:	f000 fc14 	bl	1a001f10 <memchr>
1a0016e8:	2800      	cmp	r0, #0
1a0016ea:	d03f      	beq.n	1a00176c <_vfiprintf_r+0x21c>
1a0016ec:	4b2a      	ldr	r3, [pc, #168]	; (1a001798 <_vfiprintf_r+0x248>)
1a0016ee:	bb13      	cbnz	r3, 1a001736 <_vfiprintf_r+0x1e6>
1a0016f0:	9b03      	ldr	r3, [sp, #12]
1a0016f2:	3307      	adds	r3, #7
1a0016f4:	f023 0307 	bic.w	r3, r3, #7
1a0016f8:	3308      	adds	r3, #8
1a0016fa:	9303      	str	r3, [sp, #12]
1a0016fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0016fe:	4443      	add	r3, r8
1a001700:	9309      	str	r3, [sp, #36]	; 0x24
1a001702:	e76e      	b.n	1a0015e2 <_vfiprintf_r+0x92>
1a001704:	fb06 3202 	mla	r2, r6, r2, r3
1a001708:	2001      	movs	r0, #1
1a00170a:	460c      	mov	r4, r1
1a00170c:	e7a8      	b.n	1a001660 <_vfiprintf_r+0x110>
1a00170e:	2300      	movs	r3, #0
1a001710:	3401      	adds	r4, #1
1a001712:	9305      	str	r3, [sp, #20]
1a001714:	4619      	mov	r1, r3
1a001716:	260a      	movs	r6, #10
1a001718:	4620      	mov	r0, r4
1a00171a:	f810 2b01 	ldrb.w	r2, [r0], #1
1a00171e:	3a30      	subs	r2, #48	; 0x30
1a001720:	2a09      	cmp	r2, #9
1a001722:	d903      	bls.n	1a00172c <_vfiprintf_r+0x1dc>
1a001724:	2b00      	cmp	r3, #0
1a001726:	d0c8      	beq.n	1a0016ba <_vfiprintf_r+0x16a>
1a001728:	9105      	str	r1, [sp, #20]
1a00172a:	e7c6      	b.n	1a0016ba <_vfiprintf_r+0x16a>
1a00172c:	fb06 2101 	mla	r1, r6, r1, r2
1a001730:	2301      	movs	r3, #1
1a001732:	4604      	mov	r4, r0
1a001734:	e7f0      	b.n	1a001718 <_vfiprintf_r+0x1c8>
1a001736:	ab03      	add	r3, sp, #12
1a001738:	9300      	str	r3, [sp, #0]
1a00173a:	462a      	mov	r2, r5
1a00173c:	4b17      	ldr	r3, [pc, #92]	; (1a00179c <_vfiprintf_r+0x24c>)
1a00173e:	a904      	add	r1, sp, #16
1a001740:	4638      	mov	r0, r7
1a001742:	f3af 8000 	nop.w
1a001746:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00174a:	4680      	mov	r8, r0
1a00174c:	d1d6      	bne.n	1a0016fc <_vfiprintf_r+0x1ac>
1a00174e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a001750:	07d9      	lsls	r1, r3, #31
1a001752:	d405      	bmi.n	1a001760 <_vfiprintf_r+0x210>
1a001754:	89ab      	ldrh	r3, [r5, #12]
1a001756:	059a      	lsls	r2, r3, #22
1a001758:	d402      	bmi.n	1a001760 <_vfiprintf_r+0x210>
1a00175a:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00175c:	f7ff fe72 	bl	1a001444 <__retarget_lock_release_recursive>
1a001760:	89ab      	ldrh	r3, [r5, #12]
1a001762:	065b      	lsls	r3, r3, #25
1a001764:	f53f af1a 	bmi.w	1a00159c <_vfiprintf_r+0x4c>
1a001768:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00176a:	e719      	b.n	1a0015a0 <_vfiprintf_r+0x50>
1a00176c:	ab03      	add	r3, sp, #12
1a00176e:	9300      	str	r3, [sp, #0]
1a001770:	462a      	mov	r2, r5
1a001772:	4b0a      	ldr	r3, [pc, #40]	; (1a00179c <_vfiprintf_r+0x24c>)
1a001774:	a904      	add	r1, sp, #16
1a001776:	4638      	mov	r0, r7
1a001778:	f000 f888 	bl	1a00188c <_printf_i>
1a00177c:	e7e3      	b.n	1a001746 <_vfiprintf_r+0x1f6>
1a00177e:	bf00      	nop
1a001780:	1a0021e8 	.word	0x1a0021e8
1a001784:	1a002208 	.word	0x1a002208
1a001788:	1a0021c8 	.word	0x1a0021c8
1a00178c:	1a00222c 	.word	0x1a00222c
1a001790:	1a002232 	.word	0x1a002232
1a001794:	1a002236 	.word	0x1a002236
1a001798:	00000000 	.word	0x00000000
1a00179c:	1a00152b 	.word	0x1a00152b

1a0017a0 <_printf_common>:
1a0017a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0017a4:	4691      	mov	r9, r2
1a0017a6:	461f      	mov	r7, r3
1a0017a8:	688a      	ldr	r2, [r1, #8]
1a0017aa:	690b      	ldr	r3, [r1, #16]
1a0017ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0017b0:	4293      	cmp	r3, r2
1a0017b2:	bfb8      	it	lt
1a0017b4:	4613      	movlt	r3, r2
1a0017b6:	f8c9 3000 	str.w	r3, [r9]
1a0017ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0017be:	4606      	mov	r6, r0
1a0017c0:	460c      	mov	r4, r1
1a0017c2:	b112      	cbz	r2, 1a0017ca <_printf_common+0x2a>
1a0017c4:	3301      	adds	r3, #1
1a0017c6:	f8c9 3000 	str.w	r3, [r9]
1a0017ca:	6823      	ldr	r3, [r4, #0]
1a0017cc:	0699      	lsls	r1, r3, #26
1a0017ce:	bf42      	ittt	mi
1a0017d0:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0017d4:	3302      	addmi	r3, #2
1a0017d6:	f8c9 3000 	strmi.w	r3, [r9]
1a0017da:	6825      	ldr	r5, [r4, #0]
1a0017dc:	f015 0506 	ands.w	r5, r5, #6
1a0017e0:	d107      	bne.n	1a0017f2 <_printf_common+0x52>
1a0017e2:	f104 0a19 	add.w	sl, r4, #25
1a0017e6:	68e3      	ldr	r3, [r4, #12]
1a0017e8:	f8d9 2000 	ldr.w	r2, [r9]
1a0017ec:	1a9b      	subs	r3, r3, r2
1a0017ee:	42ab      	cmp	r3, r5
1a0017f0:	dc28      	bgt.n	1a001844 <_printf_common+0xa4>
1a0017f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0017f6:	6822      	ldr	r2, [r4, #0]
1a0017f8:	3300      	adds	r3, #0
1a0017fa:	bf18      	it	ne
1a0017fc:	2301      	movne	r3, #1
1a0017fe:	0692      	lsls	r2, r2, #26
1a001800:	d42d      	bmi.n	1a00185e <_printf_common+0xbe>
1a001802:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a001806:	4639      	mov	r1, r7
1a001808:	4630      	mov	r0, r6
1a00180a:	47c0      	blx	r8
1a00180c:	3001      	adds	r0, #1
1a00180e:	d020      	beq.n	1a001852 <_printf_common+0xb2>
1a001810:	6823      	ldr	r3, [r4, #0]
1a001812:	68e5      	ldr	r5, [r4, #12]
1a001814:	f8d9 2000 	ldr.w	r2, [r9]
1a001818:	f003 0306 	and.w	r3, r3, #6
1a00181c:	2b04      	cmp	r3, #4
1a00181e:	bf08      	it	eq
1a001820:	1aad      	subeq	r5, r5, r2
1a001822:	68a3      	ldr	r3, [r4, #8]
1a001824:	6922      	ldr	r2, [r4, #16]
1a001826:	bf0c      	ite	eq
1a001828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a00182c:	2500      	movne	r5, #0
1a00182e:	4293      	cmp	r3, r2
1a001830:	bfc4      	itt	gt
1a001832:	1a9b      	subgt	r3, r3, r2
1a001834:	18ed      	addgt	r5, r5, r3
1a001836:	f04f 0900 	mov.w	r9, #0
1a00183a:	341a      	adds	r4, #26
1a00183c:	454d      	cmp	r5, r9
1a00183e:	d11a      	bne.n	1a001876 <_printf_common+0xd6>
1a001840:	2000      	movs	r0, #0
1a001842:	e008      	b.n	1a001856 <_printf_common+0xb6>
1a001844:	2301      	movs	r3, #1
1a001846:	4652      	mov	r2, sl
1a001848:	4639      	mov	r1, r7
1a00184a:	4630      	mov	r0, r6
1a00184c:	47c0      	blx	r8
1a00184e:	3001      	adds	r0, #1
1a001850:	d103      	bne.n	1a00185a <_printf_common+0xba>
1a001852:	f04f 30ff 	mov.w	r0, #4294967295
1a001856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00185a:	3501      	adds	r5, #1
1a00185c:	e7c3      	b.n	1a0017e6 <_printf_common+0x46>
1a00185e:	18e1      	adds	r1, r4, r3
1a001860:	1c5a      	adds	r2, r3, #1
1a001862:	2030      	movs	r0, #48	; 0x30
1a001864:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a001868:	4422      	add	r2, r4
1a00186a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00186e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a001872:	3302      	adds	r3, #2
1a001874:	e7c5      	b.n	1a001802 <_printf_common+0x62>
1a001876:	2301      	movs	r3, #1
1a001878:	4622      	mov	r2, r4
1a00187a:	4639      	mov	r1, r7
1a00187c:	4630      	mov	r0, r6
1a00187e:	47c0      	blx	r8
1a001880:	3001      	adds	r0, #1
1a001882:	d0e6      	beq.n	1a001852 <_printf_common+0xb2>
1a001884:	f109 0901 	add.w	r9, r9, #1
1a001888:	e7d8      	b.n	1a00183c <_printf_common+0x9c>
1a00188a:	Address 0x1a00188a is out of bounds.


1a00188c <_printf_i>:
1a00188c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001890:	4606      	mov	r6, r0
1a001892:	460c      	mov	r4, r1
1a001894:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a001898:	7e09      	ldrb	r1, [r1, #24]
1a00189a:	b085      	sub	sp, #20
1a00189c:	296e      	cmp	r1, #110	; 0x6e
1a00189e:	4698      	mov	r8, r3
1a0018a0:	4617      	mov	r7, r2
1a0018a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0018a4:	f000 80ba 	beq.w	1a001a1c <_printf_i+0x190>
1a0018a8:	d824      	bhi.n	1a0018f4 <_printf_i+0x68>
1a0018aa:	2963      	cmp	r1, #99	; 0x63
1a0018ac:	d039      	beq.n	1a001922 <_printf_i+0x96>
1a0018ae:	d80a      	bhi.n	1a0018c6 <_printf_i+0x3a>
1a0018b0:	2900      	cmp	r1, #0
1a0018b2:	f000 80c3 	beq.w	1a001a3c <_printf_i+0x1b0>
1a0018b6:	2958      	cmp	r1, #88	; 0x58
1a0018b8:	f000 8091 	beq.w	1a0019de <_printf_i+0x152>
1a0018bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0018c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0018c4:	e035      	b.n	1a001932 <_printf_i+0xa6>
1a0018c6:	2964      	cmp	r1, #100	; 0x64
1a0018c8:	d001      	beq.n	1a0018ce <_printf_i+0x42>
1a0018ca:	2969      	cmp	r1, #105	; 0x69
1a0018cc:	d1f6      	bne.n	1a0018bc <_printf_i+0x30>
1a0018ce:	6825      	ldr	r5, [r4, #0]
1a0018d0:	681a      	ldr	r2, [r3, #0]
1a0018d2:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0018d6:	f102 0104 	add.w	r1, r2, #4
1a0018da:	d02c      	beq.n	1a001936 <_printf_i+0xaa>
1a0018dc:	6812      	ldr	r2, [r2, #0]
1a0018de:	6019      	str	r1, [r3, #0]
1a0018e0:	2a00      	cmp	r2, #0
1a0018e2:	da03      	bge.n	1a0018ec <_printf_i+0x60>
1a0018e4:	232d      	movs	r3, #45	; 0x2d
1a0018e6:	4252      	negs	r2, r2
1a0018e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0018ec:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a001aac <_printf_i+0x220>
1a0018f0:	230a      	movs	r3, #10
1a0018f2:	e03f      	b.n	1a001974 <_printf_i+0xe8>
1a0018f4:	2973      	cmp	r1, #115	; 0x73
1a0018f6:	f000 80a5 	beq.w	1a001a44 <_printf_i+0x1b8>
1a0018fa:	d808      	bhi.n	1a00190e <_printf_i+0x82>
1a0018fc:	296f      	cmp	r1, #111	; 0x6f
1a0018fe:	d021      	beq.n	1a001944 <_printf_i+0xb8>
1a001900:	2970      	cmp	r1, #112	; 0x70
1a001902:	d1db      	bne.n	1a0018bc <_printf_i+0x30>
1a001904:	6822      	ldr	r2, [r4, #0]
1a001906:	f042 0220 	orr.w	r2, r2, #32
1a00190a:	6022      	str	r2, [r4, #0]
1a00190c:	e003      	b.n	1a001916 <_printf_i+0x8a>
1a00190e:	2975      	cmp	r1, #117	; 0x75
1a001910:	d018      	beq.n	1a001944 <_printf_i+0xb8>
1a001912:	2978      	cmp	r1, #120	; 0x78
1a001914:	d1d2      	bne.n	1a0018bc <_printf_i+0x30>
1a001916:	2278      	movs	r2, #120	; 0x78
1a001918:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a00191c:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a001ab0 <_printf_i+0x224>
1a001920:	e061      	b.n	1a0019e6 <_printf_i+0x15a>
1a001922:	681a      	ldr	r2, [r3, #0]
1a001924:	1d11      	adds	r1, r2, #4
1a001926:	6019      	str	r1, [r3, #0]
1a001928:	6813      	ldr	r3, [r2, #0]
1a00192a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00192e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a001932:	2301      	movs	r3, #1
1a001934:	e093      	b.n	1a001a5e <_printf_i+0x1d2>
1a001936:	6812      	ldr	r2, [r2, #0]
1a001938:	6019      	str	r1, [r3, #0]
1a00193a:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00193e:	bf18      	it	ne
1a001940:	b212      	sxthne	r2, r2
1a001942:	e7cd      	b.n	1a0018e0 <_printf_i+0x54>
1a001944:	f8d4 c000 	ldr.w	ip, [r4]
1a001948:	681a      	ldr	r2, [r3, #0]
1a00194a:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00194e:	f102 0504 	add.w	r5, r2, #4
1a001952:	601d      	str	r5, [r3, #0]
1a001954:	d001      	beq.n	1a00195a <_printf_i+0xce>
1a001956:	6812      	ldr	r2, [r2, #0]
1a001958:	e003      	b.n	1a001962 <_printf_i+0xd6>
1a00195a:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00195e:	d0fa      	beq.n	1a001956 <_printf_i+0xca>
1a001960:	8812      	ldrh	r2, [r2, #0]
1a001962:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a001aac <_printf_i+0x220>
1a001966:	296f      	cmp	r1, #111	; 0x6f
1a001968:	bf0c      	ite	eq
1a00196a:	2308      	moveq	r3, #8
1a00196c:	230a      	movne	r3, #10
1a00196e:	2100      	movs	r1, #0
1a001970:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a001974:	6865      	ldr	r5, [r4, #4]
1a001976:	60a5      	str	r5, [r4, #8]
1a001978:	2d00      	cmp	r5, #0
1a00197a:	bfa2      	ittt	ge
1a00197c:	6821      	ldrge	r1, [r4, #0]
1a00197e:	f021 0104 	bicge.w	r1, r1, #4
1a001982:	6021      	strge	r1, [r4, #0]
1a001984:	b90a      	cbnz	r2, 1a00198a <_printf_i+0xfe>
1a001986:	2d00      	cmp	r5, #0
1a001988:	d046      	beq.n	1a001a18 <_printf_i+0x18c>
1a00198a:	4605      	mov	r5, r0
1a00198c:	fbb2 f1f3 	udiv	r1, r2, r3
1a001990:	fb03 2e11 	mls	lr, r3, r1, r2
1a001994:	4293      	cmp	r3, r2
1a001996:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a00199a:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a00199e:	d939      	bls.n	1a001a14 <_printf_i+0x188>
1a0019a0:	2b08      	cmp	r3, #8
1a0019a2:	d10b      	bne.n	1a0019bc <_printf_i+0x130>
1a0019a4:	6823      	ldr	r3, [r4, #0]
1a0019a6:	07da      	lsls	r2, r3, #31
1a0019a8:	d508      	bpl.n	1a0019bc <_printf_i+0x130>
1a0019aa:	6923      	ldr	r3, [r4, #16]
1a0019ac:	6862      	ldr	r2, [r4, #4]
1a0019ae:	429a      	cmp	r2, r3
1a0019b0:	bfde      	ittt	le
1a0019b2:	2330      	movle	r3, #48	; 0x30
1a0019b4:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0019b8:	f105 35ff 	addle.w	r5, r5, #4294967295
1a0019bc:	1b40      	subs	r0, r0, r5
1a0019be:	6120      	str	r0, [r4, #16]
1a0019c0:	f8cd 8000 	str.w	r8, [sp]
1a0019c4:	463b      	mov	r3, r7
1a0019c6:	aa03      	add	r2, sp, #12
1a0019c8:	4621      	mov	r1, r4
1a0019ca:	4630      	mov	r0, r6
1a0019cc:	f7ff fee8 	bl	1a0017a0 <_printf_common>
1a0019d0:	3001      	adds	r0, #1
1a0019d2:	d149      	bne.n	1a001a68 <_printf_i+0x1dc>
1a0019d4:	f04f 30ff 	mov.w	r0, #4294967295
1a0019d8:	b005      	add	sp, #20
1a0019da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0019de:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a001aac <_printf_i+0x220>
1a0019e2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0019e6:	681d      	ldr	r5, [r3, #0]
1a0019e8:	6821      	ldr	r1, [r4, #0]
1a0019ea:	f855 2b04 	ldr.w	r2, [r5], #4
1a0019ee:	601d      	str	r5, [r3, #0]
1a0019f0:	060d      	lsls	r5, r1, #24
1a0019f2:	d50b      	bpl.n	1a001a0c <_printf_i+0x180>
1a0019f4:	07cd      	lsls	r5, r1, #31
1a0019f6:	bf44      	itt	mi
1a0019f8:	f041 0120 	orrmi.w	r1, r1, #32
1a0019fc:	6021      	strmi	r1, [r4, #0]
1a0019fe:	b91a      	cbnz	r2, 1a001a08 <_printf_i+0x17c>
1a001a00:	6823      	ldr	r3, [r4, #0]
1a001a02:	f023 0320 	bic.w	r3, r3, #32
1a001a06:	6023      	str	r3, [r4, #0]
1a001a08:	2310      	movs	r3, #16
1a001a0a:	e7b0      	b.n	1a00196e <_printf_i+0xe2>
1a001a0c:	064b      	lsls	r3, r1, #25
1a001a0e:	bf48      	it	mi
1a001a10:	b292      	uxthmi	r2, r2
1a001a12:	e7ef      	b.n	1a0019f4 <_printf_i+0x168>
1a001a14:	460a      	mov	r2, r1
1a001a16:	e7b9      	b.n	1a00198c <_printf_i+0x100>
1a001a18:	4605      	mov	r5, r0
1a001a1a:	e7c1      	b.n	1a0019a0 <_printf_i+0x114>
1a001a1c:	681a      	ldr	r2, [r3, #0]
1a001a1e:	f8d4 c000 	ldr.w	ip, [r4]
1a001a22:	6961      	ldr	r1, [r4, #20]
1a001a24:	1d15      	adds	r5, r2, #4
1a001a26:	601d      	str	r5, [r3, #0]
1a001a28:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a001a2c:	6813      	ldr	r3, [r2, #0]
1a001a2e:	d001      	beq.n	1a001a34 <_printf_i+0x1a8>
1a001a30:	6019      	str	r1, [r3, #0]
1a001a32:	e003      	b.n	1a001a3c <_printf_i+0x1b0>
1a001a34:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a001a38:	d0fa      	beq.n	1a001a30 <_printf_i+0x1a4>
1a001a3a:	8019      	strh	r1, [r3, #0]
1a001a3c:	2300      	movs	r3, #0
1a001a3e:	6123      	str	r3, [r4, #16]
1a001a40:	4605      	mov	r5, r0
1a001a42:	e7bd      	b.n	1a0019c0 <_printf_i+0x134>
1a001a44:	681a      	ldr	r2, [r3, #0]
1a001a46:	1d11      	adds	r1, r2, #4
1a001a48:	6019      	str	r1, [r3, #0]
1a001a4a:	6815      	ldr	r5, [r2, #0]
1a001a4c:	6862      	ldr	r2, [r4, #4]
1a001a4e:	2100      	movs	r1, #0
1a001a50:	4628      	mov	r0, r5
1a001a52:	f000 fa5d 	bl	1a001f10 <memchr>
1a001a56:	b108      	cbz	r0, 1a001a5c <_printf_i+0x1d0>
1a001a58:	1b40      	subs	r0, r0, r5
1a001a5a:	6060      	str	r0, [r4, #4]
1a001a5c:	6863      	ldr	r3, [r4, #4]
1a001a5e:	6123      	str	r3, [r4, #16]
1a001a60:	2300      	movs	r3, #0
1a001a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a001a66:	e7ab      	b.n	1a0019c0 <_printf_i+0x134>
1a001a68:	6923      	ldr	r3, [r4, #16]
1a001a6a:	462a      	mov	r2, r5
1a001a6c:	4639      	mov	r1, r7
1a001a6e:	4630      	mov	r0, r6
1a001a70:	47c0      	blx	r8
1a001a72:	3001      	adds	r0, #1
1a001a74:	d0ae      	beq.n	1a0019d4 <_printf_i+0x148>
1a001a76:	6823      	ldr	r3, [r4, #0]
1a001a78:	079b      	lsls	r3, r3, #30
1a001a7a:	d413      	bmi.n	1a001aa4 <_printf_i+0x218>
1a001a7c:	68e0      	ldr	r0, [r4, #12]
1a001a7e:	9b03      	ldr	r3, [sp, #12]
1a001a80:	4298      	cmp	r0, r3
1a001a82:	bfb8      	it	lt
1a001a84:	4618      	movlt	r0, r3
1a001a86:	e7a7      	b.n	1a0019d8 <_printf_i+0x14c>
1a001a88:	2301      	movs	r3, #1
1a001a8a:	464a      	mov	r2, r9
1a001a8c:	4639      	mov	r1, r7
1a001a8e:	4630      	mov	r0, r6
1a001a90:	47c0      	blx	r8
1a001a92:	3001      	adds	r0, #1
1a001a94:	d09e      	beq.n	1a0019d4 <_printf_i+0x148>
1a001a96:	3501      	adds	r5, #1
1a001a98:	68e3      	ldr	r3, [r4, #12]
1a001a9a:	9a03      	ldr	r2, [sp, #12]
1a001a9c:	1a9b      	subs	r3, r3, r2
1a001a9e:	42ab      	cmp	r3, r5
1a001aa0:	dcf2      	bgt.n	1a001a88 <_printf_i+0x1fc>
1a001aa2:	e7eb      	b.n	1a001a7c <_printf_i+0x1f0>
1a001aa4:	2500      	movs	r5, #0
1a001aa6:	f104 0919 	add.w	r9, r4, #25
1a001aaa:	e7f5      	b.n	1a001a98 <_printf_i+0x20c>
1a001aac:	1a00223d 	.word	0x1a00223d
1a001ab0:	1a00224e 	.word	0x1a00224e

1a001ab4 <__sread>:
1a001ab4:	b510      	push	{r4, lr}
1a001ab6:	460c      	mov	r4, r1
1a001ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001abc:	f7ff f8ba 	bl	1a000c34 <_read_r>
1a001ac0:	2800      	cmp	r0, #0
1a001ac2:	bfab      	itete	ge
1a001ac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a001ac6:	89a3      	ldrhlt	r3, [r4, #12]
1a001ac8:	181b      	addge	r3, r3, r0
1a001aca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a001ace:	bfac      	ite	ge
1a001ad0:	6563      	strge	r3, [r4, #84]	; 0x54
1a001ad2:	81a3      	strhlt	r3, [r4, #12]
1a001ad4:	bd10      	pop	{r4, pc}

1a001ad6 <__swrite>:
1a001ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001ada:	461f      	mov	r7, r3
1a001adc:	898b      	ldrh	r3, [r1, #12]
1a001ade:	05db      	lsls	r3, r3, #23
1a001ae0:	4605      	mov	r5, r0
1a001ae2:	460c      	mov	r4, r1
1a001ae4:	4616      	mov	r6, r2
1a001ae6:	d505      	bpl.n	1a001af4 <__swrite+0x1e>
1a001ae8:	2302      	movs	r3, #2
1a001aea:	2200      	movs	r2, #0
1a001aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001af0:	f7ff f89b 	bl	1a000c2a <_lseek_r>
1a001af4:	89a3      	ldrh	r3, [r4, #12]
1a001af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a001afa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a001afe:	81a3      	strh	r3, [r4, #12]
1a001b00:	4632      	mov	r2, r6
1a001b02:	463b      	mov	r3, r7
1a001b04:	4628      	mov	r0, r5
1a001b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a001b0a:	f7ff b8b7 	b.w	1a000c7c <_write_r>

1a001b0e <__sseek>:
1a001b0e:	b510      	push	{r4, lr}
1a001b10:	460c      	mov	r4, r1
1a001b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001b16:	f7ff f888 	bl	1a000c2a <_lseek_r>
1a001b1a:	1c43      	adds	r3, r0, #1
1a001b1c:	89a3      	ldrh	r3, [r4, #12]
1a001b1e:	bf15      	itete	ne
1a001b20:	6560      	strne	r0, [r4, #84]	; 0x54
1a001b22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a001b26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a001b2a:	81a3      	strheq	r3, [r4, #12]
1a001b2c:	bf18      	it	ne
1a001b2e:	81a3      	strhne	r3, [r4, #12]
1a001b30:	bd10      	pop	{r4, pc}

1a001b32 <__sclose>:
1a001b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001b36:	f7ff b865 	b.w	1a000c04 <_close_r>
1a001b3a:	Address 0x1a001b3a is out of bounds.


1a001b3c <__swbuf_r>:
1a001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001b3e:	460e      	mov	r6, r1
1a001b40:	4614      	mov	r4, r2
1a001b42:	4605      	mov	r5, r0
1a001b44:	b118      	cbz	r0, 1a001b4e <__swbuf_r+0x12>
1a001b46:	6983      	ldr	r3, [r0, #24]
1a001b48:	b90b      	cbnz	r3, 1a001b4e <__swbuf_r+0x12>
1a001b4a:	f7ff fbdd 	bl	1a001308 <__sinit>
1a001b4e:	4b21      	ldr	r3, [pc, #132]	; (1a001bd4 <__swbuf_r+0x98>)
1a001b50:	429c      	cmp	r4, r3
1a001b52:	d12b      	bne.n	1a001bac <__swbuf_r+0x70>
1a001b54:	686c      	ldr	r4, [r5, #4]
1a001b56:	69a3      	ldr	r3, [r4, #24]
1a001b58:	60a3      	str	r3, [r4, #8]
1a001b5a:	89a3      	ldrh	r3, [r4, #12]
1a001b5c:	071a      	lsls	r2, r3, #28
1a001b5e:	d52f      	bpl.n	1a001bc0 <__swbuf_r+0x84>
1a001b60:	6923      	ldr	r3, [r4, #16]
1a001b62:	b36b      	cbz	r3, 1a001bc0 <__swbuf_r+0x84>
1a001b64:	6923      	ldr	r3, [r4, #16]
1a001b66:	6820      	ldr	r0, [r4, #0]
1a001b68:	1ac0      	subs	r0, r0, r3
1a001b6a:	6963      	ldr	r3, [r4, #20]
1a001b6c:	b2f6      	uxtb	r6, r6
1a001b6e:	4283      	cmp	r3, r0
1a001b70:	4637      	mov	r7, r6
1a001b72:	dc04      	bgt.n	1a001b7e <__swbuf_r+0x42>
1a001b74:	4621      	mov	r1, r4
1a001b76:	4628      	mov	r0, r5
1a001b78:	f000 f926 	bl	1a001dc8 <_fflush_r>
1a001b7c:	bb30      	cbnz	r0, 1a001bcc <__swbuf_r+0x90>
1a001b7e:	68a3      	ldr	r3, [r4, #8]
1a001b80:	3b01      	subs	r3, #1
1a001b82:	60a3      	str	r3, [r4, #8]
1a001b84:	6823      	ldr	r3, [r4, #0]
1a001b86:	1c5a      	adds	r2, r3, #1
1a001b88:	6022      	str	r2, [r4, #0]
1a001b8a:	701e      	strb	r6, [r3, #0]
1a001b8c:	6963      	ldr	r3, [r4, #20]
1a001b8e:	3001      	adds	r0, #1
1a001b90:	4283      	cmp	r3, r0
1a001b92:	d004      	beq.n	1a001b9e <__swbuf_r+0x62>
1a001b94:	89a3      	ldrh	r3, [r4, #12]
1a001b96:	07db      	lsls	r3, r3, #31
1a001b98:	d506      	bpl.n	1a001ba8 <__swbuf_r+0x6c>
1a001b9a:	2e0a      	cmp	r6, #10
1a001b9c:	d104      	bne.n	1a001ba8 <__swbuf_r+0x6c>
1a001b9e:	4621      	mov	r1, r4
1a001ba0:	4628      	mov	r0, r5
1a001ba2:	f000 f911 	bl	1a001dc8 <_fflush_r>
1a001ba6:	b988      	cbnz	r0, 1a001bcc <__swbuf_r+0x90>
1a001ba8:	4638      	mov	r0, r7
1a001baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001bac:	4b0a      	ldr	r3, [pc, #40]	; (1a001bd8 <__swbuf_r+0x9c>)
1a001bae:	429c      	cmp	r4, r3
1a001bb0:	d101      	bne.n	1a001bb6 <__swbuf_r+0x7a>
1a001bb2:	68ac      	ldr	r4, [r5, #8]
1a001bb4:	e7cf      	b.n	1a001b56 <__swbuf_r+0x1a>
1a001bb6:	4b09      	ldr	r3, [pc, #36]	; (1a001bdc <__swbuf_r+0xa0>)
1a001bb8:	429c      	cmp	r4, r3
1a001bba:	bf08      	it	eq
1a001bbc:	68ec      	ldreq	r4, [r5, #12]
1a001bbe:	e7ca      	b.n	1a001b56 <__swbuf_r+0x1a>
1a001bc0:	4621      	mov	r1, r4
1a001bc2:	4628      	mov	r0, r5
1a001bc4:	f000 f80c 	bl	1a001be0 <__swsetup_r>
1a001bc8:	2800      	cmp	r0, #0
1a001bca:	d0cb      	beq.n	1a001b64 <__swbuf_r+0x28>
1a001bcc:	f04f 37ff 	mov.w	r7, #4294967295
1a001bd0:	e7ea      	b.n	1a001ba8 <__swbuf_r+0x6c>
1a001bd2:	bf00      	nop
1a001bd4:	1a0021e8 	.word	0x1a0021e8
1a001bd8:	1a002208 	.word	0x1a002208
1a001bdc:	1a0021c8 	.word	0x1a0021c8

1a001be0 <__swsetup_r>:
1a001be0:	4b32      	ldr	r3, [pc, #200]	; (1a001cac <__swsetup_r+0xcc>)
1a001be2:	b570      	push	{r4, r5, r6, lr}
1a001be4:	681d      	ldr	r5, [r3, #0]
1a001be6:	4606      	mov	r6, r0
1a001be8:	460c      	mov	r4, r1
1a001bea:	b125      	cbz	r5, 1a001bf6 <__swsetup_r+0x16>
1a001bec:	69ab      	ldr	r3, [r5, #24]
1a001bee:	b913      	cbnz	r3, 1a001bf6 <__swsetup_r+0x16>
1a001bf0:	4628      	mov	r0, r5
1a001bf2:	f7ff fb89 	bl	1a001308 <__sinit>
1a001bf6:	4b2e      	ldr	r3, [pc, #184]	; (1a001cb0 <__swsetup_r+0xd0>)
1a001bf8:	429c      	cmp	r4, r3
1a001bfa:	d10f      	bne.n	1a001c1c <__swsetup_r+0x3c>
1a001bfc:	686c      	ldr	r4, [r5, #4]
1a001bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001c02:	b29a      	uxth	r2, r3
1a001c04:	0715      	lsls	r5, r2, #28
1a001c06:	d42c      	bmi.n	1a001c62 <__swsetup_r+0x82>
1a001c08:	06d0      	lsls	r0, r2, #27
1a001c0a:	d411      	bmi.n	1a001c30 <__swsetup_r+0x50>
1a001c0c:	2209      	movs	r2, #9
1a001c0e:	6032      	str	r2, [r6, #0]
1a001c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001c14:	81a3      	strh	r3, [r4, #12]
1a001c16:	f04f 30ff 	mov.w	r0, #4294967295
1a001c1a:	e03e      	b.n	1a001c9a <__swsetup_r+0xba>
1a001c1c:	4b25      	ldr	r3, [pc, #148]	; (1a001cb4 <__swsetup_r+0xd4>)
1a001c1e:	429c      	cmp	r4, r3
1a001c20:	d101      	bne.n	1a001c26 <__swsetup_r+0x46>
1a001c22:	68ac      	ldr	r4, [r5, #8]
1a001c24:	e7eb      	b.n	1a001bfe <__swsetup_r+0x1e>
1a001c26:	4b24      	ldr	r3, [pc, #144]	; (1a001cb8 <__swsetup_r+0xd8>)
1a001c28:	429c      	cmp	r4, r3
1a001c2a:	bf08      	it	eq
1a001c2c:	68ec      	ldreq	r4, [r5, #12]
1a001c2e:	e7e6      	b.n	1a001bfe <__swsetup_r+0x1e>
1a001c30:	0751      	lsls	r1, r2, #29
1a001c32:	d512      	bpl.n	1a001c5a <__swsetup_r+0x7a>
1a001c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001c36:	b141      	cbz	r1, 1a001c4a <__swsetup_r+0x6a>
1a001c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a001c3c:	4299      	cmp	r1, r3
1a001c3e:	d002      	beq.n	1a001c46 <__swsetup_r+0x66>
1a001c40:	4630      	mov	r0, r6
1a001c42:	f000 f9c1 	bl	1a001fc8 <_free_r>
1a001c46:	2300      	movs	r3, #0
1a001c48:	6363      	str	r3, [r4, #52]	; 0x34
1a001c4a:	89a3      	ldrh	r3, [r4, #12]
1a001c4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a001c50:	81a3      	strh	r3, [r4, #12]
1a001c52:	2300      	movs	r3, #0
1a001c54:	6063      	str	r3, [r4, #4]
1a001c56:	6923      	ldr	r3, [r4, #16]
1a001c58:	6023      	str	r3, [r4, #0]
1a001c5a:	89a3      	ldrh	r3, [r4, #12]
1a001c5c:	f043 0308 	orr.w	r3, r3, #8
1a001c60:	81a3      	strh	r3, [r4, #12]
1a001c62:	6923      	ldr	r3, [r4, #16]
1a001c64:	b94b      	cbnz	r3, 1a001c7a <__swsetup_r+0x9a>
1a001c66:	89a3      	ldrh	r3, [r4, #12]
1a001c68:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a001c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a001c70:	d003      	beq.n	1a001c7a <__swsetup_r+0x9a>
1a001c72:	4621      	mov	r1, r4
1a001c74:	4630      	mov	r0, r6
1a001c76:	f000 f907 	bl	1a001e88 <__smakebuf_r>
1a001c7a:	89a2      	ldrh	r2, [r4, #12]
1a001c7c:	f012 0301 	ands.w	r3, r2, #1
1a001c80:	d00c      	beq.n	1a001c9c <__swsetup_r+0xbc>
1a001c82:	2300      	movs	r3, #0
1a001c84:	60a3      	str	r3, [r4, #8]
1a001c86:	6963      	ldr	r3, [r4, #20]
1a001c88:	425b      	negs	r3, r3
1a001c8a:	61a3      	str	r3, [r4, #24]
1a001c8c:	6923      	ldr	r3, [r4, #16]
1a001c8e:	b953      	cbnz	r3, 1a001ca6 <__swsetup_r+0xc6>
1a001c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001c94:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a001c98:	d1ba      	bne.n	1a001c10 <__swsetup_r+0x30>
1a001c9a:	bd70      	pop	{r4, r5, r6, pc}
1a001c9c:	0792      	lsls	r2, r2, #30
1a001c9e:	bf58      	it	pl
1a001ca0:	6963      	ldrpl	r3, [r4, #20]
1a001ca2:	60a3      	str	r3, [r4, #8]
1a001ca4:	e7f2      	b.n	1a001c8c <__swsetup_r+0xac>
1a001ca6:	2000      	movs	r0, #0
1a001ca8:	e7f7      	b.n	1a001c9a <__swsetup_r+0xba>
1a001caa:	bf00      	nop
1a001cac:	10000000 	.word	0x10000000
1a001cb0:	1a0021e8 	.word	0x1a0021e8
1a001cb4:	1a002208 	.word	0x1a002208
1a001cb8:	1a0021c8 	.word	0x1a0021c8

1a001cbc <__sflush_r>:
1a001cbc:	898a      	ldrh	r2, [r1, #12]
1a001cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001cc2:	4605      	mov	r5, r0
1a001cc4:	0710      	lsls	r0, r2, #28
1a001cc6:	460c      	mov	r4, r1
1a001cc8:	d458      	bmi.n	1a001d7c <__sflush_r+0xc0>
1a001cca:	684b      	ldr	r3, [r1, #4]
1a001ccc:	2b00      	cmp	r3, #0
1a001cce:	dc05      	bgt.n	1a001cdc <__sflush_r+0x20>
1a001cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a001cd2:	2b00      	cmp	r3, #0
1a001cd4:	dc02      	bgt.n	1a001cdc <__sflush_r+0x20>
1a001cd6:	2000      	movs	r0, #0
1a001cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a001cde:	2e00      	cmp	r6, #0
1a001ce0:	d0f9      	beq.n	1a001cd6 <__sflush_r+0x1a>
1a001ce2:	2300      	movs	r3, #0
1a001ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a001ce8:	682f      	ldr	r7, [r5, #0]
1a001cea:	602b      	str	r3, [r5, #0]
1a001cec:	d032      	beq.n	1a001d54 <__sflush_r+0x98>
1a001cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a001cf0:	89a3      	ldrh	r3, [r4, #12]
1a001cf2:	075a      	lsls	r2, r3, #29
1a001cf4:	d505      	bpl.n	1a001d02 <__sflush_r+0x46>
1a001cf6:	6863      	ldr	r3, [r4, #4]
1a001cf8:	1ac0      	subs	r0, r0, r3
1a001cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a001cfc:	b10b      	cbz	r3, 1a001d02 <__sflush_r+0x46>
1a001cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001d00:	1ac0      	subs	r0, r0, r3
1a001d02:	2300      	movs	r3, #0
1a001d04:	4602      	mov	r2, r0
1a001d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a001d08:	6a21      	ldr	r1, [r4, #32]
1a001d0a:	4628      	mov	r0, r5
1a001d0c:	47b0      	blx	r6
1a001d0e:	1c43      	adds	r3, r0, #1
1a001d10:	89a3      	ldrh	r3, [r4, #12]
1a001d12:	d106      	bne.n	1a001d22 <__sflush_r+0x66>
1a001d14:	6829      	ldr	r1, [r5, #0]
1a001d16:	291d      	cmp	r1, #29
1a001d18:	d849      	bhi.n	1a001dae <__sflush_r+0xf2>
1a001d1a:	4a2a      	ldr	r2, [pc, #168]	; (1a001dc4 <__sflush_r+0x108>)
1a001d1c:	40ca      	lsrs	r2, r1
1a001d1e:	07d6      	lsls	r6, r2, #31
1a001d20:	d545      	bpl.n	1a001dae <__sflush_r+0xf2>
1a001d22:	2200      	movs	r2, #0
1a001d24:	6062      	str	r2, [r4, #4]
1a001d26:	04d9      	lsls	r1, r3, #19
1a001d28:	6922      	ldr	r2, [r4, #16]
1a001d2a:	6022      	str	r2, [r4, #0]
1a001d2c:	d504      	bpl.n	1a001d38 <__sflush_r+0x7c>
1a001d2e:	1c42      	adds	r2, r0, #1
1a001d30:	d101      	bne.n	1a001d36 <__sflush_r+0x7a>
1a001d32:	682b      	ldr	r3, [r5, #0]
1a001d34:	b903      	cbnz	r3, 1a001d38 <__sflush_r+0x7c>
1a001d36:	6560      	str	r0, [r4, #84]	; 0x54
1a001d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001d3a:	602f      	str	r7, [r5, #0]
1a001d3c:	2900      	cmp	r1, #0
1a001d3e:	d0ca      	beq.n	1a001cd6 <__sflush_r+0x1a>
1a001d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a001d44:	4299      	cmp	r1, r3
1a001d46:	d002      	beq.n	1a001d4e <__sflush_r+0x92>
1a001d48:	4628      	mov	r0, r5
1a001d4a:	f000 f93d 	bl	1a001fc8 <_free_r>
1a001d4e:	2000      	movs	r0, #0
1a001d50:	6360      	str	r0, [r4, #52]	; 0x34
1a001d52:	e7c1      	b.n	1a001cd8 <__sflush_r+0x1c>
1a001d54:	6a21      	ldr	r1, [r4, #32]
1a001d56:	2301      	movs	r3, #1
1a001d58:	4628      	mov	r0, r5
1a001d5a:	47b0      	blx	r6
1a001d5c:	1c41      	adds	r1, r0, #1
1a001d5e:	d1c7      	bne.n	1a001cf0 <__sflush_r+0x34>
1a001d60:	682b      	ldr	r3, [r5, #0]
1a001d62:	2b00      	cmp	r3, #0
1a001d64:	d0c4      	beq.n	1a001cf0 <__sflush_r+0x34>
1a001d66:	2b1d      	cmp	r3, #29
1a001d68:	d001      	beq.n	1a001d6e <__sflush_r+0xb2>
1a001d6a:	2b16      	cmp	r3, #22
1a001d6c:	d101      	bne.n	1a001d72 <__sflush_r+0xb6>
1a001d6e:	602f      	str	r7, [r5, #0]
1a001d70:	e7b1      	b.n	1a001cd6 <__sflush_r+0x1a>
1a001d72:	89a3      	ldrh	r3, [r4, #12]
1a001d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001d78:	81a3      	strh	r3, [r4, #12]
1a001d7a:	e7ad      	b.n	1a001cd8 <__sflush_r+0x1c>
1a001d7c:	690f      	ldr	r7, [r1, #16]
1a001d7e:	2f00      	cmp	r7, #0
1a001d80:	d0a9      	beq.n	1a001cd6 <__sflush_r+0x1a>
1a001d82:	0793      	lsls	r3, r2, #30
1a001d84:	680e      	ldr	r6, [r1, #0]
1a001d86:	bf08      	it	eq
1a001d88:	694b      	ldreq	r3, [r1, #20]
1a001d8a:	600f      	str	r7, [r1, #0]
1a001d8c:	bf18      	it	ne
1a001d8e:	2300      	movne	r3, #0
1a001d90:	eba6 0807 	sub.w	r8, r6, r7
1a001d94:	608b      	str	r3, [r1, #8]
1a001d96:	f1b8 0f00 	cmp.w	r8, #0
1a001d9a:	dd9c      	ble.n	1a001cd6 <__sflush_r+0x1a>
1a001d9c:	4643      	mov	r3, r8
1a001d9e:	463a      	mov	r2, r7
1a001da0:	6a21      	ldr	r1, [r4, #32]
1a001da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a001da4:	4628      	mov	r0, r5
1a001da6:	47b0      	blx	r6
1a001da8:	2800      	cmp	r0, #0
1a001daa:	dc06      	bgt.n	1a001dba <__sflush_r+0xfe>
1a001dac:	89a3      	ldrh	r3, [r4, #12]
1a001dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001db2:	81a3      	strh	r3, [r4, #12]
1a001db4:	f04f 30ff 	mov.w	r0, #4294967295
1a001db8:	e78e      	b.n	1a001cd8 <__sflush_r+0x1c>
1a001dba:	4407      	add	r7, r0
1a001dbc:	eba8 0800 	sub.w	r8, r8, r0
1a001dc0:	e7e9      	b.n	1a001d96 <__sflush_r+0xda>
1a001dc2:	bf00      	nop
1a001dc4:	20400001 	.word	0x20400001

1a001dc8 <_fflush_r>:
1a001dc8:	b538      	push	{r3, r4, r5, lr}
1a001dca:	690b      	ldr	r3, [r1, #16]
1a001dcc:	4605      	mov	r5, r0
1a001dce:	460c      	mov	r4, r1
1a001dd0:	b913      	cbnz	r3, 1a001dd8 <_fflush_r+0x10>
1a001dd2:	2500      	movs	r5, #0
1a001dd4:	4628      	mov	r0, r5
1a001dd6:	bd38      	pop	{r3, r4, r5, pc}
1a001dd8:	b118      	cbz	r0, 1a001de2 <_fflush_r+0x1a>
1a001dda:	6983      	ldr	r3, [r0, #24]
1a001ddc:	b90b      	cbnz	r3, 1a001de2 <_fflush_r+0x1a>
1a001dde:	f7ff fa93 	bl	1a001308 <__sinit>
1a001de2:	4b14      	ldr	r3, [pc, #80]	; (1a001e34 <_fflush_r+0x6c>)
1a001de4:	429c      	cmp	r4, r3
1a001de6:	d11b      	bne.n	1a001e20 <_fflush_r+0x58>
1a001de8:	686c      	ldr	r4, [r5, #4]
1a001dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001dee:	2b00      	cmp	r3, #0
1a001df0:	d0ef      	beq.n	1a001dd2 <_fflush_r+0xa>
1a001df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a001df4:	07d0      	lsls	r0, r2, #31
1a001df6:	d404      	bmi.n	1a001e02 <_fflush_r+0x3a>
1a001df8:	0599      	lsls	r1, r3, #22
1a001dfa:	d402      	bmi.n	1a001e02 <_fflush_r+0x3a>
1a001dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001dfe:	f7ff fb20 	bl	1a001442 <__retarget_lock_acquire_recursive>
1a001e02:	4628      	mov	r0, r5
1a001e04:	4621      	mov	r1, r4
1a001e06:	f7ff ff59 	bl	1a001cbc <__sflush_r>
1a001e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a001e0c:	07da      	lsls	r2, r3, #31
1a001e0e:	4605      	mov	r5, r0
1a001e10:	d4e0      	bmi.n	1a001dd4 <_fflush_r+0xc>
1a001e12:	89a3      	ldrh	r3, [r4, #12]
1a001e14:	059b      	lsls	r3, r3, #22
1a001e16:	d4dd      	bmi.n	1a001dd4 <_fflush_r+0xc>
1a001e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001e1a:	f7ff fb13 	bl	1a001444 <__retarget_lock_release_recursive>
1a001e1e:	e7d9      	b.n	1a001dd4 <_fflush_r+0xc>
1a001e20:	4b05      	ldr	r3, [pc, #20]	; (1a001e38 <_fflush_r+0x70>)
1a001e22:	429c      	cmp	r4, r3
1a001e24:	d101      	bne.n	1a001e2a <_fflush_r+0x62>
1a001e26:	68ac      	ldr	r4, [r5, #8]
1a001e28:	e7df      	b.n	1a001dea <_fflush_r+0x22>
1a001e2a:	4b04      	ldr	r3, [pc, #16]	; (1a001e3c <_fflush_r+0x74>)
1a001e2c:	429c      	cmp	r4, r3
1a001e2e:	bf08      	it	eq
1a001e30:	68ec      	ldreq	r4, [r5, #12]
1a001e32:	e7da      	b.n	1a001dea <_fflush_r+0x22>
1a001e34:	1a0021e8 	.word	0x1a0021e8
1a001e38:	1a002208 	.word	0x1a002208
1a001e3c:	1a0021c8 	.word	0x1a0021c8

1a001e40 <__swhatbuf_r>:
1a001e40:	b570      	push	{r4, r5, r6, lr}
1a001e42:	460e      	mov	r6, r1
1a001e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a001e48:	2900      	cmp	r1, #0
1a001e4a:	b096      	sub	sp, #88	; 0x58
1a001e4c:	4614      	mov	r4, r2
1a001e4e:	461d      	mov	r5, r3
1a001e50:	da07      	bge.n	1a001e62 <__swhatbuf_r+0x22>
1a001e52:	2300      	movs	r3, #0
1a001e54:	602b      	str	r3, [r5, #0]
1a001e56:	89b3      	ldrh	r3, [r6, #12]
1a001e58:	061a      	lsls	r2, r3, #24
1a001e5a:	d410      	bmi.n	1a001e7e <__swhatbuf_r+0x3e>
1a001e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a001e60:	e00e      	b.n	1a001e80 <__swhatbuf_r+0x40>
1a001e62:	466a      	mov	r2, sp
1a001e64:	f7fe fed3 	bl	1a000c0e <_fstat_r>
1a001e68:	2800      	cmp	r0, #0
1a001e6a:	dbf2      	blt.n	1a001e52 <__swhatbuf_r+0x12>
1a001e6c:	9a01      	ldr	r2, [sp, #4]
1a001e6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a001e72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a001e76:	425a      	negs	r2, r3
1a001e78:	415a      	adcs	r2, r3
1a001e7a:	602a      	str	r2, [r5, #0]
1a001e7c:	e7ee      	b.n	1a001e5c <__swhatbuf_r+0x1c>
1a001e7e:	2340      	movs	r3, #64	; 0x40
1a001e80:	2000      	movs	r0, #0
1a001e82:	6023      	str	r3, [r4, #0]
1a001e84:	b016      	add	sp, #88	; 0x58
1a001e86:	bd70      	pop	{r4, r5, r6, pc}

1a001e88 <__smakebuf_r>:
1a001e88:	898b      	ldrh	r3, [r1, #12]
1a001e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a001e8c:	079d      	lsls	r5, r3, #30
1a001e8e:	4606      	mov	r6, r0
1a001e90:	460c      	mov	r4, r1
1a001e92:	d507      	bpl.n	1a001ea4 <__smakebuf_r+0x1c>
1a001e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a001e98:	6023      	str	r3, [r4, #0]
1a001e9a:	6123      	str	r3, [r4, #16]
1a001e9c:	2301      	movs	r3, #1
1a001e9e:	6163      	str	r3, [r4, #20]
1a001ea0:	b002      	add	sp, #8
1a001ea2:	bd70      	pop	{r4, r5, r6, pc}
1a001ea4:	ab01      	add	r3, sp, #4
1a001ea6:	466a      	mov	r2, sp
1a001ea8:	f7ff ffca 	bl	1a001e40 <__swhatbuf_r>
1a001eac:	9900      	ldr	r1, [sp, #0]
1a001eae:	4605      	mov	r5, r0
1a001eb0:	4630      	mov	r0, r6
1a001eb2:	f7ff fac9 	bl	1a001448 <_malloc_r>
1a001eb6:	b948      	cbnz	r0, 1a001ecc <__smakebuf_r+0x44>
1a001eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001ebc:	059a      	lsls	r2, r3, #22
1a001ebe:	d4ef      	bmi.n	1a001ea0 <__smakebuf_r+0x18>
1a001ec0:	f023 0303 	bic.w	r3, r3, #3
1a001ec4:	f043 0302 	orr.w	r3, r3, #2
1a001ec8:	81a3      	strh	r3, [r4, #12]
1a001eca:	e7e3      	b.n	1a001e94 <__smakebuf_r+0xc>
1a001ecc:	4b0d      	ldr	r3, [pc, #52]	; (1a001f04 <__smakebuf_r+0x7c>)
1a001ece:	62b3      	str	r3, [r6, #40]	; 0x28
1a001ed0:	89a3      	ldrh	r3, [r4, #12]
1a001ed2:	6020      	str	r0, [r4, #0]
1a001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001ed8:	81a3      	strh	r3, [r4, #12]
1a001eda:	9b00      	ldr	r3, [sp, #0]
1a001edc:	6163      	str	r3, [r4, #20]
1a001ede:	9b01      	ldr	r3, [sp, #4]
1a001ee0:	6120      	str	r0, [r4, #16]
1a001ee2:	b15b      	cbz	r3, 1a001efc <__smakebuf_r+0x74>
1a001ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a001ee8:	4630      	mov	r0, r6
1a001eea:	f7fe fe95 	bl	1a000c18 <_isatty_r>
1a001eee:	b128      	cbz	r0, 1a001efc <__smakebuf_r+0x74>
1a001ef0:	89a3      	ldrh	r3, [r4, #12]
1a001ef2:	f023 0303 	bic.w	r3, r3, #3
1a001ef6:	f043 0301 	orr.w	r3, r3, #1
1a001efa:	81a3      	strh	r3, [r4, #12]
1a001efc:	89a3      	ldrh	r3, [r4, #12]
1a001efe:	431d      	orrs	r5, r3
1a001f00:	81a5      	strh	r5, [r4, #12]
1a001f02:	e7cd      	b.n	1a001ea0 <__smakebuf_r+0x18>
1a001f04:	1a0012a1 	.word	0x1a0012a1
1a001f08:	ffffffff 	.word	0xffffffff
1a001f0c:	ffffffff 	.word	0xffffffff

1a001f10 <memchr>:
1a001f10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a001f14:	2a10      	cmp	r2, #16
1a001f16:	db2b      	blt.n	1a001f70 <memchr+0x60>
1a001f18:	f010 0f07 	tst.w	r0, #7
1a001f1c:	d008      	beq.n	1a001f30 <memchr+0x20>
1a001f1e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a001f22:	3a01      	subs	r2, #1
1a001f24:	428b      	cmp	r3, r1
1a001f26:	d02d      	beq.n	1a001f84 <memchr+0x74>
1a001f28:	f010 0f07 	tst.w	r0, #7
1a001f2c:	b342      	cbz	r2, 1a001f80 <memchr+0x70>
1a001f2e:	d1f6      	bne.n	1a001f1e <memchr+0xe>
1a001f30:	b4f0      	push	{r4, r5, r6, r7}
1a001f32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a001f36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a001f3a:	f022 0407 	bic.w	r4, r2, #7
1a001f3e:	f07f 0700 	mvns.w	r7, #0
1a001f42:	2300      	movs	r3, #0
1a001f44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a001f48:	3c08      	subs	r4, #8
1a001f4a:	ea85 0501 	eor.w	r5, r5, r1
1a001f4e:	ea86 0601 	eor.w	r6, r6, r1
1a001f52:	fa85 f547 	uadd8	r5, r5, r7
1a001f56:	faa3 f587 	sel	r5, r3, r7
1a001f5a:	fa86 f647 	uadd8	r6, r6, r7
1a001f5e:	faa5 f687 	sel	r6, r5, r7
1a001f62:	b98e      	cbnz	r6, 1a001f88 <memchr+0x78>
1a001f64:	d1ee      	bne.n	1a001f44 <memchr+0x34>
1a001f66:	bcf0      	pop	{r4, r5, r6, r7}
1a001f68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a001f6c:	f002 0207 	and.w	r2, r2, #7
1a001f70:	b132      	cbz	r2, 1a001f80 <memchr+0x70>
1a001f72:	f810 3b01 	ldrb.w	r3, [r0], #1
1a001f76:	3a01      	subs	r2, #1
1a001f78:	ea83 0301 	eor.w	r3, r3, r1
1a001f7c:	b113      	cbz	r3, 1a001f84 <memchr+0x74>
1a001f7e:	d1f8      	bne.n	1a001f72 <memchr+0x62>
1a001f80:	2000      	movs	r0, #0
1a001f82:	4770      	bx	lr
1a001f84:	3801      	subs	r0, #1
1a001f86:	4770      	bx	lr
1a001f88:	2d00      	cmp	r5, #0
1a001f8a:	bf06      	itte	eq
1a001f8c:	4635      	moveq	r5, r6
1a001f8e:	3803      	subeq	r0, #3
1a001f90:	3807      	subne	r0, #7
1a001f92:	f015 0f01 	tst.w	r5, #1
1a001f96:	d107      	bne.n	1a001fa8 <memchr+0x98>
1a001f98:	3001      	adds	r0, #1
1a001f9a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a001f9e:	bf02      	ittt	eq
1a001fa0:	3001      	addeq	r0, #1
1a001fa2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a001fa6:	3001      	addeq	r0, #1
1a001fa8:	bcf0      	pop	{r4, r5, r6, r7}
1a001faa:	3801      	subs	r0, #1
1a001fac:	4770      	bx	lr
1a001fae:	bf00      	nop

1a001fb0 <__malloc_lock>:
1a001fb0:	4801      	ldr	r0, [pc, #4]	; (1a001fb8 <__malloc_lock+0x8>)
1a001fb2:	f7ff ba46 	b.w	1a001442 <__retarget_lock_acquire_recursive>
1a001fb6:	bf00      	nop
1a001fb8:	10000084 	.word	0x10000084

1a001fbc <__malloc_unlock>:
1a001fbc:	4801      	ldr	r0, [pc, #4]	; (1a001fc4 <__malloc_unlock+0x8>)
1a001fbe:	f7ff ba41 	b.w	1a001444 <__retarget_lock_release_recursive>
1a001fc2:	bf00      	nop
1a001fc4:	10000084 	.word	0x10000084

1a001fc8 <_free_r>:
1a001fc8:	b538      	push	{r3, r4, r5, lr}
1a001fca:	4605      	mov	r5, r0
1a001fcc:	2900      	cmp	r1, #0
1a001fce:	d045      	beq.n	1a00205c <_free_r+0x94>
1a001fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a001fd4:	1f0c      	subs	r4, r1, #4
1a001fd6:	2b00      	cmp	r3, #0
1a001fd8:	bfb8      	it	lt
1a001fda:	18e4      	addlt	r4, r4, r3
1a001fdc:	f7ff ffe8 	bl	1a001fb0 <__malloc_lock>
1a001fe0:	4a1f      	ldr	r2, [pc, #124]	; (1a002060 <_free_r+0x98>)
1a001fe2:	6813      	ldr	r3, [r2, #0]
1a001fe4:	4610      	mov	r0, r2
1a001fe6:	b933      	cbnz	r3, 1a001ff6 <_free_r+0x2e>
1a001fe8:	6063      	str	r3, [r4, #4]
1a001fea:	6014      	str	r4, [r2, #0]
1a001fec:	4628      	mov	r0, r5
1a001fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a001ff2:	f7ff bfe3 	b.w	1a001fbc <__malloc_unlock>
1a001ff6:	42a3      	cmp	r3, r4
1a001ff8:	d90c      	bls.n	1a002014 <_free_r+0x4c>
1a001ffa:	6821      	ldr	r1, [r4, #0]
1a001ffc:	1862      	adds	r2, r4, r1
1a001ffe:	4293      	cmp	r3, r2
1a002000:	bf04      	itt	eq
1a002002:	681a      	ldreq	r2, [r3, #0]
1a002004:	685b      	ldreq	r3, [r3, #4]
1a002006:	6063      	str	r3, [r4, #4]
1a002008:	bf04      	itt	eq
1a00200a:	1852      	addeq	r2, r2, r1
1a00200c:	6022      	streq	r2, [r4, #0]
1a00200e:	6004      	str	r4, [r0, #0]
1a002010:	e7ec      	b.n	1a001fec <_free_r+0x24>
1a002012:	4613      	mov	r3, r2
1a002014:	685a      	ldr	r2, [r3, #4]
1a002016:	b10a      	cbz	r2, 1a00201c <_free_r+0x54>
1a002018:	42a2      	cmp	r2, r4
1a00201a:	d9fa      	bls.n	1a002012 <_free_r+0x4a>
1a00201c:	6819      	ldr	r1, [r3, #0]
1a00201e:	1858      	adds	r0, r3, r1
1a002020:	42a0      	cmp	r0, r4
1a002022:	d10b      	bne.n	1a00203c <_free_r+0x74>
1a002024:	6820      	ldr	r0, [r4, #0]
1a002026:	4401      	add	r1, r0
1a002028:	1858      	adds	r0, r3, r1
1a00202a:	4282      	cmp	r2, r0
1a00202c:	6019      	str	r1, [r3, #0]
1a00202e:	d1dd      	bne.n	1a001fec <_free_r+0x24>
1a002030:	6810      	ldr	r0, [r2, #0]
1a002032:	6852      	ldr	r2, [r2, #4]
1a002034:	605a      	str	r2, [r3, #4]
1a002036:	4401      	add	r1, r0
1a002038:	6019      	str	r1, [r3, #0]
1a00203a:	e7d7      	b.n	1a001fec <_free_r+0x24>
1a00203c:	d902      	bls.n	1a002044 <_free_r+0x7c>
1a00203e:	230c      	movs	r3, #12
1a002040:	602b      	str	r3, [r5, #0]
1a002042:	e7d3      	b.n	1a001fec <_free_r+0x24>
1a002044:	6820      	ldr	r0, [r4, #0]
1a002046:	1821      	adds	r1, r4, r0
1a002048:	428a      	cmp	r2, r1
1a00204a:	bf04      	itt	eq
1a00204c:	6811      	ldreq	r1, [r2, #0]
1a00204e:	6852      	ldreq	r2, [r2, #4]
1a002050:	6062      	str	r2, [r4, #4]
1a002052:	bf04      	itt	eq
1a002054:	1809      	addeq	r1, r1, r0
1a002056:	6021      	streq	r1, [r4, #0]
1a002058:	605c      	str	r4, [r3, #4]
1a00205a:	e7c7      	b.n	1a001fec <_free_r+0x24>
1a00205c:	bd38      	pop	{r3, r4, r5, pc}
1a00205e:	bf00      	nop
1a002060:	10000074 	.word	0x10000074
1a002064:	616c6f48 	.word	0x616c6f48
1a002068:	6e756d20 	.word	0x6e756d20
1a00206c:	61206f64 	.word	0x61206f64
1a002070:	64252074 	.word	0x64252074
1a002074:	ff000a0d 	.word	0xff000a0d

1a002078 <InitClkStates>:
1a002078:	00010100 00010909 0001090a 01010701     ................
1a002088:	00010902 00010906 0101090c 0001090d     ................
1a002098:	0001090e 0001090f 00010910 00010911     ................
1a0020a8:	00010912 00010913 00011114 00011119     ................
1a0020b8:	0001111a 0001111b                       ........

1a0020c0 <UART_BClock>:
1a0020c0:	01a201c2 01620182                       ......b.

1a0020c8 <UART_PClock>:
1a0020c8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0020d8:	000000ff                                ....

1a0020dc <periph_to_base>:
1a0020dc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0020ec:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0020fc:	000100e0 01000100 01200003 00060120     .......... . ...
1a00210c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00211c:	01820013 00120182 01a201a2 01c20011     ................
1a00212c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00213c:	02220222 0223000d 001c0223              "."...#.#...

1a002148 <InitClkStates>:
1a002148:	00010308 00010307 01010f01              ............

1a002154 <pinmuxing>:
1a002154:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a002164:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a002174:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a002184:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a002194:	00f71001 00f31101 00b31201 00f01301     ................
1a0021a4:	00b31401 00b60707 00f20000 00b60100     ................

1a0021b4 <ExtRateIn>:
1a0021b4:	00000000                                ....

1a0021b8 <OscRateIn>:
1a0021b8:	00b71b00                                ....

1a0021bc <gpioLEDBits>:
1a0021bc:	0b010e00 00050c01 02050105              ............

1a0021c8 <__sf_fake_stderr>:
	...

1a0021e8 <__sf_fake_stdin>:
	...

1a002208 <__sf_fake_stdout>:
	...

1a002228 <_global_impure_ptr>:
1a002228:	10000004 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a002238:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a002248:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a002258:	64636261 ff006665                       abcdef..
