
app/out/app.elf:     file format elf32-littlearm
app/out/app.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001695

Program Header:
0x70000001 off    0x00011d3c vaddr 0x1a001d3c paddr 0x1a001d3c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000000f8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001d44 memsz 0x00001d44 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001d44 align 2**16
         filesz 0x000000c8 memsz 0x000000c8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d3c  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  10000000  1a001d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200c8  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200c8  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200c8  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200c8  2**2
                  CONTENTS
  6 .bss          00000030  100000c8  100000c8  000000c8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200c8  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200c8  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200c8  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200c8  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a001d3c  1a001d3c  00011d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000200c8  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000200c8  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000200c8  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000200c8  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000200c8  2**2
                  CONTENTS
 17 .noinit       00000000  100000f8  100000f8  000200c8  2**2
                  CONTENTS
 18 .debug_info   0001fb62  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000046ab  00000000  00000000  0003fc2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 000008e0  00000000  00000000  000442d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00000928  00000000  00000000  00044bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_macro  00007a8b  00000000  00000000  000454dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   000108e7  00000000  00000000  0004cf68  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00024c0e  00000000  00000000  0005d84f  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      00000068  00000000  00000000  0008245d  2**0
                  CONTENTS, READONLY
 26 .ARM.attributes 00000032  00000000  00000000  000824c5  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000015ec  00000000  00000000  000824f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_loc    00007666  00000000  00000000  00083ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000c8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001d3c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000f8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 motor.c
100000c8 l     O .bss	00000001 pos
1a001a78 l     O .text	00000010 paso
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000000 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0003b8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0005d6 l     F .text	00000002 errorOcurred
1a0005d8 l     F .text	00000002 doNothing
10000008 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_tick.c
100000cc l     O .bss	00000004 callBackFuncParams
100000d0 l     O .bss	00000008 tickCounter
100000d8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000dc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a0008f8 l     F .text	00000010 clearInterrupt
1a000908 l     F .text	0000005c serveInterrupt
10000048 l     O .data	00000048 ultrasonicSensors
1a001bc0 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001bc4 l     O .text	00000004 InitClkStates
1a001bc8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board.c
1a000a50 l     F .text	00000044 Board_LED_Init
1a000a94 l     F .text	00000040 Board_TEC_Init
1a000ad4 l     F .text	00000040 Board_GPIO_Init
1a000b14 l     F .text	00000038 Board_SPI_Init
1a000b4c l     F .text	00000024 Board_I2C_Init
1a000b70 l     F .text	00000030 Board_ADC_Init
1a001c40 l     O .text	00000008 GpioButtons
1a001c48 l     O .text	0000000c GpioLeds
1a001c54 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000bf0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000c04 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000090 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000d78 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000d8c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001c6c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000fac l     F .text	000000a0 pll_calc_divs
1a00104c l     F .text	0000010c pll_get_frac
1a001158 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0013cc l     F .text	00000022 Chip_Clock_GetDivRate
100000e0 l     O .bss	00000008 audio_usb_pll_freq
1a001cc0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001538 l     F .text	0000002c Chip_UART_GetIndex
1a001d2c l     O .text	00000008 UART_BClock
1a001d34 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a001d3c l       .bss_RAM5	00000000 __init_array_end
1a001d3c l       .bss_RAM5	00000000 __preinit_array_end
1a001d3c l       .bss_RAM5	00000000 __init_array_start
1a001d3c l       .bss_RAM5	00000000 __preinit_array_start
1a0011f0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00065c g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000e32 g     F .text	0000000c Chip_ADC_SetResolution
1a000784 g     F .text	0000002c SysTick_Handler
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a001d44 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
53ff61fa g       *ABS*	00000000 __valid_user_code_checksum
1a001d44 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a0006a0 g     F .text	00000044 TIMER3_IRQHandler
1a00146e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a00171c g     F .text	00000000 .hidden __aeabi_uldivmod
100000f8 g       .noinit	00000000 _noinit
100000f4 g     O .bss	00000004 SystemCoreClock
1a001564 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a0014ec g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a0009bc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00174c g     F .text	000002d0 .hidden __udivmoddi4
1a001c3c g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000320 g     F .text	00000034 motorInit
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00096e g     F .text	0000000a GPIO1_IRQHandler
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a001d3c g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a001a20 g     F .text	00000048 __libc_init_array
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a000bc4 g     F .text	0000002c Board_Init
1a001718 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
100000f8 g       .bss	00000000 _ebss
1a0005dc g     F .text	00000040 TIMER0_IRQHandler
1a000708 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a000ce8 g     F .text	00000038 Chip_I2C_SetClockRate
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a0011a4 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a00061c g     F .text	00000040 TIMER1_IRQHandler
1a000cc4 g     F .text	00000024 Chip_I2C_Init
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a001360 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001a88 g     O .text	00000136 gpioPinsInit
1a000c1c g     F .text	00000012 Chip_SSP_SetClockRate
1a000978 g     F .text	0000000a GPIO2_IRQHandler
1a001448 g     F .text	00000026 Chip_Clock_GetBaseClock
100000c8 g       .bss	00000000 _bss
1a000e00 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a000c2e g     F .text	0000003e Chip_SSP_SetBitRate
1a000d20 g     F .text	00000002 Chip_GPIO_Init
1a001c68 g     O .text	00000004 OscRateIn
100000f8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0003ec g     F .text	00000194 gpioInit
1a001a1c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0007b0 g     F .text	0000001c USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a00120c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001a68 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000020 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a00147c g     F .text	0000003c Chip_Clock_EnableOpts
1a001228 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000d24 g     F .text	00000054 fpuInit
1a0012e0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000a34 g     F .text	0000001c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a0008c0 g     F .text	00000038 delay
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000580 g     F .text	00000056 gpioWrite
1a000dc0 g     F .text	00000040 Chip_ADC_Init
100000f0 g     O .bss	00000004 g_pUsbApi
1a000984 g     F .text	00000038 Board_SetupMuxing
1a0015b8 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0006e4 g     F .text	0000000c tickRead
100000e8 g     O .bss	00000008 tickRateMS
1a00018a  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100000f8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000c6c g     F .text	00000038 Chip_SSP_Init
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a000ba0 g     F .text	00000024 Board_Debug_Init
100000c8 g       .data	00000000 _edata
1a000ca4 g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a000e40 g     F .text	00000158 Chip_SetupCoreClock
1a000964 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a001694 g     F .text	00000084 ResetISR
1a000f98 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001a1c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0014b8 g     F .text	00000034 Chip_Clock_Enable
1a00018a  w    F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a0007cc g     F .text	000000f4 boardInit
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a0006f0 g     F .text	00000018 tickPowerSet
1a000354 g     F .text	00000048 motorOn
1a0013f0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00039c g     F .text	0000001c cyclesCounterInit
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a000a28 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 95 16 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a fa 61 ff 53     }............a.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	85 07 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a b1 07 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a dd 05 00 1a 1d 06 00 1a 5d 06 00 1a     ............]...
1a00007c:	a1 06 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 65 09 00 1a 6f 09 00 1a 79 09 00 1a     ....e...o...y...
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a001d44 	.word	0x1a001d44
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000c8 	.word	0x000000c8
1a000120:	1a001d44 	.word	0x1a001d44
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001d44 	.word	0x1a001d44
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001d44 	.word	0x1a001d44
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001d44 	.word	0x1a001d44
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000c8 	.word	0x100000c8
1a000154:	00000030 	.word	0x00000030
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
#include "app.h"         // <= Su propia cabecera (opcional)
#include "sapi.h"        // <= Biblioteca sAPI
#include "motor.h"
// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void )
{
1a000300:	b508      	push	{r3, lr}
   // ---------- CONFIGURACIONES ------------------------------

   // Inicializar y configurar la plataforma
   boardConfig();
1a000302:	f000 fa63 	bl	1a0007cc <boardInit>
   
   motorInit(GPIO1,GPIO3,GPIO5,GPIO7);
1a000306:	230c      	movs	r3, #12
1a000308:	220d      	movs	r2, #13
1a00030a:	210e      	movs	r1, #14
1a00030c:	200f      	movs	r0, #15
1a00030e:	f000 f807 	bl	1a000320 <motorInit>
   
   while(true){
      
      motorOn();
1a000312:	f000 f81f 	bl	1a000354 <motorOn>
      delay(3);
1a000316:	2003      	movs	r0, #3
1a000318:	2100      	movs	r1, #0
1a00031a:	f000 fad1 	bl	1a0008c0 <delay>
1a00031e:	e7f8      	b.n	1a000312 <main+0x12>

1a000320 <motorInit>:
static uint8_t paso[4][4] ={{1,1,0,0}
                     ,{0,1,1,0}
                     ,{0,0,1,1}
                     ,{1,0,0,1}};

void motorInit(uint8_t red,uint8_t orange,uint8_t yellow,uint8_t pink){
1a000320:	b570      	push	{r4, r5, r6, lr}
1a000322:	4604      	mov	r4, r0
1a000324:	460d      	mov	r5, r1
1a000326:	4616      	mov	r6, r2
   gpioConfig(pink,GPIO_OUTPUT);
1a000328:	2101      	movs	r1, #1
1a00032a:	4618      	mov	r0, r3
1a00032c:	f000 f85e 	bl	1a0003ec <gpioInit>
   gpioConfig(yellow,GPIO_OUTPUT);
1a000330:	2101      	movs	r1, #1
1a000332:	4630      	mov	r0, r6
1a000334:	f000 f85a 	bl	1a0003ec <gpioInit>
   gpioConfig(orange,GPIO_OUTPUT);
1a000338:	2101      	movs	r1, #1
1a00033a:	4628      	mov	r0, r5
1a00033c:	f000 f856 	bl	1a0003ec <gpioInit>
   gpioConfig(red,GPIO_OUTPUT);
1a000340:	2101      	movs	r1, #1
1a000342:	4620      	mov	r0, r4
1a000344:	f000 f852 	bl	1a0003ec <gpioInit>
   pos=0;
1a000348:	4b01      	ldr	r3, [pc, #4]	; (1a000350 <motorInit+0x30>)
1a00034a:	2200      	movs	r2, #0
1a00034c:	701a      	strb	r2, [r3, #0]
}
1a00034e:	bd70      	pop	{r4, r5, r6, pc}
1a000350:	100000c8 	.word	0x100000c8

1a000354 <motorOn>:

void motorOn(){
1a000354:	b538      	push	{r3, r4, r5, lr}
   gpioWrite(RED_PIN,(paso[pos][0]));
1a000356:	4c0f      	ldr	r4, [pc, #60]	; (1a000394 <motorOn+0x40>)
1a000358:	4d0f      	ldr	r5, [pc, #60]	; (1a000398 <motorOn+0x44>)
1a00035a:	782b      	ldrb	r3, [r5, #0]
1a00035c:	f814 1023 	ldrb.w	r1, [r4, r3, lsl #2]
1a000360:	2000      	movs	r0, #0
1a000362:	f000 f90d 	bl	1a000580 <gpioWrite>
   gpioWrite(ORANGE_PIN,(paso[pos][1]));
1a000366:	782b      	ldrb	r3, [r5, #0]
1a000368:	eb04 0383 	add.w	r3, r4, r3, lsl #2
1a00036c:	7859      	ldrb	r1, [r3, #1]
1a00036e:	2000      	movs	r0, #0
1a000370:	f000 f906 	bl	1a000580 <gpioWrite>
   gpioWrite(YELLOW_PIN,(paso[pos][2]));
1a000374:	782b      	ldrb	r3, [r5, #0]
1a000376:	eb04 0383 	add.w	r3, r4, r3, lsl #2
1a00037a:	7899      	ldrb	r1, [r3, #2]
1a00037c:	2000      	movs	r0, #0
1a00037e:	f000 f8ff 	bl	1a000580 <gpioWrite>
   gpioWrite(PINK_PIN,(paso[pos][3]));
1a000382:	782b      	ldrb	r3, [r5, #0]
1a000384:	eb04 0483 	add.w	r4, r4, r3, lsl #2
1a000388:	78e1      	ldrb	r1, [r4, #3]
1a00038a:	2000      	movs	r0, #0
1a00038c:	f000 f8f8 	bl	1a000580 <gpioWrite>

1a000390:	bd38      	pop	{r3, r4, r5, pc}
1a000392:	bf00      	nop
1a000394:	1a001a78 	.word	0x1a001a78
1a000398:	100000c8 	.word	0x100000c8

1a00039c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00039c:	4b04      	ldr	r3, [pc, #16]	; (1a0003b0 <cyclesCounterInit+0x14>)
1a00039e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a0003a0:	4b04      	ldr	r3, [pc, #16]	; (1a0003b4 <cyclesCounterInit+0x18>)
1a0003a2:	681a      	ldr	r2, [r3, #0]
1a0003a4:	6813      	ldr	r3, [r2, #0]
1a0003a6:	f043 0301 	orr.w	r3, r3, #1
1a0003aa:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0003ac:	2001      	movs	r0, #1
1a0003ae:	4770      	bx	lr
1a0003b0:	10000000 	.word	0x10000000
1a0003b4:	10000004 	.word	0x10000004

1a0003b8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0003b8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0003ba:	4d0b      	ldr	r5, [pc, #44]	; (1a0003e8 <gpioObtainPinInit+0x30>)
1a0003bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0003c0:	182c      	adds	r4, r5, r0
1a0003c2:	5628      	ldrsb	r0, [r5, r0]
1a0003c4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0003c6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0003ca:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0003cc:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0003d0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0003d2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0003d6:	9b02      	ldr	r3, [sp, #8]
1a0003d8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0003da:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0003de:	9b03      	ldr	r3, [sp, #12]
1a0003e0:	701a      	strb	r2, [r3, #0]
}
1a0003e2:	bc30      	pop	{r4, r5}
1a0003e4:	4770      	bx	lr
1a0003e6:	bf00      	nop
1a0003e8:	1a001a88 	.word	0x1a001a88

1a0003ec <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0003ec:	b570      	push	{r4, r5, r6, lr}
1a0003ee:	b084      	sub	sp, #16
1a0003f0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0003f2:	2300      	movs	r3, #0
1a0003f4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0003f8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0003fc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000400:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000404:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000408:	f10d 030b 	add.w	r3, sp, #11
1a00040c:	9301      	str	r3, [sp, #4]
1a00040e:	ab03      	add	r3, sp, #12
1a000410:	9300      	str	r3, [sp, #0]
1a000412:	f10d 030d 	add.w	r3, sp, #13
1a000416:	f10d 020e 	add.w	r2, sp, #14
1a00041a:	f10d 010f 	add.w	r1, sp, #15
1a00041e:	f7ff ffcb 	bl	1a0003b8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a000422:	2c05      	cmp	r4, #5
1a000424:	f200 80a5 	bhi.w	1a000572 <gpioInit+0x186>
1a000428:	e8df f004 	tbb	[pc, r4]
1a00042c:	45278109 	.word	0x45278109
1a000430:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a000432:	4851      	ldr	r0, [pc, #324]	; (1a000578 <gpioInit+0x18c>)
1a000434:	f000 fc74 	bl	1a000d20 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a000438:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00043a:	b004      	add	sp, #16
1a00043c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00043e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000442:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000446:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00044a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00044e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000452:	494a      	ldr	r1, [pc, #296]	; (1a00057c <gpioInit+0x190>)
1a000454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000458:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00045c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000460:	2001      	movs	r0, #1
1a000462:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a000466:	4c44      	ldr	r4, [pc, #272]	; (1a000578 <gpioInit+0x18c>)
1a000468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00046c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000470:	ea22 0201 	bic.w	r2, r2, r1
1a000474:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000478:	e7df      	b.n	1a00043a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00047a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00047e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000482:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000486:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00048a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00048e:	493b      	ldr	r1, [pc, #236]	; (1a00057c <gpioInit+0x190>)
1a000490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000494:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000498:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00049c:	2001      	movs	r0, #1
1a00049e:	fa00 f102 	lsl.w	r1, r0, r2
1a0004a2:	4c35      	ldr	r4, [pc, #212]	; (1a000578 <gpioInit+0x18c>)
1a0004a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0004a8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0004ac:	ea22 0201 	bic.w	r2, r2, r1
1a0004b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0004b4:	e7c1      	b.n	1a00043a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0004b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0004ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0004be:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0004c2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0004c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0004ca:	492c      	ldr	r1, [pc, #176]	; (1a00057c <gpioInit+0x190>)
1a0004cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0004d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0004d4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0004d8:	2001      	movs	r0, #1
1a0004da:	fa00 f102 	lsl.w	r1, r0, r2
1a0004de:	4c26      	ldr	r4, [pc, #152]	; (1a000578 <gpioInit+0x18c>)
1a0004e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0004e4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0004e8:	ea22 0201 	bic.w	r2, r2, r1
1a0004ec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0004f0:	e7a3      	b.n	1a00043a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0004f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0004f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0004fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0004fe:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a000502:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000506:	491d      	ldr	r1, [pc, #116]	; (1a00057c <gpioInit+0x190>)
1a000508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00050c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000510:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000514:	2001      	movs	r0, #1
1a000516:	fa00 f102 	lsl.w	r1, r0, r2
1a00051a:	4c17      	ldr	r4, [pc, #92]	; (1a000578 <gpioInit+0x18c>)
1a00051c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000520:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000524:	ea22 0201 	bic.w	r2, r2, r1
1a000528:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00052c:	e785      	b.n	1a00043a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00052e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000532:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000536:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00053a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00053e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000542:	490e      	ldr	r1, [pc, #56]	; (1a00057c <gpioInit+0x190>)
1a000544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a000548:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00054c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000550:	2001      	movs	r0, #1
1a000552:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a000556:	4b08      	ldr	r3, [pc, #32]	; (1a000578 <gpioInit+0x18c>)
1a000558:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00055c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a000560:	4331      	orrs	r1, r6
1a000562:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a000566:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a000568:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00056c:	2100      	movs	r1, #0
1a00056e:	5499      	strb	r1, [r3, r2]
1a000570:	e763      	b.n	1a00043a <gpioInit+0x4e>
      ret_val = 0;
1a000572:	2000      	movs	r0, #0
1a000574:	e761      	b.n	1a00043a <gpioInit+0x4e>
1a000576:	bf00      	nop
1a000578:	400f4000 	.word	0x400f4000
1a00057c:	40086000 	.word	0x40086000

1a000580 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a000580:	b510      	push	{r4, lr}
1a000582:	b084      	sub	sp, #16
1a000584:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000586:	2300      	movs	r3, #0
1a000588:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00058c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000590:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000594:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000598:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00059c:	f10d 030b 	add.w	r3, sp, #11
1a0005a0:	9301      	str	r3, [sp, #4]
1a0005a2:	ab03      	add	r3, sp, #12
1a0005a4:	9300      	str	r3, [sp, #0]
1a0005a6:	f10d 030d 	add.w	r3, sp, #13
1a0005aa:	f10d 020e 	add.w	r2, sp, #14
1a0005ae:	f10d 010f 	add.w	r1, sp, #15
1a0005b2:	f7ff ff01 	bl	1a0003b8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0005b6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0005ba:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0005be:	3400      	adds	r4, #0
1a0005c0:	bf18      	it	ne
1a0005c2:	2401      	movne	r4, #1
1a0005c4:	015b      	lsls	r3, r3, #5
1a0005c6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0005ca:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0005ce:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0005d0:	2001      	movs	r0, #1
1a0005d2:	b004      	add	sp, #16
1a0005d4:	bd10      	pop	{r4, pc}

1a0005d6 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0005d6:	e7fe      	b.n	1a0005d6 <errorOcurred>

1a0005d8 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a0005d8:	4770      	bx	lr
1a0005da:	Address 0x1a0005da is out of bounds.


1a0005dc <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0005dc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0005de:	2400      	movs	r4, #0
1a0005e0:	e001      	b.n	1a0005e6 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0005e2:	3401      	adds	r4, #1
1a0005e4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0005e6:	2c03      	cmp	r4, #3
1a0005e8:	d812      	bhi.n	1a000610 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0005ea:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0005ec:	4b09      	ldr	r3, [pc, #36]	; (1a000614 <TIMER0_IRQHandler+0x38>)
1a0005ee:	681a      	ldr	r2, [r3, #0]
1a0005f0:	f004 010f 	and.w	r1, r4, #15
1a0005f4:	2301      	movs	r3, #1
1a0005f6:	408b      	lsls	r3, r1
1a0005f8:	421a      	tst	r2, r3
1a0005fa:	d0f2      	beq.n	1a0005e2 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0005fc:	4b06      	ldr	r3, [pc, #24]	; (1a000618 <TIMER0_IRQHandler+0x3c>)
1a0005fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000602:	2000      	movs	r0, #0
1a000604:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000606:	2301      	movs	r3, #1
1a000608:	40ab      	lsls	r3, r5
1a00060a:	4a02      	ldr	r2, [pc, #8]	; (1a000614 <TIMER0_IRQHandler+0x38>)
1a00060c:	6013      	str	r3, [r2, #0]
1a00060e:	e7e8      	b.n	1a0005e2 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a000610:	bd38      	pop	{r3, r4, r5, pc}
1a000612:	bf00      	nop
1a000614:	40084000 	.word	0x40084000
1a000618:	10000008 	.word	0x10000008

1a00061c <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a00061c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00061e:	2400      	movs	r4, #0
1a000620:	e001      	b.n	1a000626 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000622:	3401      	adds	r4, #1
1a000624:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000626:	2c03      	cmp	r4, #3
1a000628:	d813      	bhi.n	1a000652 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00062a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00062c:	4b09      	ldr	r3, [pc, #36]	; (1a000654 <TIMER1_IRQHandler+0x38>)
1a00062e:	681a      	ldr	r2, [r3, #0]
1a000630:	f004 010f 	and.w	r1, r4, #15
1a000634:	2301      	movs	r3, #1
1a000636:	408b      	lsls	r3, r1
1a000638:	421a      	tst	r2, r3
1a00063a:	d0f2      	beq.n	1a000622 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00063c:	1d23      	adds	r3, r4, #4
1a00063e:	4a06      	ldr	r2, [pc, #24]	; (1a000658 <TIMER1_IRQHandler+0x3c>)
1a000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000644:	2000      	movs	r0, #0
1a000646:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000648:	2301      	movs	r3, #1
1a00064a:	40ab      	lsls	r3, r5
1a00064c:	4a01      	ldr	r2, [pc, #4]	; (1a000654 <TIMER1_IRQHandler+0x38>)
1a00064e:	6013      	str	r3, [r2, #0]
1a000650:	e7e7      	b.n	1a000622 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a000652:	bd38      	pop	{r3, r4, r5, pc}
1a000654:	40085000 	.word	0x40085000
1a000658:	10000008 	.word	0x10000008

1a00065c <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a00065c:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00065e:	2400      	movs	r4, #0
1a000660:	e001      	b.n	1a000666 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000662:	3401      	adds	r4, #1
1a000664:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000666:	2c03      	cmp	r4, #3
1a000668:	d814      	bhi.n	1a000694 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00066a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00066c:	4b0a      	ldr	r3, [pc, #40]	; (1a000698 <TIMER2_IRQHandler+0x3c>)
1a00066e:	681a      	ldr	r2, [r3, #0]
1a000670:	f004 010f 	and.w	r1, r4, #15
1a000674:	2301      	movs	r3, #1
1a000676:	408b      	lsls	r3, r1
1a000678:	421a      	tst	r2, r3
1a00067a:	d0f2      	beq.n	1a000662 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00067c:	f104 0308 	add.w	r3, r4, #8
1a000680:	4a06      	ldr	r2, [pc, #24]	; (1a00069c <TIMER2_IRQHandler+0x40>)
1a000682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000686:	2000      	movs	r0, #0
1a000688:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00068a:	2301      	movs	r3, #1
1a00068c:	40ab      	lsls	r3, r5
1a00068e:	4a02      	ldr	r2, [pc, #8]	; (1a000698 <TIMER2_IRQHandler+0x3c>)
1a000690:	6013      	str	r3, [r2, #0]
1a000692:	e7e6      	b.n	1a000662 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000694:	bd38      	pop	{r3, r4, r5, pc}
1a000696:	bf00      	nop
1a000698:	400c3000 	.word	0x400c3000
1a00069c:	10000008 	.word	0x10000008

1a0006a0 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0006a0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0006a2:	2400      	movs	r4, #0
1a0006a4:	e001      	b.n	1a0006aa <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0006a6:	3401      	adds	r4, #1
1a0006a8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0006aa:	2c03      	cmp	r4, #3
1a0006ac:	d814      	bhi.n	1a0006d8 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0006ae:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0006b0:	4b0a      	ldr	r3, [pc, #40]	; (1a0006dc <TIMER3_IRQHandler+0x3c>)
1a0006b2:	681a      	ldr	r2, [r3, #0]
1a0006b4:	f004 010f 	and.w	r1, r4, #15
1a0006b8:	2301      	movs	r3, #1
1a0006ba:	408b      	lsls	r3, r1
1a0006bc:	421a      	tst	r2, r3
1a0006be:	d0f2      	beq.n	1a0006a6 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0006c0:	f104 030c 	add.w	r3, r4, #12
1a0006c4:	4a06      	ldr	r2, [pc, #24]	; (1a0006e0 <TIMER3_IRQHandler+0x40>)
1a0006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0006ca:	2000      	movs	r0, #0
1a0006cc:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0006ce:	2301      	movs	r3, #1
1a0006d0:	40ab      	lsls	r3, r5
1a0006d2:	4a02      	ldr	r2, [pc, #8]	; (1a0006dc <TIMER3_IRQHandler+0x3c>)
1a0006d4:	6013      	str	r3, [r2, #0]
1a0006d6:	e7e6      	b.n	1a0006a6 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0006d8:	bd38      	pop	{r3, r4, r5, pc}
1a0006da:	bf00      	nop
1a0006dc:	400c4000 	.word	0x400c4000
1a0006e0:	10000008 	.word	0x10000008

1a0006e4 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a0006e4:	4b01      	ldr	r3, [pc, #4]	; (1a0006ec <tickRead+0x8>)
1a0006e6:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0006ea:	4770      	bx	lr
1a0006ec:	100000d0 	.word	0x100000d0

1a0006f0 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0006f0:	b118      	cbz	r0, 1a0006fa <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0006f2:	4b04      	ldr	r3, [pc, #16]	; (1a000704 <tickPowerSet+0x14>)
1a0006f4:	2207      	movs	r2, #7
1a0006f6:	601a      	str	r2, [r3, #0]
1a0006f8:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0006fa:	4b02      	ldr	r3, [pc, #8]	; (1a000704 <tickPowerSet+0x14>)
1a0006fc:	2200      	movs	r2, #0
1a0006fe:	601a      	str	r2, [r3, #0]
   }
}
1a000700:	4770      	bx	lr
1a000702:	bf00      	nop
1a000704:	e000e010 	.word	0xe000e010

1a000708 <tickInit>:
{
1a000708:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00070a:	ea50 0401 	orrs.w	r4, r0, r1
1a00070e:	d02a      	beq.n	1a000766 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a000710:	f110 32ff 	adds.w	r2, r0, #4294967295
1a000714:	f141 33ff 	adc.w	r3, r1, #4294967295
1a000718:	2b00      	cmp	r3, #0
1a00071a:	bf08      	it	eq
1a00071c:	2a32      	cmpeq	r2, #50	; 0x32
1a00071e:	d227      	bcs.n	1a000770 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a000720:	4b14      	ldr	r3, [pc, #80]	; (1a000774 <tickInit+0x6c>)
1a000722:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a000726:	4b14      	ldr	r3, [pc, #80]	; (1a000778 <tickInit+0x70>)
1a000728:	681b      	ldr	r3, [r3, #0]
1a00072a:	fba3 4500 	umull	r4, r5, r3, r0
1a00072e:	fb03 5501 	mla	r5, r3, r1, r5
1a000732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000736:	2300      	movs	r3, #0
1a000738:	4620      	mov	r0, r4
1a00073a:	4629      	mov	r1, r5
1a00073c:	f000 ffee 	bl	1a00171c <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a000740:	3801      	subs	r0, #1
1a000742:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000746:	d209      	bcs.n	1a00075c <tickInit+0x54>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000748:	4b0c      	ldr	r3, [pc, #48]	; (1a00077c <tickInit+0x74>)
1a00074a:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00074c:	4a0c      	ldr	r2, [pc, #48]	; (1a000780 <tickInit+0x78>)
1a00074e:	21e0      	movs	r1, #224	; 0xe0
1a000750:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000754:	2200      	movs	r2, #0
1a000756:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000758:	2207      	movs	r2, #7
1a00075a:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a00075c:	2001      	movs	r0, #1
1a00075e:	f7ff ffc7 	bl	1a0006f0 <tickPowerSet>
      bool_t ret_val = 1;
1a000762:	2001      	movs	r0, #1
}
1a000764:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a000766:	2000      	movs	r0, #0
1a000768:	f7ff ffc2 	bl	1a0006f0 <tickPowerSet>
         ret_val = 0;
1a00076c:	2000      	movs	r0, #0
1a00076e:	e7f9      	b.n	1a000764 <tickInit+0x5c>
            ret_val = 0;
1a000770:	2000      	movs	r0, #0
1a000772:	e7f7      	b.n	1a000764 <tickInit+0x5c>
1a000774:	100000e8 	.word	0x100000e8
1a000778:	100000f4 	.word	0x100000f4
1a00077c:	e000e010 	.word	0xe000e010
1a000780:	e000ed00 	.word	0xe000ed00

1a000784 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a000784:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a000786:	4a07      	ldr	r2, [pc, #28]	; (1a0007a4 <SysTick_Handler+0x20>)
1a000788:	6813      	ldr	r3, [r2, #0]
1a00078a:	6851      	ldr	r1, [r2, #4]
1a00078c:	3301      	adds	r3, #1
1a00078e:	f141 0100 	adc.w	r1, r1, #0
1a000792:	6013      	str	r3, [r2, #0]
1a000794:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a000796:	4b04      	ldr	r3, [pc, #16]	; (1a0007a8 <SysTick_Handler+0x24>)
1a000798:	681b      	ldr	r3, [r3, #0]
1a00079a:	b113      	cbz	r3, 1a0007a2 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a00079c:	4a03      	ldr	r2, [pc, #12]	; (1a0007ac <SysTick_Handler+0x28>)
1a00079e:	6810      	ldr	r0, [r2, #0]
1a0007a0:	4798      	blx	r3
   }
}
1a0007a2:	bd08      	pop	{r3, pc}
1a0007a4:	100000d0 	.word	0x100000d0
1a0007a8:	100000d8 	.word	0x100000d8
1a0007ac:	100000cc 	.word	0x100000cc

1a0007b0 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0007b0:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0007b2:	4b04      	ldr	r3, [pc, #16]	; (1a0007c4 <USB0_IRQHandler+0x14>)
1a0007b4:	681b      	ldr	r3, [r3, #0]
1a0007b6:	681b      	ldr	r3, [r3, #0]
1a0007b8:	68db      	ldr	r3, [r3, #12]
1a0007ba:	4a03      	ldr	r2, [pc, #12]	; (1a0007c8 <USB0_IRQHandler+0x18>)
1a0007bc:	6810      	ldr	r0, [r2, #0]
1a0007be:	4798      	blx	r3
}
1a0007c0:	bd08      	pop	{r3, pc}
1a0007c2:	bf00      	nop
1a0007c4:	100000f0 	.word	0x100000f0
1a0007c8:	100000dc 	.word	0x100000dc

1a0007cc <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0007cc:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0007ce:	f000 fbe3 	bl	1a000f98 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0007d2:	4b3a      	ldr	r3, [pc, #232]	; (1a0008bc <boardInit+0xf0>)
1a0007d4:	6818      	ldr	r0, [r3, #0]
1a0007d6:	f7ff fde1 	bl	1a00039c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0007da:	2001      	movs	r0, #1
1a0007dc:	2100      	movs	r1, #0
1a0007de:	f7ff ff93 	bl	1a000708 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0007e2:	2105      	movs	r1, #5
1a0007e4:	2000      	movs	r0, #0
1a0007e6:	f7ff fe01 	bl	1a0003ec <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0007ea:	2100      	movs	r1, #0
1a0007ec:	2024      	movs	r0, #36	; 0x24
1a0007ee:	f7ff fdfd 	bl	1a0003ec <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0007f2:	2100      	movs	r1, #0
1a0007f4:	2025      	movs	r0, #37	; 0x25
1a0007f6:	f7ff fdf9 	bl	1a0003ec <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0007fa:	2100      	movs	r1, #0
1a0007fc:	2026      	movs	r0, #38	; 0x26
1a0007fe:	f7ff fdf5 	bl	1a0003ec <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a000802:	2100      	movs	r1, #0
1a000804:	2027      	movs	r0, #39	; 0x27
1a000806:	f7ff fdf1 	bl	1a0003ec <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00080a:	2101      	movs	r1, #1
1a00080c:	2028      	movs	r0, #40	; 0x28
1a00080e:	f7ff fded 	bl	1a0003ec <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a000812:	2101      	movs	r1, #1
1a000814:	2029      	movs	r0, #41	; 0x29
1a000816:	f7ff fde9 	bl	1a0003ec <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00081a:	2101      	movs	r1, #1
1a00081c:	202a      	movs	r0, #42	; 0x2a
1a00081e:	f7ff fde5 	bl	1a0003ec <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a000822:	2101      	movs	r1, #1
1a000824:	202b      	movs	r0, #43	; 0x2b
1a000826:	f7ff fde1 	bl	1a0003ec <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00082a:	2101      	movs	r1, #1
1a00082c:	202c      	movs	r0, #44	; 0x2c
1a00082e:	f7ff fddd 	bl	1a0003ec <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a000832:	2101      	movs	r1, #1
1a000834:	202d      	movs	r0, #45	; 0x2d
1a000836:	f7ff fdd9 	bl	1a0003ec <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00083a:	2100      	movs	r1, #0
1a00083c:	202e      	movs	r0, #46	; 0x2e
1a00083e:	f7ff fdd5 	bl	1a0003ec <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a000842:	2100      	movs	r1, #0
1a000844:	202f      	movs	r0, #47	; 0x2f
1a000846:	f7ff fdd1 	bl	1a0003ec <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00084a:	2100      	movs	r1, #0
1a00084c:	2030      	movs	r0, #48	; 0x30
1a00084e:	f7ff fdcd 	bl	1a0003ec <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a000852:	2100      	movs	r1, #0
1a000854:	2031      	movs	r0, #49	; 0x31
1a000856:	f7ff fdc9 	bl	1a0003ec <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00085a:	2100      	movs	r1, #0
1a00085c:	2032      	movs	r0, #50	; 0x32
1a00085e:	f7ff fdc5 	bl	1a0003ec <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a000862:	2100      	movs	r1, #0
1a000864:	2033      	movs	r0, #51	; 0x33
1a000866:	f7ff fdc1 	bl	1a0003ec <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00086a:	2100      	movs	r1, #0
1a00086c:	2034      	movs	r0, #52	; 0x34
1a00086e:	f7ff fdbd 	bl	1a0003ec <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a000872:	2100      	movs	r1, #0
1a000874:	2035      	movs	r0, #53	; 0x35
1a000876:	f7ff fdb9 	bl	1a0003ec <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00087a:	2101      	movs	r1, #1
1a00087c:	2036      	movs	r0, #54	; 0x36
1a00087e:	f7ff fdb5 	bl	1a0003ec <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a000882:	2101      	movs	r1, #1
1a000884:	2037      	movs	r0, #55	; 0x37
1a000886:	f7ff fdb1 	bl	1a0003ec <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00088a:	2101      	movs	r1, #1
1a00088c:	2038      	movs	r0, #56	; 0x38
1a00088e:	f7ff fdad 	bl	1a0003ec <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a000892:	2101      	movs	r1, #1
1a000894:	2039      	movs	r0, #57	; 0x39
1a000896:	f7ff fda9 	bl	1a0003ec <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00089a:	2101      	movs	r1, #1
1a00089c:	203a      	movs	r0, #58	; 0x3a
1a00089e:	f7ff fda5 	bl	1a0003ec <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0008a2:	2101      	movs	r1, #1
1a0008a4:	203b      	movs	r0, #59	; 0x3b
1a0008a6:	f7ff fda1 	bl	1a0003ec <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0008aa:	2101      	movs	r1, #1
1a0008ac:	203c      	movs	r0, #60	; 0x3c
1a0008ae:	f7ff fd9d 	bl	1a0003ec <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0008b2:	2101      	movs	r1, #1
1a0008b4:	203d      	movs	r0, #61	; 0x3d
1a0008b6:	f7ff fd99 	bl	1a0003ec <gpioInit>

}
1a0008ba:	bd08      	pop	{r3, pc}
1a0008bc:	100000f4 	.word	0x100000f4

1a0008c0 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a0008c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0008c4:	4680      	mov	r8, r0
1a0008c6:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0008c8:	f7ff ff0c 	bl	1a0006e4 <tickRead>
1a0008cc:	4606      	mov	r6, r0
1a0008ce:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a0008d0:	f7ff ff08 	bl	1a0006e4 <tickRead>
1a0008d4:	1b84      	subs	r4, r0, r6
1a0008d6:	eb61 0507 	sbc.w	r5, r1, r7
1a0008da:	4b06      	ldr	r3, [pc, #24]	; (1a0008f4 <delay+0x34>)
1a0008dc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0008e0:	4640      	mov	r0, r8
1a0008e2:	4649      	mov	r1, r9
1a0008e4:	f000 ff1a 	bl	1a00171c <__aeabi_uldivmod>
1a0008e8:	428d      	cmp	r5, r1
1a0008ea:	bf08      	it	eq
1a0008ec:	4284      	cmpeq	r4, r0
1a0008ee:	d3ef      	bcc.n	1a0008d0 <delay+0x10>
}
1a0008f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0008f4:	100000e8 	.word	0x100000e8

1a0008f8 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a0008f8:	2301      	movs	r3, #1
1a0008fa:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0008fe:	4b01      	ldr	r3, [pc, #4]	; (1a000904 <clearInterrupt+0xc>)
1a000900:	6258      	str	r0, [r3, #36]	; 0x24
}
1a000902:	4770      	bx	lr
1a000904:	40087000 	.word	0x40087000

1a000908 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a000908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00090a:	4b12      	ldr	r3, [pc, #72]	; (1a000954 <serveInterrupt+0x4c>)
1a00090c:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00090e:	4b12      	ldr	r3, [pc, #72]	; (1a000958 <serveInterrupt+0x50>)
1a000910:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a000912:	2301      	movs	r3, #1
1a000914:	4083      	lsls	r3, r0
1a000916:	420b      	tst	r3, r1
1a000918:	d00c      	beq.n	1a000934 <serveInterrupt+0x2c>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00091a:	4910      	ldr	r1, [pc, #64]	; (1a00095c <serveInterrupt+0x54>)
1a00091c:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00091e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a000922:	00d1      	lsls	r1, r2, #3
1a000924:	4a0e      	ldr	r2, [pc, #56]	; (1a000960 <serveInterrupt+0x58>)
1a000926:	440a      	add	r2, r1
1a000928:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00092a:	4a0b      	ldr	r2, [pc, #44]	; (1a000958 <serveInterrupt+0x50>)
1a00092c:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a00092e:	f7ff ffe3 	bl	1a0008f8 <clearInterrupt>
}
1a000932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000934:	4909      	ldr	r1, [pc, #36]	; (1a00095c <serveInterrupt+0x54>)
1a000936:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a000938:	4d09      	ldr	r5, [pc, #36]	; (1a000960 <serveInterrupt+0x58>)
1a00093a:	0051      	lsls	r1, r2, #1
1a00093c:	188f      	adds	r7, r1, r2
1a00093e:	00fc      	lsls	r4, r7, #3
1a000940:	4627      	mov	r7, r4
1a000942:	442c      	add	r4, r5
1a000944:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a000946:	6864      	ldr	r4, [r4, #4]
1a000948:	1b36      	subs	r6, r6, r4
1a00094a:	443d      	add	r5, r7
1a00094c:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a00094e:	4a02      	ldr	r2, [pc, #8]	; (1a000958 <serveInterrupt+0x50>)
1a000950:	6213      	str	r3, [r2, #32]
1a000952:	e7ec      	b.n	1a00092e <serveInterrupt+0x26>
1a000954:	1a001bc0 	.word	0x1a001bc0
1a000958:	40087000 	.word	0x40087000
1a00095c:	40084000 	.word	0x40084000
1a000960:	10000048 	.word	0x10000048

1a000964 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a000964:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a000966:	2000      	movs	r0, #0
1a000968:	f7ff ffce 	bl	1a000908 <serveInterrupt>
}
1a00096c:	bd08      	pop	{r3, pc}

1a00096e <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00096e:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a000970:	2001      	movs	r0, #1
1a000972:	f7ff ffc9 	bl	1a000908 <serveInterrupt>
}
1a000976:	bd08      	pop	{r3, pc}

1a000978 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a000978:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00097a:	2002      	movs	r0, #2
1a00097c:	f7ff ffc4 	bl	1a000908 <serveInterrupt>
}
1a000980:	bd08      	pop	{r3, pc}
1a000982:	Address 0x1a000982 is out of bounds.


1a000984 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000984:	2300      	movs	r3, #0
1a000986:	2b1c      	cmp	r3, #28
1a000988:	d812      	bhi.n	1a0009b0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00098a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00098c:	4a09      	ldr	r2, [pc, #36]	; (1a0009b4 <Board_SetupMuxing+0x30>)
1a00098e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000992:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000996:	784a      	ldrb	r2, [r1, #1]
1a000998:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00099a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00099e:	4906      	ldr	r1, [pc, #24]	; (1a0009b8 <Board_SetupMuxing+0x34>)
1a0009a0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0009a4:	3301      	adds	r3, #1
1a0009a6:	2b1c      	cmp	r3, #28
1a0009a8:	d9f0      	bls.n	1a00098c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0009aa:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0009ae:	4770      	bx	lr
1a0009b0:	4770      	bx	lr
1a0009b2:	bf00      	nop
1a0009b4:	1a001bc8 	.word	0x1a001bc8
1a0009b8:	40086000 	.word	0x40086000

1a0009bc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0009bc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0009be:	4a17      	ldr	r2, [pc, #92]	; (1a000a1c <Board_SetupClocking+0x60>)
1a0009c0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0009c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0009c8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0009cc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0009d0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0009d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0009d8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0009dc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0009e0:	2201      	movs	r2, #1
1a0009e2:	490f      	ldr	r1, [pc, #60]	; (1a000a20 <Board_SetupClocking+0x64>)
1a0009e4:	2006      	movs	r0, #6
1a0009e6:	f000 fa2b 	bl	1a000e40 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0009ea:	2400      	movs	r4, #0
1a0009ec:	b14c      	cbz	r4, 1a000a02 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0009ee:	4b0b      	ldr	r3, [pc, #44]	; (1a000a1c <Board_SetupClocking+0x60>)
1a0009f0:	685a      	ldr	r2, [r3, #4]
1a0009f2:	f022 020c 	bic.w	r2, r2, #12
1a0009f6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0009f8:	685a      	ldr	r2, [r3, #4]
1a0009fa:	f042 0203 	orr.w	r2, r2, #3
1a0009fe:	605a      	str	r2, [r3, #4]
}
1a000a00:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000a02:	4808      	ldr	r0, [pc, #32]	; (1a000a24 <Board_SetupClocking+0x68>)
1a000a04:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000a08:	2301      	movs	r3, #1
1a000a0a:	788a      	ldrb	r2, [r1, #2]
1a000a0c:	7849      	ldrb	r1, [r1, #1]
1a000a0e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000a12:	f000 fced 	bl	1a0013f0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000a16:	3401      	adds	r4, #1
1a000a18:	e7e8      	b.n	1a0009ec <Board_SetupClocking+0x30>
1a000a1a:	bf00      	nop
1a000a1c:	40043000 	.word	0x40043000
1a000a20:	0c28cb00 	.word	0x0c28cb00
1a000a24:	1a001bc4 	.word	0x1a001bc4

1a000a28 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000a28:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000a2a:	f7ff ffab 	bl	1a000984 <Board_SetupMuxing>
    Board_SetupClocking();
1a000a2e:	f7ff ffc5 	bl	1a0009bc <Board_SetupClocking>
}
1a000a32:	bd08      	pop	{r3, pc}

1a000a34 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000a34:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a000a36:	4a04      	ldr	r2, [pc, #16]	; (1a000a48 <SystemInit+0x14>)
1a000a38:	4b04      	ldr	r3, [pc, #16]	; (1a000a4c <SystemInit+0x18>)
1a000a3a:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000a3c:	f000 f972 	bl	1a000d24 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a000a40:	f7ff fff2 	bl	1a000a28 <Board_SystemInit>
}
1a000a44:	bd08      	pop	{r3, pc}
1a000a46:	bf00      	nop
1a000a48:	1a000000 	.word	0x1a000000
1a000a4c:	e000ed08 	.word	0xe000ed08

1a000a50 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000a50:	2200      	movs	r2, #0
1a000a52:	2a05      	cmp	r2, #5
1a000a54:	d819      	bhi.n	1a000a8a <Board_LED_Init+0x3a>
{
1a000a56:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000a58:	490c      	ldr	r1, [pc, #48]	; (1a000a8c <Board_LED_Init+0x3c>)
1a000a5a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000a5e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000a62:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a000a64:	4b0a      	ldr	r3, [pc, #40]	; (1a000a90 <Board_LED_Init+0x40>)
1a000a66:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000a6a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000a6e:	2001      	movs	r0, #1
1a000a70:	40a0      	lsls	r0, r4
1a000a72:	4301      	orrs	r1, r0
1a000a74:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000a78:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000a7c:	2100      	movs	r1, #0
1a000a7e:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000a80:	3201      	adds	r2, #1
1a000a82:	2a05      	cmp	r2, #5
1a000a84:	d9e8      	bls.n	1a000a58 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a000a86:	bc70      	pop	{r4, r5, r6}
1a000a88:	4770      	bx	lr
1a000a8a:	4770      	bx	lr
1a000a8c:	1a001c48 	.word	0x1a001c48
1a000a90:	400f4000 	.word	0x400f4000

1a000a94 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000a94:	2300      	movs	r3, #0
1a000a96:	2b03      	cmp	r3, #3
1a000a98:	d816      	bhi.n	1a000ac8 <Board_TEC_Init+0x34>
{
1a000a9a:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000a9c:	490b      	ldr	r1, [pc, #44]	; (1a000acc <Board_TEC_Init+0x38>)
1a000a9e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000aa2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000aa6:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000aa8:	4c09      	ldr	r4, [pc, #36]	; (1a000ad0 <Board_TEC_Init+0x3c>)
1a000aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000aae:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000ab2:	2001      	movs	r0, #1
1a000ab4:	40a8      	lsls	r0, r5
1a000ab6:	ea21 0100 	bic.w	r1, r1, r0
1a000aba:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000abe:	3301      	adds	r3, #1
1a000ac0:	2b03      	cmp	r3, #3
1a000ac2:	d9eb      	bls.n	1a000a9c <Board_TEC_Init+0x8>
    }
}
1a000ac4:	bc30      	pop	{r4, r5}
1a000ac6:	4770      	bx	lr
1a000ac8:	4770      	bx	lr
1a000aca:	bf00      	nop
1a000acc:	1a001c40 	.word	0x1a001c40
1a000ad0:	400f4000 	.word	0x400f4000

1a000ad4 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000ad4:	2300      	movs	r3, #0
1a000ad6:	2b08      	cmp	r3, #8
1a000ad8:	d816      	bhi.n	1a000b08 <Board_GPIO_Init+0x34>
{
1a000ada:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000adc:	490b      	ldr	r1, [pc, #44]	; (1a000b0c <Board_GPIO_Init+0x38>)
1a000ade:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000ae2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000ae6:	784d      	ldrb	r5, [r1, #1]
1a000ae8:	4c09      	ldr	r4, [pc, #36]	; (1a000b10 <Board_GPIO_Init+0x3c>)
1a000aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000aee:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000af2:	2001      	movs	r0, #1
1a000af4:	40a8      	lsls	r0, r5
1a000af6:	ea21 0100 	bic.w	r1, r1, r0
1a000afa:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000afe:	3301      	adds	r3, #1
1a000b00:	2b08      	cmp	r3, #8
1a000b02:	d9eb      	bls.n	1a000adc <Board_GPIO_Init+0x8>
    }
}
1a000b04:	bc30      	pop	{r4, r5}
1a000b06:	4770      	bx	lr
1a000b08:	4770      	bx	lr
1a000b0a:	bf00      	nop
1a000b0c:	1a001c54 	.word	0x1a001c54
1a000b10:	400f4000 	.word	0x400f4000

1a000b14 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a000b14:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000b16:	4c0b      	ldr	r4, [pc, #44]	; (1a000b44 <Board_SPI_Init+0x30>)
1a000b18:	4620      	mov	r0, r4
1a000b1a:	f000 f8a7 	bl	1a000c6c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000b1e:	6863      	ldr	r3, [r4, #4]
1a000b20:	f023 0304 	bic.w	r3, r3, #4
1a000b24:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000b26:	6823      	ldr	r3, [r4, #0]
1a000b28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000b2c:	f043 0307 	orr.w	r3, r3, #7
1a000b30:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000b32:	4905      	ldr	r1, [pc, #20]	; (1a000b48 <Board_SPI_Init+0x34>)
1a000b34:	4620      	mov	r0, r4
1a000b36:	f000 f87a 	bl	1a000c2e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000b3a:	6863      	ldr	r3, [r4, #4]
1a000b3c:	f043 0302 	orr.w	r3, r3, #2
1a000b40:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a000b42:	bd10      	pop	{r4, pc}
1a000b44:	400c5000 	.word	0x400c5000
1a000b48:	000186a0 	.word	0x000186a0

1a000b4c <Board_I2C_Init>:
{
1a000b4c:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a000b4e:	2000      	movs	r0, #0
1a000b50:	f000 f8b8 	bl	1a000cc4 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000b54:	4b04      	ldr	r3, [pc, #16]	; (1a000b68 <Board_I2C_Init+0x1c>)
1a000b56:	f640 0208 	movw	r2, #2056	; 0x808
1a000b5a:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000b5e:	4903      	ldr	r1, [pc, #12]	; (1a000b6c <Board_I2C_Init+0x20>)
1a000b60:	2000      	movs	r0, #0
1a000b62:	f000 f8c1 	bl	1a000ce8 <Chip_I2C_SetClockRate>
}
1a000b66:	bd08      	pop	{r3, pc}
1a000b68:	40086000 	.word	0x40086000
1a000b6c:	000f4240 	.word	0x000f4240

1a000b70 <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a000b70:	b510      	push	{r4, lr}
1a000b72:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000b74:	4c08      	ldr	r4, [pc, #32]	; (1a000b98 <Board_ADC_Init+0x28>)
1a000b76:	4669      	mov	r1, sp
1a000b78:	4620      	mov	r0, r4
1a000b7a:	f000 f921 	bl	1a000dc0 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000b7e:	4a07      	ldr	r2, [pc, #28]	; (1a000b9c <Board_ADC_Init+0x2c>)
1a000b80:	4669      	mov	r1, sp
1a000b82:	4620      	mov	r0, r4
1a000b84:	f000 f93c 	bl	1a000e00 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000b88:	2200      	movs	r2, #0
1a000b8a:	4669      	mov	r1, sp
1a000b8c:	4620      	mov	r0, r4
1a000b8e:	f000 f950 	bl	1a000e32 <Chip_ADC_SetResolution>
}
1a000b92:	b002      	add	sp, #8
1a000b94:	bd10      	pop	{r4, pc}
1a000b96:	bf00      	nop
1a000b98:	400e3000 	.word	0x400e3000
1a000b9c:	00061a80 	.word	0x00061a80

1a000ba0 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000ba0:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000ba2:	4c07      	ldr	r4, [pc, #28]	; (1a000bc0 <Board_Debug_Init+0x20>)
1a000ba4:	4620      	mov	r0, r4
1a000ba6:	f000 fcdd 	bl	1a001564 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000baa:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000bae:	4620      	mov	r0, r4
1a000bb0:	f000 fd02 	bl	1a0015b8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000bb4:	2303      	movs	r3, #3
1a000bb6:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000bb8:	2301      	movs	r3, #1
1a000bba:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a000bbc:	bd10      	pop	{r4, pc}
1a000bbe:	bf00      	nop
1a000bc0:	400c1000 	.word	0x400c1000

1a000bc4 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000bc4:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000bc6:	f7ff ffeb 	bl	1a000ba0 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000bca:	4808      	ldr	r0, [pc, #32]	; (1a000bec <Board_Init+0x28>)
1a000bcc:	f000 f8a8 	bl	1a000d20 <Chip_GPIO_Init>

   Board_LED_Init();
1a000bd0:	f7ff ff3e 	bl	1a000a50 <Board_LED_Init>
   Board_TEC_Init();
1a000bd4:	f7ff ff5e 	bl	1a000a94 <Board_TEC_Init>
   Board_SPI_Init();
1a000bd8:	f7ff ff9c 	bl	1a000b14 <Board_SPI_Init>
   Board_GPIO_Init();
1a000bdc:	f7ff ff7a 	bl	1a000ad4 <Board_GPIO_Init>
   Board_I2C_Init();
1a000be0:	f7ff ffb4 	bl	1a000b4c <Board_I2C_Init>
   Board_ADC_Init();
1a000be4:	f7ff ffc4 	bl	1a000b70 <Board_ADC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a000be8:	bd08      	pop	{r3, pc}
1a000bea:	bf00      	nop
1a000bec:	400f4000 	.word	0x400f4000

1a000bf0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000bf0:	4b03      	ldr	r3, [pc, #12]	; (1a000c00 <Chip_SSP_GetClockIndex+0x10>)
1a000bf2:	4298      	cmp	r0, r3
1a000bf4:	d001      	beq.n	1a000bfa <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000bf6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000bf8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000bfa:	20a5      	movs	r0, #165	; 0xa5
1a000bfc:	4770      	bx	lr
1a000bfe:	bf00      	nop
1a000c00:	400c5000 	.word	0x400c5000

1a000c04 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000c04:	4b04      	ldr	r3, [pc, #16]	; (1a000c18 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000c06:	4298      	cmp	r0, r3
1a000c08:	d002      	beq.n	1a000c10 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000c0a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000c0e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000c10:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000c14:	4770      	bx	lr
1a000c16:	bf00      	nop
1a000c18:	400c5000 	.word	0x400c5000

1a000c1c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000c1c:	6803      	ldr	r3, [r0, #0]
1a000c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000c22:	0209      	lsls	r1, r1, #8
1a000c24:	b289      	uxth	r1, r1
1a000c26:	4319      	orrs	r1, r3
1a000c28:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000c2a:	6102      	str	r2, [r0, #16]
}
1a000c2c:	4770      	bx	lr

1a000c2e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000c2e:	b570      	push	{r4, r5, r6, lr}
1a000c30:	4606      	mov	r6, r0
1a000c32:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000c34:	f7ff ffe6 	bl	1a000c04 <Chip_SSP_GetPeriphClockIndex>
1a000c38:	f000 fc58 	bl	1a0014ec <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000c3c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000c3e:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a000c42:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a000c44:	e000      	b.n	1a000c48 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000c46:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a000c48:	42ab      	cmp	r3, r5
1a000c4a:	d90b      	bls.n	1a000c64 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000c4c:	1c4c      	adds	r4, r1, #1
1a000c4e:	fb02 f304 	mul.w	r3, r2, r4
1a000c52:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000c56:	429d      	cmp	r5, r3
1a000c58:	d2f6      	bcs.n	1a000c48 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a000c5a:	2cff      	cmp	r4, #255	; 0xff
1a000c5c:	d9f3      	bls.n	1a000c46 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a000c5e:	3202      	adds	r2, #2
				cr0_div = 0;
1a000c60:	2100      	movs	r1, #0
1a000c62:	e7f1      	b.n	1a000c48 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a000c64:	4630      	mov	r0, r6
1a000c66:	f7ff ffd9 	bl	1a000c1c <Chip_SSP_SetClockRate>
}
1a000c6a:	bd70      	pop	{r4, r5, r6, pc}

1a000c6c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000c6c:	b510      	push	{r4, lr}
1a000c6e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000c70:	f7ff ffbe 	bl	1a000bf0 <Chip_SSP_GetClockIndex>
1a000c74:	f000 fc20 	bl	1a0014b8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000c78:	4620      	mov	r0, r4
1a000c7a:	f7ff ffc3 	bl	1a000c04 <Chip_SSP_GetPeriphClockIndex>
1a000c7e:	f000 fc1b 	bl	1a0014b8 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000c82:	6863      	ldr	r3, [r4, #4]
1a000c84:	f023 0304 	bic.w	r3, r3, #4
1a000c88:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000c8a:	6823      	ldr	r3, [r4, #0]
1a000c8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000c90:	f043 0307 	orr.w	r3, r3, #7
1a000c94:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000c96:	4902      	ldr	r1, [pc, #8]	; (1a000ca0 <Chip_SSP_Init+0x34>)
1a000c98:	4620      	mov	r0, r4
1a000c9a:	f7ff ffc8 	bl	1a000c2e <Chip_SSP_SetBitRate>
}
1a000c9e:	bd10      	pop	{r4, pc}
1a000ca0:	000186a0 	.word	0x000186a0

1a000ca4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000ca4:	2901      	cmp	r1, #1
1a000ca6:	d109      	bne.n	1a000cbc <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000ca8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000cac:	0082      	lsls	r2, r0, #2
1a000cae:	4b04      	ldr	r3, [pc, #16]	; (1a000cc0 <Chip_I2C_EventHandler+0x1c>)
1a000cb0:	4413      	add	r3, r2
1a000cb2:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000cb4:	7d13      	ldrb	r3, [r2, #20]
1a000cb6:	b2db      	uxtb	r3, r3
1a000cb8:	2b04      	cmp	r3, #4
1a000cba:	d0fb      	beq.n	1a000cb4 <Chip_I2C_EventHandler+0x10>
}
1a000cbc:	4770      	bx	lr
1a000cbe:	bf00      	nop
1a000cc0:	10000090 	.word	0x10000090

1a000cc4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000cc4:	b570      	push	{r4, r5, r6, lr}
1a000cc6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000cc8:	4e06      	ldr	r6, [pc, #24]	; (1a000ce4 <Chip_I2C_Init+0x20>)
1a000cca:	00c4      	lsls	r4, r0, #3
1a000ccc:	1a22      	subs	r2, r4, r0
1a000cce:	0093      	lsls	r3, r2, #2
1a000cd0:	4433      	add	r3, r6
1a000cd2:	8898      	ldrh	r0, [r3, #4]
1a000cd4:	f000 fbf0 	bl	1a0014b8 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000cd8:	1b64      	subs	r4, r4, r5
1a000cda:	00a3      	lsls	r3, r4, #2
1a000cdc:	58f3      	ldr	r3, [r6, r3]
1a000cde:	226c      	movs	r2, #108	; 0x6c
1a000ce0:	619a      	str	r2, [r3, #24]
}
1a000ce2:	bd70      	pop	{r4, r5, r6, pc}
1a000ce4:	10000090 	.word	0x10000090

1a000ce8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000cec:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000cee:	4e0b      	ldr	r6, [pc, #44]	; (1a000d1c <Chip_I2C_SetClockRate+0x34>)
1a000cf0:	00c5      	lsls	r5, r0, #3
1a000cf2:	1a2b      	subs	r3, r5, r0
1a000cf4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000cf8:	eb06 0308 	add.w	r3, r6, r8
1a000cfc:	8898      	ldrh	r0, [r3, #4]
1a000cfe:	f000 fbf5 	bl	1a0014ec <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000d02:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000d06:	f856 3008 	ldr.w	r3, [r6, r8]
1a000d0a:	0842      	lsrs	r2, r0, #1
1a000d0c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000d0e:	f856 3008 	ldr.w	r3, [r6, r8]
1a000d12:	691a      	ldr	r2, [r3, #16]
1a000d14:	1a80      	subs	r0, r0, r2
1a000d16:	6158      	str	r0, [r3, #20]
}
1a000d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000d1c:	10000090 	.word	0x10000090

1a000d20 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000d20:	4770      	bx	lr
1a000d22:	Address 0x1a000d22 is out of bounds.


1a000d24 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000d24:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a000d26:	4b0f      	ldr	r3, [pc, #60]	; (1a000d64 <fpuInit+0x40>)
1a000d28:	681b      	ldr	r3, [r3, #0]
1a000d2a:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a000d2c:	4b0e      	ldr	r3, [pc, #56]	; (1a000d68 <fpuInit+0x44>)
1a000d2e:	681b      	ldr	r3, [r3, #0]
1a000d30:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000d32:	9a02      	ldr	r2, [sp, #8]
1a000d34:	4b0d      	ldr	r3, [pc, #52]	; (1a000d6c <fpuInit+0x48>)
1a000d36:	429a      	cmp	r2, r3
1a000d38:	d00c      	beq.n	1a000d54 <fpuInit+0x30>
1a000d3a:	2300      	movs	r3, #0

	if (vfpPresent) {
1a000d3c:	b143      	cbz	r3, 1a000d50 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a000d3e:	4a0c      	ldr	r2, [pc, #48]	; (1a000d70 <fpuInit+0x4c>)
1a000d40:	6813      	ldr	r3, [r2, #0]
1a000d42:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a000d44:	9b03      	ldr	r3, [sp, #12]
1a000d46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000d4a:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a000d4c:	9b03      	ldr	r3, [sp, #12]
1a000d4e:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a000d50:	b004      	add	sp, #16
1a000d52:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000d54:	9a01      	ldr	r2, [sp, #4]
1a000d56:	4b07      	ldr	r3, [pc, #28]	; (1a000d74 <fpuInit+0x50>)
1a000d58:	429a      	cmp	r2, r3
1a000d5a:	d001      	beq.n	1a000d60 <fpuInit+0x3c>
1a000d5c:	2300      	movs	r3, #0
1a000d5e:	e7ed      	b.n	1a000d3c <fpuInit+0x18>
1a000d60:	2301      	movs	r3, #1
1a000d62:	e7eb      	b.n	1a000d3c <fpuInit+0x18>
1a000d64:	e000ef40 	.word	0xe000ef40
1a000d68:	e000ef44 	.word	0xe000ef44
1a000d6c:	10110021 	.word	0x10110021
1a000d70:	e000ed88 	.word	0xe000ed88
1a000d74:	11000011 	.word	0x11000011

1a000d78 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000d78:	4b03      	ldr	r3, [pc, #12]	; (1a000d88 <Chip_ADC_GetClockIndex+0x10>)
1a000d7a:	4298      	cmp	r0, r3
1a000d7c:	d001      	beq.n	1a000d82 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000d7e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000d80:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000d82:	2004      	movs	r0, #4
1a000d84:	4770      	bx	lr
1a000d86:	bf00      	nop
1a000d88:	400e4000 	.word	0x400e4000

1a000d8c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000d8c:	b570      	push	{r4, r5, r6, lr}
1a000d8e:	460d      	mov	r5, r1
1a000d90:	4614      	mov	r4, r2
1a000d92:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000d94:	f7ff fff0 	bl	1a000d78 <Chip_ADC_GetClockIndex>
1a000d98:	f000 fba8 	bl	1a0014ec <Chip_Clock_GetRate>
	if (burstMode) {
1a000d9c:	b155      	cbz	r5, 1a000db4 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000d9e:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000da2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000da6:	0064      	lsls	r4, r4, #1
1a000da8:	fbb0 f0f4 	udiv	r0, r0, r4
1a000dac:	b2c0      	uxtb	r0, r0
1a000dae:	3801      	subs	r0, #1
	return div;
}
1a000db0:	b2c0      	uxtb	r0, r0
1a000db2:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000db4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000db8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000dbc:	e7f1      	b.n	1a000da2 <getClkDiv+0x16>
1a000dbe:	Address 0x1a000dbe is out of bounds.


1a000dc0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000dc0:	b538      	push	{r3, r4, r5, lr}
1a000dc2:	4605      	mov	r5, r0
1a000dc4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000dc6:	f7ff ffd7 	bl	1a000d78 <Chip_ADC_GetClockIndex>
1a000dca:	2301      	movs	r3, #1
1a000dcc:	461a      	mov	r2, r3
1a000dce:	4619      	mov	r1, r3
1a000dd0:	f000 fb54 	bl	1a00147c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000dd4:	2100      	movs	r1, #0
1a000dd6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000dd8:	4a08      	ldr	r2, [pc, #32]	; (1a000dfc <Chip_ADC_Init+0x3c>)
1a000dda:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000ddc:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000dde:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000de0:	230b      	movs	r3, #11
1a000de2:	4628      	mov	r0, r5
1a000de4:	f7ff ffd2 	bl	1a000d8c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000de8:	0200      	lsls	r0, r0, #8
1a000dea:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000dee:	7920      	ldrb	r0, [r4, #4]
1a000df0:	0440      	lsls	r0, r0, #17
1a000df2:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000df6:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000df8:	6028      	str	r0, [r5, #0]
}
1a000dfa:	bd38      	pop	{r3, r4, r5, pc}
1a000dfc:	00061a80 	.word	0x00061a80

1a000e00 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000e00:	b570      	push	{r4, r5, r6, lr}
1a000e02:	4605      	mov	r5, r0
1a000e04:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000e06:	6804      	ldr	r4, [r0, #0]
1a000e08:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000e0c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000e10:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000e12:	790b      	ldrb	r3, [r1, #4]
1a000e14:	f1c3 030b 	rsb	r3, r3, #11
1a000e18:	b2db      	uxtb	r3, r3
1a000e1a:	7949      	ldrb	r1, [r1, #5]
1a000e1c:	f7ff ffb6 	bl	1a000d8c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000e20:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000e24:	7933      	ldrb	r3, [r6, #4]
1a000e26:	045b      	lsls	r3, r3, #17
1a000e28:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000e2c:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000e2e:	602b      	str	r3, [r5, #0]
}
1a000e30:	bd70      	pop	{r4, r5, r6, pc}

1a000e32 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000e32:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000e34:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000e36:	680a      	ldr	r2, [r1, #0]
1a000e38:	f7ff ffe2 	bl	1a000e00 <Chip_ADC_SetSampleRate>
}
1a000e3c:	bd08      	pop	{r3, pc}
1a000e3e:	Address 0x1a000e3e is out of bounds.


1a000e40 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000e40:	b570      	push	{r4, r5, r6, lr}
1a000e42:	b08a      	sub	sp, #40	; 0x28
1a000e44:	4605      	mov	r5, r0
1a000e46:	460e      	mov	r6, r1
1a000e48:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000e4a:	f242 7310 	movw	r3, #10000	; 0x2710
1a000e4e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000e50:	2806      	cmp	r0, #6
1a000e52:	d018      	beq.n	1a000e86 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000e54:	2300      	movs	r3, #0
1a000e56:	2201      	movs	r2, #1
1a000e58:	4629      	mov	r1, r5
1a000e5a:	2004      	movs	r0, #4
1a000e5c:	f000 fac8 	bl	1a0013f0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000e60:	4a4a      	ldr	r2, [pc, #296]	; (1a000f8c <Chip_SetupCoreClock+0x14c>)
1a000e62:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000e64:	f043 0301 	orr.w	r3, r3, #1
1a000e68:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000e6a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000e6e:	a901      	add	r1, sp, #4
1a000e70:	4630      	mov	r0, r6
1a000e72:	f000 fa35 	bl	1a0012e0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000e76:	4b46      	ldr	r3, [pc, #280]	; (1a000f90 <Chip_SetupCoreClock+0x150>)
1a000e78:	429e      	cmp	r6, r3
1a000e7a:	d916      	bls.n	1a000eaa <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000e7c:	9b01      	ldr	r3, [sp, #4]
1a000e7e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000e82:	d003      	beq.n	1a000e8c <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000e84:	e7fe      	b.n	1a000e84 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000e86:	f000 f98d 	bl	1a0011a4 <Chip_Clock_EnableCrystal>
1a000e8a:	e7e3      	b.n	1a000e54 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000e8c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000e90:	d005      	beq.n	1a000e9e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000e96:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000e98:	2500      	movs	r5, #0
			direct = 1;
1a000e9a:	2601      	movs	r6, #1
1a000e9c:	e007      	b.n	1a000eae <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000e9e:	9b04      	ldr	r3, [sp, #16]
1a000ea0:	3301      	adds	r3, #1
1a000ea2:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000ea4:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000ea6:	2600      	movs	r6, #0
1a000ea8:	e001      	b.n	1a000eae <Chip_SetupCoreClock+0x6e>
1a000eaa:	2500      	movs	r5, #0
1a000eac:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000eae:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000eb2:	9b01      	ldr	r3, [sp, #4]
1a000eb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000eb8:	9a05      	ldr	r2, [sp, #20]
1a000eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000ebe:	9a03      	ldr	r2, [sp, #12]
1a000ec0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000ec4:	9a04      	ldr	r2, [sp, #16]
1a000ec6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000eca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000ece:	4a2f      	ldr	r2, [pc, #188]	; (1a000f8c <Chip_SetupCoreClock+0x14c>)
1a000ed0:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000ed2:	4b2e      	ldr	r3, [pc, #184]	; (1a000f8c <Chip_SetupCoreClock+0x14c>)
1a000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000ed6:	f013 0f01 	tst.w	r3, #1
1a000eda:	d0fa      	beq.n	1a000ed2 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000edc:	2300      	movs	r3, #0
1a000ede:	2201      	movs	r2, #1
1a000ee0:	2109      	movs	r1, #9
1a000ee2:	2004      	movs	r0, #4
1a000ee4:	f000 fa84 	bl	1a0013f0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000ee8:	b306      	cbz	r6, 1a000f2c <Chip_SetupCoreClock+0xec>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000eea:	f242 7310 	movw	r3, #10000	; 0x2710
1a000eee:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000ef2:	1e5a      	subs	r2, r3, #1
1a000ef4:	9209      	str	r2, [sp, #36]	; 0x24
1a000ef6:	2b00      	cmp	r3, #0
1a000ef8:	d1fa      	bne.n	1a000ef0 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000efa:	9b01      	ldr	r3, [sp, #4]
1a000efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000f00:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000f02:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000f06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000f0a:	9a05      	ldr	r2, [sp, #20]
1a000f0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000f10:	9a03      	ldr	r2, [sp, #12]
1a000f12:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000f16:	9a04      	ldr	r2, [sp, #16]
1a000f18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000f20:	4a1a      	ldr	r2, [pc, #104]	; (1a000f8c <Chip_SetupCoreClock+0x14c>)
1a000f22:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000f24:	2c00      	cmp	r4, #0
1a000f26:	d12e      	bne.n	1a000f86 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000f28:	b00a      	add	sp, #40	; 0x28
1a000f2a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000f2c:	2d00      	cmp	r5, #0
1a000f2e:	d0f9      	beq.n	1a000f24 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000f30:	f242 7310 	movw	r3, #10000	; 0x2710
1a000f34:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000f38:	1e5a      	subs	r2, r3, #1
1a000f3a:	9209      	str	r2, [sp, #36]	; 0x24
1a000f3c:	2b00      	cmp	r3, #0
1a000f3e:	d1fa      	bne.n	1a000f36 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000f40:	9b04      	ldr	r3, [sp, #16]
1a000f42:	1e5a      	subs	r2, r3, #1
1a000f44:	9204      	str	r2, [sp, #16]
1a000f46:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000f4a:	9b01      	ldr	r3, [sp, #4]
1a000f4c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000f50:	9905      	ldr	r1, [sp, #20]
1a000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000f56:	9903      	ldr	r1, [sp, #12]
1a000f58:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000f5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000f64:	4a09      	ldr	r2, [pc, #36]	; (1a000f8c <Chip_SetupCoreClock+0x14c>)
1a000f66:	6453      	str	r3, [r2, #68]	; 0x44
1a000f68:	e7dc      	b.n	1a000f24 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000f6a:	480a      	ldr	r0, [pc, #40]	; (1a000f94 <Chip_SetupCoreClock+0x154>)
1a000f6c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000f70:	78cb      	ldrb	r3, [r1, #3]
1a000f72:	788a      	ldrb	r2, [r1, #2]
1a000f74:	7849      	ldrb	r1, [r1, #1]
1a000f76:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000f7a:	f000 fa39 	bl	1a0013f0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000f7e:	3401      	adds	r4, #1
1a000f80:	2c11      	cmp	r4, #17
1a000f82:	d9f2      	bls.n	1a000f6a <Chip_SetupCoreClock+0x12a>
1a000f84:	e7d0      	b.n	1a000f28 <Chip_SetupCoreClock+0xe8>
1a000f86:	2400      	movs	r4, #0
1a000f88:	e7fa      	b.n	1a000f80 <Chip_SetupCoreClock+0x140>
1a000f8a:	bf00      	nop
1a000f8c:	40050000 	.word	0x40050000
1a000f90:	068e7780 	.word	0x068e7780
1a000f94:	1a001c6c 	.word	0x1a001c6c

1a000f98 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000f98:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000f9a:	2069      	movs	r0, #105	; 0x69
1a000f9c:	f000 faa6 	bl	1a0014ec <Chip_Clock_GetRate>
1a000fa0:	4b01      	ldr	r3, [pc, #4]	; (1a000fa8 <SystemCoreClockUpdate+0x10>)
1a000fa2:	6018      	str	r0, [r3, #0]
}
1a000fa4:	bd08      	pop	{r3, pc}
1a000fa6:	bf00      	nop
1a000fa8:	100000f4 	.word	0x100000f4

1a000fac <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000fac:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000fae:	680b      	ldr	r3, [r1, #0]
1a000fb0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000fb4:	d002      	beq.n	1a000fbc <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000fba:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000fbc:	4607      	mov	r7, r0
1a000fbe:	2501      	movs	r5, #1
1a000fc0:	e03a      	b.n	1a001038 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000fc2:	694b      	ldr	r3, [r1, #20]
1a000fc4:	fb03 f302 	mul.w	r3, r3, r2
1a000fc8:	fbb3 f3f5 	udiv	r3, r3, r5
1a000fcc:	e01c      	b.n	1a001008 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000fce:	461c      	mov	r4, r3
	if (val < 0)
1a000fd0:	ebb0 0c04 	subs.w	ip, r0, r4
1a000fd4:	d427      	bmi.n	1a001026 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000fd6:	4567      	cmp	r7, ip
1a000fd8:	d906      	bls.n	1a000fe8 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000fda:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000fdc:	1c77      	adds	r7, r6, #1
1a000fde:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000fe0:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000fe2:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000fe4:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000fe6:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000fe8:	3201      	adds	r2, #1
1a000fea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000fee:	dc1d      	bgt.n	1a00102c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000ff0:	680c      	ldr	r4, [r1, #0]
1a000ff2:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000ff6:	d0e4      	beq.n	1a000fc2 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000ff8:	1c73      	adds	r3, r6, #1
1a000ffa:	fa02 fc03 	lsl.w	ip, r2, r3
1a000ffe:	694b      	ldr	r3, [r1, #20]
1a001000:	fb03 f30c 	mul.w	r3, r3, ip
1a001004:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001008:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001044 <pll_calc_divs+0x98>
1a00100c:	4563      	cmp	r3, ip
1a00100e:	d9eb      	bls.n	1a000fe8 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001010:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001048 <pll_calc_divs+0x9c>
1a001014:	4563      	cmp	r3, ip
1a001016:	d809      	bhi.n	1a00102c <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001018:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00101c:	d1d7      	bne.n	1a000fce <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00101e:	1c74      	adds	r4, r6, #1
1a001020:	fa23 f404 	lsr.w	r4, r3, r4
1a001024:	e7d4      	b.n	1a000fd0 <pll_calc_divs+0x24>
		return -val;
1a001026:	f1cc 0c00 	rsb	ip, ip, #0
1a00102a:	e7d4      	b.n	1a000fd6 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a00102c:	3601      	adds	r6, #1
1a00102e:	2e03      	cmp	r6, #3
1a001030:	dc01      	bgt.n	1a001036 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001032:	2201      	movs	r2, #1
1a001034:	e7d9      	b.n	1a000fea <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a001036:	3501      	adds	r5, #1
1a001038:	2d04      	cmp	r5, #4
1a00103a:	dc01      	bgt.n	1a001040 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a00103c:	2600      	movs	r6, #0
1a00103e:	e7f6      	b.n	1a00102e <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001040:	bcf0      	pop	{r4, r5, r6, r7}
1a001042:	4770      	bx	lr
1a001044:	094c5eff 	.word	0x094c5eff
1a001048:	1312d000 	.word	0x1312d000

1a00104c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00104c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00104e:	b099      	sub	sp, #100	; 0x64
1a001050:	4605      	mov	r5, r0
1a001052:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001054:	225c      	movs	r2, #92	; 0x5c
1a001056:	2100      	movs	r1, #0
1a001058:	a801      	add	r0, sp, #4
1a00105a:	f000 fd05 	bl	1a001a68 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00105e:	2380      	movs	r3, #128	; 0x80
1a001060:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001062:	6963      	ldr	r3, [r4, #20]
1a001064:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001066:	7923      	ldrb	r3, [r4, #4]
1a001068:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00106c:	4669      	mov	r1, sp
1a00106e:	4628      	mov	r0, r5
1a001070:	f7ff ff9c 	bl	1a000fac <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001074:	9b06      	ldr	r3, [sp, #24]
1a001076:	42ab      	cmp	r3, r5
1a001078:	d027      	beq.n	1a0010ca <pll_get_frac+0x7e>
	if (val < 0)
1a00107a:	1aeb      	subs	r3, r5, r3
1a00107c:	d42e      	bmi.n	1a0010dc <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00107e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001080:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001086:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001088:	6963      	ldr	r3, [r4, #20]
1a00108a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00108c:	7923      	ldrb	r3, [r4, #4]
1a00108e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001092:	a910      	add	r1, sp, #64	; 0x40
1a001094:	4628      	mov	r0, r5
1a001096:	f7ff ff89 	bl	1a000fac <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00109a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00109c:	42ab      	cmp	r3, r5
1a00109e:	d01f      	beq.n	1a0010e0 <pll_get_frac+0x94>
	if (val < 0)
1a0010a0:	1aeb      	subs	r3, r5, r3
1a0010a2:	d425      	bmi.n	1a0010f0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0010a4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0010a6:	4b2b      	ldr	r3, [pc, #172]	; (1a001154 <pll_get_frac+0x108>)
1a0010a8:	429d      	cmp	r5, r3
1a0010aa:	d923      	bls.n	1a0010f4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0010ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0010ae:	1aed      	subs	r5, r5, r3
1a0010b0:	d433      	bmi.n	1a00111a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0010b2:	42ae      	cmp	r6, r5
1a0010b4:	dc3b      	bgt.n	1a00112e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0010b6:	42be      	cmp	r6, r7
1a0010b8:	dc31      	bgt.n	1a00111e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0010ba:	466d      	mov	r5, sp
1a0010bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0010be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0010c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0010c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0010c8:	e006      	b.n	1a0010d8 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0010ca:	466d      	mov	r5, sp
1a0010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0010d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0010d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0010d8:	b019      	add	sp, #100	; 0x64
1a0010da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0010dc:	425b      	negs	r3, r3
1a0010de:	e7ce      	b.n	1a00107e <pll_get_frac+0x32>
		*ppll = pll[2];
1a0010e0:	ad10      	add	r5, sp, #64	; 0x40
1a0010e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0010e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0010e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0010ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0010ee:	e7f3      	b.n	1a0010d8 <pll_get_frac+0x8c>
		return -val;
1a0010f0:	425b      	negs	r3, r3
1a0010f2:	e7d7      	b.n	1a0010a4 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0010f4:	2340      	movs	r3, #64	; 0x40
1a0010f6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0010f8:	6963      	ldr	r3, [r4, #20]
1a0010fa:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0010fc:	a908      	add	r1, sp, #32
1a0010fe:	4628      	mov	r0, r5
1a001100:	f7ff ff54 	bl	1a000fac <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001106:	42ab      	cmp	r3, r5
1a001108:	d1d0      	bne.n	1a0010ac <pll_get_frac+0x60>
			*ppll = pll[1];
1a00110a:	ad08      	add	r5, sp, #32
1a00110c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00110e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001110:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001118:	e7de      	b.n	1a0010d8 <pll_get_frac+0x8c>
		return -val;
1a00111a:	426d      	negs	r5, r5
1a00111c:	e7c9      	b.n	1a0010b2 <pll_get_frac+0x66>
			*ppll = pll[2];
1a00111e:	ad10      	add	r5, sp, #64	; 0x40
1a001120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001124:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00112c:	e7d4      	b.n	1a0010d8 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00112e:	42af      	cmp	r7, r5
1a001130:	db07      	blt.n	1a001142 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001132:	ad08      	add	r5, sp, #32
1a001134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001138:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00113c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001140:	e7ca      	b.n	1a0010d8 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001142:	ad10      	add	r5, sp, #64	; 0x40
1a001144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001148:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00114c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001150:	e7c2      	b.n	1a0010d8 <pll_get_frac+0x8c>
1a001152:	bf00      	nop
1a001154:	068e7780 	.word	0x068e7780

1a001158 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001158:	b430      	push	{r4, r5}
1a00115a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00115c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00115e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001160:	e000      	b.n	1a001164 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001162:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001164:	281c      	cmp	r0, #28
1a001166:	d118      	bne.n	1a00119a <Chip_Clock_FindBaseClock+0x42>
1a001168:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00116c:	0051      	lsls	r1, r2, #1
1a00116e:	4a0c      	ldr	r2, [pc, #48]	; (1a0011a0 <Chip_Clock_FindBaseClock+0x48>)
1a001170:	440a      	add	r2, r1
1a001172:	7914      	ldrb	r4, [r2, #4]
1a001174:	4284      	cmp	r4, r0
1a001176:	d010      	beq.n	1a00119a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001178:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a00117c:	004a      	lsls	r2, r1, #1
1a00117e:	4908      	ldr	r1, [pc, #32]	; (1a0011a0 <Chip_Clock_FindBaseClock+0x48>)
1a001180:	5a8a      	ldrh	r2, [r1, r2]
1a001182:	42aa      	cmp	r2, r5
1a001184:	d8ed      	bhi.n	1a001162 <Chip_Clock_FindBaseClock+0xa>
1a001186:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00118a:	0051      	lsls	r1, r2, #1
1a00118c:	4a04      	ldr	r2, [pc, #16]	; (1a0011a0 <Chip_Clock_FindBaseClock+0x48>)
1a00118e:	440a      	add	r2, r1
1a001190:	8852      	ldrh	r2, [r2, #2]
1a001192:	42aa      	cmp	r2, r5
1a001194:	d3e5      	bcc.n	1a001162 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001196:	4620      	mov	r0, r4
1a001198:	e7e4      	b.n	1a001164 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00119a:	bc30      	pop	{r4, r5}
1a00119c:	4770      	bx	lr
1a00119e:	bf00      	nop
1a0011a0:	1a001cc0 	.word	0x1a001cc0

1a0011a4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0011a4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0011aa:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0011ac:	4a0d      	ldr	r2, [pc, #52]	; (1a0011e4 <Chip_Clock_EnableCrystal+0x40>)
1a0011ae:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0011b0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0011b4:	6992      	ldr	r2, [r2, #24]
1a0011b6:	428a      	cmp	r2, r1
1a0011b8:	d001      	beq.n	1a0011be <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0011ba:	4a0a      	ldr	r2, [pc, #40]	; (1a0011e4 <Chip_Clock_EnableCrystal+0x40>)
1a0011bc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0011be:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0011c2:	4a09      	ldr	r2, [pc, #36]	; (1a0011e8 <Chip_Clock_EnableCrystal+0x44>)
1a0011c4:	6811      	ldr	r1, [r2, #0]
1a0011c6:	4a09      	ldr	r2, [pc, #36]	; (1a0011ec <Chip_Clock_EnableCrystal+0x48>)
1a0011c8:	4291      	cmp	r1, r2
1a0011ca:	d901      	bls.n	1a0011d0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0011cc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0011d0:	4a04      	ldr	r2, [pc, #16]	; (1a0011e4 <Chip_Clock_EnableCrystal+0x40>)
1a0011d2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0011d4:	9b01      	ldr	r3, [sp, #4]
1a0011d6:	1e5a      	subs	r2, r3, #1
1a0011d8:	9201      	str	r2, [sp, #4]
1a0011da:	2b00      	cmp	r3, #0
1a0011dc:	d1fa      	bne.n	1a0011d4 <Chip_Clock_EnableCrystal+0x30>
}
1a0011de:	b002      	add	sp, #8
1a0011e0:	4770      	bx	lr
1a0011e2:	bf00      	nop
1a0011e4:	40050000 	.word	0x40050000
1a0011e8:	1a001c68 	.word	0x1a001c68
1a0011ec:	01312cff 	.word	0x01312cff

1a0011f0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0011f0:	3012      	adds	r0, #18
1a0011f2:	4b05      	ldr	r3, [pc, #20]	; (1a001208 <Chip_Clock_GetDividerSource+0x18>)
1a0011f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0011f8:	f010 0f01 	tst.w	r0, #1
1a0011fc:	d102      	bne.n	1a001204 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0011fe:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001202:	4770      	bx	lr
		return CLKINPUT_PD;
1a001204:	2011      	movs	r0, #17
}
1a001206:	4770      	bx	lr
1a001208:	40050000 	.word	0x40050000

1a00120c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00120c:	f100 0212 	add.w	r2, r0, #18
1a001210:	4b03      	ldr	r3, [pc, #12]	; (1a001220 <Chip_Clock_GetDividerDivisor+0x14>)
1a001212:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001216:	4b03      	ldr	r3, [pc, #12]	; (1a001224 <Chip_Clock_GetDividerDivisor+0x18>)
1a001218:	5c18      	ldrb	r0, [r3, r0]
}
1a00121a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00121e:	4770      	bx	lr
1a001220:	40050000 	.word	0x40050000
1a001224:	1a001cb8 	.word	0x1a001cb8

1a001228 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001228:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00122a:	2810      	cmp	r0, #16
1a00122c:	d80a      	bhi.n	1a001244 <Chip_Clock_GetClockInputHz+0x1c>
1a00122e:	e8df f000 	tbb	[pc, r0]
1a001232:	0b44      	.short	0x0b44
1a001234:	0921180d 	.word	0x0921180d
1a001238:	2d2a2724 	.word	0x2d2a2724
1a00123c:	34300909 	.word	0x34300909
1a001240:	3c38      	.short	0x3c38
1a001242:	40          	.byte	0x40
1a001243:	00          	.byte	0x00
	uint32_t rate = 0;
1a001244:	2000      	movs	r0, #0
1a001246:	e03a      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001248:	481e      	ldr	r0, [pc, #120]	; (1a0012c4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00124a:	e038      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00124c:	4b1e      	ldr	r3, [pc, #120]	; (1a0012c8 <Chip_Clock_GetClockInputHz+0xa0>)
1a00124e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001252:	f003 0307 	and.w	r3, r3, #7
1a001256:	2b04      	cmp	r3, #4
1a001258:	d001      	beq.n	1a00125e <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00125a:	481c      	ldr	r0, [pc, #112]	; (1a0012cc <Chip_Clock_GetClockInputHz+0xa4>)
1a00125c:	e02f      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00125e:	2000      	movs	r0, #0
1a001260:	e02d      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001262:	4b19      	ldr	r3, [pc, #100]	; (1a0012c8 <Chip_Clock_GetClockInputHz+0xa0>)
1a001264:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001268:	f003 0307 	and.w	r3, r3, #7
1a00126c:	2b04      	cmp	r3, #4
1a00126e:	d027      	beq.n	1a0012c0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001270:	4816      	ldr	r0, [pc, #88]	; (1a0012cc <Chip_Clock_GetClockInputHz+0xa4>)
1a001272:	e024      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001274:	4b16      	ldr	r3, [pc, #88]	; (1a0012d0 <Chip_Clock_GetClockInputHz+0xa8>)
1a001276:	6818      	ldr	r0, [r3, #0]
		break;
1a001278:	e021      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00127a:	4b16      	ldr	r3, [pc, #88]	; (1a0012d4 <Chip_Clock_GetClockInputHz+0xac>)
1a00127c:	6818      	ldr	r0, [r3, #0]
		break;
1a00127e:	e01e      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001280:	4b15      	ldr	r3, [pc, #84]	; (1a0012d8 <Chip_Clock_GetClockInputHz+0xb0>)
1a001282:	6818      	ldr	r0, [r3, #0]
		break;
1a001284:	e01b      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001286:	4b14      	ldr	r3, [pc, #80]	; (1a0012d8 <Chip_Clock_GetClockInputHz+0xb0>)
1a001288:	6858      	ldr	r0, [r3, #4]
		break;
1a00128a:	e018      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00128c:	f000 f868 	bl	1a001360 <Chip_Clock_GetMainPLLHz>
		break;
1a001290:	e015      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001292:	2100      	movs	r1, #0
1a001294:	f000 f89a 	bl	1a0013cc <Chip_Clock_GetDivRate>
		break;
1a001298:	e011      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00129a:	2101      	movs	r1, #1
1a00129c:	f000 f896 	bl	1a0013cc <Chip_Clock_GetDivRate>
		break;
1a0012a0:	e00d      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0012a2:	2102      	movs	r1, #2
1a0012a4:	f000 f892 	bl	1a0013cc <Chip_Clock_GetDivRate>
		break;
1a0012a8:	e009      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0012aa:	2103      	movs	r1, #3
1a0012ac:	f000 f88e 	bl	1a0013cc <Chip_Clock_GetDivRate>
		break;
1a0012b0:	e005      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0012b2:	2104      	movs	r1, #4
1a0012b4:	f000 f88a 	bl	1a0013cc <Chip_Clock_GetDivRate>
		break;
1a0012b8:	e001      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0012ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0012be:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0012c0:	4806      	ldr	r0, [pc, #24]	; (1a0012dc <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0012c2:	e7fc      	b.n	1a0012be <Chip_Clock_GetClockInputHz+0x96>
1a0012c4:	00b71b00 	.word	0x00b71b00
1a0012c8:	40043000 	.word	0x40043000
1a0012cc:	017d7840 	.word	0x017d7840
1a0012d0:	1a001c3c 	.word	0x1a001c3c
1a0012d4:	1a001c68 	.word	0x1a001c68
1a0012d8:	100000e0 	.word	0x100000e0
1a0012dc:	02faf080 	.word	0x02faf080

1a0012e0 <Chip_Clock_CalcMainPLLValue>:
{
1a0012e0:	b538      	push	{r3, r4, r5, lr}
1a0012e2:	4605      	mov	r5, r0
1a0012e4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0012e6:	7908      	ldrb	r0, [r1, #4]
1a0012e8:	f7ff ff9e 	bl	1a001228 <Chip_Clock_GetClockInputHz>
1a0012ec:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0012ee:	4b19      	ldr	r3, [pc, #100]	; (1a001354 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0012f0:	442b      	add	r3, r5
1a0012f2:	4a19      	ldr	r2, [pc, #100]	; (1a001358 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0012f4:	4293      	cmp	r3, r2
1a0012f6:	d821      	bhi.n	1a00133c <Chip_Clock_CalcMainPLLValue+0x5c>
1a0012f8:	b318      	cbz	r0, 1a001342 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0012fa:	2380      	movs	r3, #128	; 0x80
1a0012fc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0012fe:	2300      	movs	r3, #0
1a001300:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001302:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001304:	fbb5 f3f0 	udiv	r3, r5, r0
1a001308:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00130a:	4a14      	ldr	r2, [pc, #80]	; (1a00135c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a00130c:	4295      	cmp	r5, r2
1a00130e:	d903      	bls.n	1a001318 <Chip_Clock_CalcMainPLLValue+0x38>
1a001310:	fb03 f000 	mul.w	r0, r3, r0
1a001314:	42a8      	cmp	r0, r5
1a001316:	d007      	beq.n	1a001328 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001318:	4621      	mov	r1, r4
1a00131a:	4628      	mov	r0, r5
1a00131c:	f7ff fe96 	bl	1a00104c <pll_get_frac>
		if (!ppll->nsel) {
1a001320:	68a3      	ldr	r3, [r4, #8]
1a001322:	b18b      	cbz	r3, 1a001348 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001324:	3b01      	subs	r3, #1
1a001326:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001328:	6923      	ldr	r3, [r4, #16]
1a00132a:	b183      	cbz	r3, 1a00134e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a00132c:	68e2      	ldr	r2, [r4, #12]
1a00132e:	b10a      	cbz	r2, 1a001334 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001330:	3a01      	subs	r2, #1
1a001332:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001334:	3b01      	subs	r3, #1
1a001336:	6123      	str	r3, [r4, #16]
	return 0;
1a001338:	2000      	movs	r0, #0
}
1a00133a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a00133c:	f04f 30ff 	mov.w	r0, #4294967295
1a001340:	e7fb      	b.n	1a00133a <Chip_Clock_CalcMainPLLValue+0x5a>
1a001342:	f04f 30ff 	mov.w	r0, #4294967295
1a001346:	e7f8      	b.n	1a00133a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001348:	f04f 30ff 	mov.w	r0, #4294967295
1a00134c:	e7f5      	b.n	1a00133a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00134e:	f04f 30ff 	mov.w	r0, #4294967295
1a001352:	e7f2      	b.n	1a00133a <Chip_Clock_CalcMainPLLValue+0x5a>
1a001354:	ff6b3a10 	.word	0xff6b3a10
1a001358:	0b940510 	.word	0x0b940510
1a00135c:	094c5eff 	.word	0x094c5eff

1a001360 <Chip_Clock_GetMainPLLHz>:
{
1a001360:	b530      	push	{r4, r5, lr}
1a001362:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001364:	4d17      	ldr	r5, [pc, #92]	; (1a0013c4 <Chip_Clock_GetMainPLLHz+0x64>)
1a001366:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001368:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00136c:	f7ff ff5c 	bl	1a001228 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001370:	4b15      	ldr	r3, [pc, #84]	; (1a0013c8 <Chip_Clock_GetMainPLLHz+0x68>)
1a001372:	681b      	ldr	r3, [r3, #0]
1a001374:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001376:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001378:	f013 0f01 	tst.w	r3, #1
1a00137c:	d020      	beq.n	1a0013c0 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a00137e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001382:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001386:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00138a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00138e:	3301      	adds	r3, #1
	n = nsel + 1;
1a001390:	3201      	adds	r2, #1
	p = ptab[psel];
1a001392:	f10d 0c08 	add.w	ip, sp, #8
1a001396:	4461      	add	r1, ip
1a001398:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a00139c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0013a0:	d108      	bne.n	1a0013b4 <Chip_Clock_GetMainPLLHz+0x54>
1a0013a2:	b93d      	cbnz	r5, 1a0013b4 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0013a4:	0049      	lsls	r1, r1, #1
1a0013a6:	fbb3 f3f1 	udiv	r3, r3, r1
1a0013aa:	fbb0 f0f2 	udiv	r0, r0, r2
1a0013ae:	fb00 f003 	mul.w	r0, r0, r3
1a0013b2:	e003      	b.n	1a0013bc <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0013b4:	fbb0 f0f2 	udiv	r0, r0, r2
1a0013b8:	fb03 f000 	mul.w	r0, r3, r0
}
1a0013bc:	b003      	add	sp, #12
1a0013be:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0013c0:	2000      	movs	r0, #0
1a0013c2:	e7fb      	b.n	1a0013bc <Chip_Clock_GetMainPLLHz+0x5c>
1a0013c4:	40050000 	.word	0x40050000
1a0013c8:	1a001cb4 	.word	0x1a001cb4

1a0013cc <Chip_Clock_GetDivRate>:
{
1a0013cc:	b538      	push	{r3, r4, r5, lr}
1a0013ce:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0013d0:	4608      	mov	r0, r1
1a0013d2:	f7ff ff0d 	bl	1a0011f0 <Chip_Clock_GetDividerSource>
1a0013d6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0013d8:	4620      	mov	r0, r4
1a0013da:	f7ff ff17 	bl	1a00120c <Chip_Clock_GetDividerDivisor>
1a0013de:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0013e0:	4628      	mov	r0, r5
1a0013e2:	f7ff ff21 	bl	1a001228 <Chip_Clock_GetClockInputHz>
1a0013e6:	3401      	adds	r4, #1
}
1a0013e8:	fbb0 f0f4 	udiv	r0, r0, r4
1a0013ec:	bd38      	pop	{r3, r4, r5, pc}
1a0013ee:	Address 0x1a0013ee is out of bounds.


1a0013f0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0013f0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0013f2:	f100 0416 	add.w	r4, r0, #22
1a0013f6:	00a4      	lsls	r4, r4, #2
1a0013f8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0013fc:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001400:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001402:	281b      	cmp	r0, #27
1a001404:	d813      	bhi.n	1a00142e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001406:	2911      	cmp	r1, #17
1a001408:	d01a      	beq.n	1a001440 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00140a:	4d0e      	ldr	r5, [pc, #56]	; (1a001444 <Chip_Clock_SetBaseClock+0x54>)
1a00140c:	4025      	ands	r5, r4

			if (autoblocken) {
1a00140e:	b10a      	cbz	r2, 1a001414 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001410:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001414:	b10b      	cbz	r3, 1a00141a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001416:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00141a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00141e:	3016      	adds	r0, #22
1a001420:	0080      	lsls	r0, r0, #2
1a001422:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001426:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00142a:	6045      	str	r5, [r0, #4]
1a00142c:	e008      	b.n	1a001440 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00142e:	f044 0401 	orr.w	r4, r4, #1
1a001432:	3016      	adds	r0, #22
1a001434:	0080      	lsls	r0, r0, #2
1a001436:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00143a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00143e:	6044      	str	r4, [r0, #4]
	}
}
1a001440:	bc30      	pop	{r4, r5}
1a001442:	4770      	bx	lr
1a001444:	e0fff7fe 	.word	0xe0fff7fe

1a001448 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001448:	281b      	cmp	r0, #27
1a00144a:	d80c      	bhi.n	1a001466 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00144c:	3016      	adds	r0, #22
1a00144e:	0080      	lsls	r0, r0, #2
1a001450:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001454:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001458:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00145a:	f010 0f01 	tst.w	r0, #1
1a00145e:	d104      	bne.n	1a00146a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001460:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001464:	4770      	bx	lr
		return CLKINPUT_PD;
1a001466:	2011      	movs	r0, #17
1a001468:	4770      	bx	lr
		return CLKINPUT_PD;
1a00146a:	2011      	movs	r0, #17
}
1a00146c:	4770      	bx	lr

1a00146e <Chip_Clock_GetBaseClocktHz>:
{
1a00146e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001470:	f7ff ffea 	bl	1a001448 <Chip_Clock_GetBaseClock>
1a001474:	f7ff fed8 	bl	1a001228 <Chip_Clock_GetClockInputHz>
}
1a001478:	bd08      	pop	{r3, pc}
1a00147a:	Address 0x1a00147a is out of bounds.


1a00147c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00147c:	b971      	cbnz	r1, 1a00149c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a00147e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001480:	b10a      	cbz	r2, 1a001486 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001482:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001486:	2b02      	cmp	r3, #2
1a001488:	d00a      	beq.n	1a0014a0 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00148a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00148e:	d30a      	bcc.n	1a0014a6 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001490:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001494:	4b06      	ldr	r3, [pc, #24]	; (1a0014b0 <Chip_Clock_EnableOpts+0x34>)
1a001496:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00149a:	4770      	bx	lr
		reg |= (1 << 1);
1a00149c:	2103      	movs	r1, #3
1a00149e:	e7ef      	b.n	1a001480 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0014a0:	f041 0120 	orr.w	r1, r1, #32
1a0014a4:	e7f1      	b.n	1a00148a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0014a6:	3020      	adds	r0, #32
1a0014a8:	4b02      	ldr	r3, [pc, #8]	; (1a0014b4 <Chip_Clock_EnableOpts+0x38>)
1a0014aa:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0014ae:	4770      	bx	lr
1a0014b0:	40052000 	.word	0x40052000
1a0014b4:	40051000 	.word	0x40051000

1a0014b8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0014b8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0014bc:	d309      	bcc.n	1a0014d2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0014be:	4a09      	ldr	r2, [pc, #36]	; (1a0014e4 <Chip_Clock_Enable+0x2c>)
1a0014c0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0014c4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0014c8:	f043 0301 	orr.w	r3, r3, #1
1a0014cc:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0014d0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0014d2:	4a05      	ldr	r2, [pc, #20]	; (1a0014e8 <Chip_Clock_Enable+0x30>)
1a0014d4:	3020      	adds	r0, #32
1a0014d6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0014da:	f043 0301 	orr.w	r3, r3, #1
1a0014de:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0014e2:	4770      	bx	lr
1a0014e4:	40052000 	.word	0x40052000
1a0014e8:	40051000 	.word	0x40051000

1a0014ec <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0014ec:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0014ee:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0014f2:	d309      	bcc.n	1a001508 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0014f4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0014f8:	4a0d      	ldr	r2, [pc, #52]	; (1a001530 <Chip_Clock_GetRate+0x44>)
1a0014fa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0014fe:	f014 0f01 	tst.w	r4, #1
1a001502:	d107      	bne.n	1a001514 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001504:	2000      	movs	r0, #0
	}

	return rate;
}
1a001506:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001508:	f100 0320 	add.w	r3, r0, #32
1a00150c:	4a09      	ldr	r2, [pc, #36]	; (1a001534 <Chip_Clock_GetRate+0x48>)
1a00150e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001512:	e7f4      	b.n	1a0014fe <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001514:	f7ff fe20 	bl	1a001158 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001518:	f7ff ffa9 	bl	1a00146e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00151c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001520:	d103      	bne.n	1a00152a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001522:	2301      	movs	r3, #1
		rate = rate / div;
1a001524:	fbb0 f0f3 	udiv	r0, r0, r3
1a001528:	e7ed      	b.n	1a001506 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00152a:	2302      	movs	r3, #2
1a00152c:	e7fa      	b.n	1a001524 <Chip_Clock_GetRate+0x38>
1a00152e:	bf00      	nop
1a001530:	40052000 	.word	0x40052000
1a001534:	40051000 	.word	0x40051000

1a001538 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001538:	4b09      	ldr	r3, [pc, #36]	; (1a001560 <Chip_UART_GetIndex+0x28>)
1a00153a:	4298      	cmp	r0, r3
1a00153c:	d009      	beq.n	1a001552 <Chip_UART_GetIndex+0x1a>
1a00153e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001542:	4298      	cmp	r0, r3
1a001544:	d007      	beq.n	1a001556 <Chip_UART_GetIndex+0x1e>
1a001546:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00154a:	4298      	cmp	r0, r3
1a00154c:	d005      	beq.n	1a00155a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00154e:	2000      	movs	r0, #0
1a001550:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001552:	2002      	movs	r0, #2
1a001554:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001556:	2003      	movs	r0, #3
1a001558:	4770      	bx	lr
			return 1;
1a00155a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a00155c:	4770      	bx	lr
1a00155e:	bf00      	nop
1a001560:	400c1000 	.word	0x400c1000

1a001564 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001564:	b530      	push	{r4, r5, lr}
1a001566:	b083      	sub	sp, #12
1a001568:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00156a:	f7ff ffe5 	bl	1a001538 <Chip_UART_GetIndex>
1a00156e:	2301      	movs	r3, #1
1a001570:	461a      	mov	r2, r3
1a001572:	4619      	mov	r1, r3
1a001574:	4d0e      	ldr	r5, [pc, #56]	; (1a0015b0 <Chip_UART_Init+0x4c>)
1a001576:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00157a:	f7ff ff7f 	bl	1a00147c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a00157e:	2307      	movs	r3, #7
1a001580:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001582:	2300      	movs	r3, #0
1a001584:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001586:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001588:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00158a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00158c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00158e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001590:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001592:	4b08      	ldr	r3, [pc, #32]	; (1a0015b4 <Chip_UART_Init+0x50>)
1a001594:	429c      	cmp	r4, r3
1a001596:	d006      	beq.n	1a0015a6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001598:	2303      	movs	r3, #3
1a00159a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00159c:	2310      	movs	r3, #16
1a00159e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0015a0:	9b01      	ldr	r3, [sp, #4]
}
1a0015a2:	b003      	add	sp, #12
1a0015a4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0015a6:	2300      	movs	r3, #0
1a0015a8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0015aa:	69a3      	ldr	r3, [r4, #24]
1a0015ac:	9301      	str	r3, [sp, #4]
1a0015ae:	e7f3      	b.n	1a001598 <Chip_UART_Init+0x34>
1a0015b0:	1a001d34 	.word	0x1a001d34
1a0015b4:	40082000 	.word	0x40082000

1a0015b8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0015b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0015bc:	b083      	sub	sp, #12
1a0015be:	9001      	str	r0, [sp, #4]
1a0015c0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0015c2:	f7ff ffb9 	bl	1a001538 <Chip_UART_GetIndex>
1a0015c6:	4b32      	ldr	r3, [pc, #200]	; (1a001690 <Chip_UART_SetBaudFDR+0xd8>)
1a0015c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0015cc:	f7ff ff8e 	bl	1a0014ec <Chip_Clock_GetRate>
1a0015d0:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0015d2:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0015d6:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0015d8:	f04f 0b00 	mov.w	fp, #0
1a0015dc:	46a2      	mov	sl, r4
1a0015de:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0015e0:	e02a      	b.n	1a001638 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0015e2:	4242      	negs	r2, r0
				div ++;
1a0015e4:	1c4b      	adds	r3, r1, #1
1a0015e6:	e017      	b.n	1a001618 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0015e8:	b30a      	cbz	r2, 1a00162e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0015ea:	4617      	mov	r7, r2
			sd = d;
1a0015ec:	46ab      	mov	fp, r5
			sm = m;
1a0015ee:	46a2      	mov	sl, r4
			sdiv = div;
1a0015f0:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0015f2:	3501      	adds	r5, #1
1a0015f4:	42ac      	cmp	r4, r5
1a0015f6:	d91e      	bls.n	1a001636 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0015f8:	0933      	lsrs	r3, r6, #4
1a0015fa:	0730      	lsls	r0, r6, #28
1a0015fc:	fba4 0100 	umull	r0, r1, r4, r0
1a001600:	fb04 1103 	mla	r1, r4, r3, r1
1a001604:	1962      	adds	r2, r4, r5
1a001606:	fb08 f202 	mul.w	r2, r8, r2
1a00160a:	2300      	movs	r3, #0
1a00160c:	f000 f886 	bl	1a00171c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001610:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001612:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001614:	2800      	cmp	r0, #0
1a001616:	dbe4      	blt.n	1a0015e2 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001618:	4297      	cmp	r7, r2
1a00161a:	d3ea      	bcc.n	1a0015f2 <Chip_UART_SetBaudFDR+0x3a>
1a00161c:	2b00      	cmp	r3, #0
1a00161e:	d0e8      	beq.n	1a0015f2 <Chip_UART_SetBaudFDR+0x3a>
1a001620:	0c19      	lsrs	r1, r3, #16
1a001622:	d1e6      	bne.n	1a0015f2 <Chip_UART_SetBaudFDR+0x3a>
1a001624:	2b02      	cmp	r3, #2
1a001626:	d8df      	bhi.n	1a0015e8 <Chip_UART_SetBaudFDR+0x30>
1a001628:	2d00      	cmp	r5, #0
1a00162a:	d0dd      	beq.n	1a0015e8 <Chip_UART_SetBaudFDR+0x30>
1a00162c:	e7e1      	b.n	1a0015f2 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00162e:	4617      	mov	r7, r2
			sd = d;
1a001630:	46ab      	mov	fp, r5
			sm = m;
1a001632:	46a2      	mov	sl, r4
			sdiv = div;
1a001634:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001636:	3401      	adds	r4, #1
1a001638:	b11f      	cbz	r7, 1a001642 <Chip_UART_SetBaudFDR+0x8a>
1a00163a:	2c0f      	cmp	r4, #15
1a00163c:	d801      	bhi.n	1a001642 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00163e:	2500      	movs	r5, #0
1a001640:	e7d8      	b.n	1a0015f4 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001642:	f1b9 0f00 	cmp.w	r9, #0
1a001646:	d01e      	beq.n	1a001686 <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001648:	9a01      	ldr	r2, [sp, #4]
1a00164a:	4611      	mov	r1, r2
1a00164c:	68d3      	ldr	r3, [r2, #12]
1a00164e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001652:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001654:	fa5f f389 	uxtb.w	r3, r9
1a001658:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a00165a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00165e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001660:	68d3      	ldr	r3, [r2, #12]
1a001662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001666:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001668:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00166c:	b2db      	uxtb	r3, r3
1a00166e:	f00b 020f 	and.w	r2, fp, #15
1a001672:	4313      	orrs	r3, r2
1a001674:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001676:	0933      	lsrs	r3, r6, #4
1a001678:	fb0a f303 	mul.w	r3, sl, r3
1a00167c:	44da      	add	sl, fp
1a00167e:	fb09 f90a 	mul.w	r9, r9, sl
1a001682:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001686:	4648      	mov	r0, r9
1a001688:	b003      	add	sp, #12
1a00168a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00168e:	bf00      	nop
1a001690:	1a001d2c 	.word	0x1a001d2c

1a001694 <ResetISR>:
void ResetISR(void) {
1a001694:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a001696:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001698:	4b18      	ldr	r3, [pc, #96]	; (1a0016fc <ResetISR+0x68>)
1a00169a:	4a19      	ldr	r2, [pc, #100]	; (1a001700 <ResetISR+0x6c>)
1a00169c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00169e:	3304      	adds	r3, #4
1a0016a0:	4a18      	ldr	r2, [pc, #96]	; (1a001704 <ResetISR+0x70>)
1a0016a2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0016a4:	2300      	movs	r3, #0
1a0016a6:	e005      	b.n	1a0016b4 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0016a8:	4a17      	ldr	r2, [pc, #92]	; (1a001708 <ResetISR+0x74>)
1a0016aa:	f04f 31ff 	mov.w	r1, #4294967295
1a0016ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0016b2:	3301      	adds	r3, #1
1a0016b4:	2b07      	cmp	r3, #7
1a0016b6:	d9f7      	bls.n	1a0016a8 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a0016b8:	b662      	cpsie	i
    SystemInit();
1a0016ba:	f7ff f9bb 	bl	1a000a34 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a0016be:	4b13      	ldr	r3, [pc, #76]	; (1a00170c <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0016c0:	e007      	b.n	1a0016d2 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a0016c2:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0016c6:	689a      	ldr	r2, [r3, #8]
1a0016c8:	6859      	ldr	r1, [r3, #4]
1a0016ca:	6818      	ldr	r0, [r3, #0]
1a0016cc:	f7fe fd5e 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a0016d0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0016d2:	4a0f      	ldr	r2, [pc, #60]	; (1a001710 <ResetISR+0x7c>)
1a0016d4:	4293      	cmp	r3, r2
1a0016d6:	d3f4      	bcc.n	1a0016c2 <ResetISR+0x2e>
1a0016d8:	e006      	b.n	1a0016e8 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a0016da:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0016dc:	6859      	ldr	r1, [r3, #4]
1a0016de:	f854 0b08 	ldr.w	r0, [r4], #8
1a0016e2:	f7fe fd62 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a0016e6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0016e8:	4a0a      	ldr	r2, [pc, #40]	; (1a001714 <ResetISR+0x80>)
1a0016ea:	4293      	cmp	r3, r2
1a0016ec:	d3f5      	bcc.n	1a0016da <ResetISR+0x46>
    __libc_init_array();
1a0016ee:	f000 f997 	bl	1a001a20 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0016f2:	f7ff fa67 	bl	1a000bc4 <Board_Init>
    main();
1a0016f6:	f7fe fe03 	bl	1a000300 <main>
        ;
1a0016fa:	e7fe      	b.n	1a0016fa <ResetISR+0x66>
1a0016fc:	40053100 	.word	0x40053100
1a001700:	10df1000 	.word	0x10df1000
1a001704:	01dff7ff 	.word	0x01dff7ff
1a001708:	e000e280 	.word	0xe000e280
1a00170c:	1a000114 	.word	0x1a000114
1a001710:	1a000150 	.word	0x1a000150
1a001714:	1a000178 	.word	0x1a000178

1a001718 <_init>:
void _init(void) {}
1a001718:	4770      	bx	lr
1a00171a:	Address 0x1a00171a is out of bounds.


1a00171c <__aeabi_uldivmod>:
1a00171c:	b953      	cbnz	r3, 1a001734 <__aeabi_uldivmod+0x18>
1a00171e:	b94a      	cbnz	r2, 1a001734 <__aeabi_uldivmod+0x18>
1a001720:	2900      	cmp	r1, #0
1a001722:	bf08      	it	eq
1a001724:	2800      	cmpeq	r0, #0
1a001726:	bf1c      	itt	ne
1a001728:	f04f 31ff 	movne.w	r1, #4294967295
1a00172c:	f04f 30ff 	movne.w	r0, #4294967295
1a001730:	f000 b974 	b.w	1a001a1c <__aeabi_idiv0>
1a001734:	f1ad 0c08 	sub.w	ip, sp, #8
1a001738:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00173c:	f000 f806 	bl	1a00174c <__udivmoddi4>
1a001740:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001748:	b004      	add	sp, #16
1a00174a:	4770      	bx	lr

1a00174c <__udivmoddi4>:
1a00174c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001750:	9e08      	ldr	r6, [sp, #32]
1a001752:	4604      	mov	r4, r0
1a001754:	4688      	mov	r8, r1
1a001756:	2b00      	cmp	r3, #0
1a001758:	f040 8085 	bne.w	1a001866 <__udivmoddi4+0x11a>
1a00175c:	428a      	cmp	r2, r1
1a00175e:	4615      	mov	r5, r2
1a001760:	d948      	bls.n	1a0017f4 <__udivmoddi4+0xa8>
1a001762:	fab2 f282 	clz	r2, r2
1a001766:	b14a      	cbz	r2, 1a00177c <__udivmoddi4+0x30>
1a001768:	f1c2 0720 	rsb	r7, r2, #32
1a00176c:	fa01 f302 	lsl.w	r3, r1, r2
1a001770:	fa20 f707 	lsr.w	r7, r0, r7
1a001774:	4095      	lsls	r5, r2
1a001776:	ea47 0803 	orr.w	r8, r7, r3
1a00177a:	4094      	lsls	r4, r2
1a00177c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001780:	0c23      	lsrs	r3, r4, #16
1a001782:	fbb8 f7fe 	udiv	r7, r8, lr
1a001786:	fa1f fc85 	uxth.w	ip, r5
1a00178a:	fb0e 8817 	mls	r8, lr, r7, r8
1a00178e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001792:	fb07 f10c 	mul.w	r1, r7, ip
1a001796:	4299      	cmp	r1, r3
1a001798:	d909      	bls.n	1a0017ae <__udivmoddi4+0x62>
1a00179a:	18eb      	adds	r3, r5, r3
1a00179c:	f107 30ff 	add.w	r0, r7, #4294967295
1a0017a0:	f080 80e3 	bcs.w	1a00196a <__udivmoddi4+0x21e>
1a0017a4:	4299      	cmp	r1, r3
1a0017a6:	f240 80e0 	bls.w	1a00196a <__udivmoddi4+0x21e>
1a0017aa:	3f02      	subs	r7, #2
1a0017ac:	442b      	add	r3, r5
1a0017ae:	1a5b      	subs	r3, r3, r1
1a0017b0:	b2a4      	uxth	r4, r4
1a0017b2:	fbb3 f0fe 	udiv	r0, r3, lr
1a0017b6:	fb0e 3310 	mls	r3, lr, r0, r3
1a0017ba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0017be:	fb00 fc0c 	mul.w	ip, r0, ip
1a0017c2:	45a4      	cmp	ip, r4
1a0017c4:	d909      	bls.n	1a0017da <__udivmoddi4+0x8e>
1a0017c6:	192c      	adds	r4, r5, r4
1a0017c8:	f100 33ff 	add.w	r3, r0, #4294967295
1a0017cc:	f080 80cb 	bcs.w	1a001966 <__udivmoddi4+0x21a>
1a0017d0:	45a4      	cmp	ip, r4
1a0017d2:	f240 80c8 	bls.w	1a001966 <__udivmoddi4+0x21a>
1a0017d6:	3802      	subs	r0, #2
1a0017d8:	442c      	add	r4, r5
1a0017da:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0017de:	eba4 040c 	sub.w	r4, r4, ip
1a0017e2:	2700      	movs	r7, #0
1a0017e4:	b11e      	cbz	r6, 1a0017ee <__udivmoddi4+0xa2>
1a0017e6:	40d4      	lsrs	r4, r2
1a0017e8:	2300      	movs	r3, #0
1a0017ea:	e9c6 4300 	strd	r4, r3, [r6]
1a0017ee:	4639      	mov	r1, r7
1a0017f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0017f4:	2a00      	cmp	r2, #0
1a0017f6:	d053      	beq.n	1a0018a0 <__udivmoddi4+0x154>
1a0017f8:	fab2 f282 	clz	r2, r2
1a0017fc:	2a00      	cmp	r2, #0
1a0017fe:	f040 80b6 	bne.w	1a00196e <__udivmoddi4+0x222>
1a001802:	1b49      	subs	r1, r1, r5
1a001804:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001808:	fa1f f885 	uxth.w	r8, r5
1a00180c:	2701      	movs	r7, #1
1a00180e:	fbb1 fcfe 	udiv	ip, r1, lr
1a001812:	0c23      	lsrs	r3, r4, #16
1a001814:	fb0e 111c 	mls	r1, lr, ip, r1
1a001818:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00181c:	fb08 f10c 	mul.w	r1, r8, ip
1a001820:	4299      	cmp	r1, r3
1a001822:	d907      	bls.n	1a001834 <__udivmoddi4+0xe8>
1a001824:	18eb      	adds	r3, r5, r3
1a001826:	f10c 30ff 	add.w	r0, ip, #4294967295
1a00182a:	d202      	bcs.n	1a001832 <__udivmoddi4+0xe6>
1a00182c:	4299      	cmp	r1, r3
1a00182e:	f200 80ec 	bhi.w	1a001a0a <__udivmoddi4+0x2be>
1a001832:	4684      	mov	ip, r0
1a001834:	1a59      	subs	r1, r3, r1
1a001836:	b2a3      	uxth	r3, r4
1a001838:	fbb1 f0fe 	udiv	r0, r1, lr
1a00183c:	fb0e 1410 	mls	r4, lr, r0, r1
1a001840:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001844:	fb08 f800 	mul.w	r8, r8, r0
1a001848:	45a0      	cmp	r8, r4
1a00184a:	d907      	bls.n	1a00185c <__udivmoddi4+0x110>
1a00184c:	192c      	adds	r4, r5, r4
1a00184e:	f100 33ff 	add.w	r3, r0, #4294967295
1a001852:	d202      	bcs.n	1a00185a <__udivmoddi4+0x10e>
1a001854:	45a0      	cmp	r8, r4
1a001856:	f200 80dc 	bhi.w	1a001a12 <__udivmoddi4+0x2c6>
1a00185a:	4618      	mov	r0, r3
1a00185c:	eba4 0408 	sub.w	r4, r4, r8
1a001860:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001864:	e7be      	b.n	1a0017e4 <__udivmoddi4+0x98>
1a001866:	428b      	cmp	r3, r1
1a001868:	d908      	bls.n	1a00187c <__udivmoddi4+0x130>
1a00186a:	2e00      	cmp	r6, #0
1a00186c:	d078      	beq.n	1a001960 <__udivmoddi4+0x214>
1a00186e:	2700      	movs	r7, #0
1a001870:	e9c6 0100 	strd	r0, r1, [r6]
1a001874:	4638      	mov	r0, r7
1a001876:	4639      	mov	r1, r7
1a001878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00187c:	fab3 f783 	clz	r7, r3
1a001880:	b97f      	cbnz	r7, 1a0018a2 <__udivmoddi4+0x156>
1a001882:	428b      	cmp	r3, r1
1a001884:	d302      	bcc.n	1a00188c <__udivmoddi4+0x140>
1a001886:	4282      	cmp	r2, r0
1a001888:	f200 80bd 	bhi.w	1a001a06 <__udivmoddi4+0x2ba>
1a00188c:	1a84      	subs	r4, r0, r2
1a00188e:	eb61 0303 	sbc.w	r3, r1, r3
1a001892:	2001      	movs	r0, #1
1a001894:	4698      	mov	r8, r3
1a001896:	2e00      	cmp	r6, #0
1a001898:	d0a9      	beq.n	1a0017ee <__udivmoddi4+0xa2>
1a00189a:	e9c6 4800 	strd	r4, r8, [r6]
1a00189e:	e7a6      	b.n	1a0017ee <__udivmoddi4+0xa2>
1a0018a0:	deff      	udf	#255	; 0xff
1a0018a2:	f1c7 0520 	rsb	r5, r7, #32
1a0018a6:	40bb      	lsls	r3, r7
1a0018a8:	fa22 fc05 	lsr.w	ip, r2, r5
1a0018ac:	ea4c 0c03 	orr.w	ip, ip, r3
1a0018b0:	fa01 f407 	lsl.w	r4, r1, r7
1a0018b4:	fa20 f805 	lsr.w	r8, r0, r5
1a0018b8:	fa21 f305 	lsr.w	r3, r1, r5
1a0018bc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0018c0:	ea48 0404 	orr.w	r4, r8, r4
1a0018c4:	fbb3 f9fe 	udiv	r9, r3, lr
1a0018c8:	0c21      	lsrs	r1, r4, #16
1a0018ca:	fb0e 3319 	mls	r3, lr, r9, r3
1a0018ce:	fa1f f88c 	uxth.w	r8, ip
1a0018d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0018d6:	fb09 fa08 	mul.w	sl, r9, r8
1a0018da:	459a      	cmp	sl, r3
1a0018dc:	fa02 f207 	lsl.w	r2, r2, r7
1a0018e0:	fa00 f107 	lsl.w	r1, r0, r7
1a0018e4:	d90b      	bls.n	1a0018fe <__udivmoddi4+0x1b2>
1a0018e6:	eb1c 0303 	adds.w	r3, ip, r3
1a0018ea:	f109 30ff 	add.w	r0, r9, #4294967295
1a0018ee:	f080 8088 	bcs.w	1a001a02 <__udivmoddi4+0x2b6>
1a0018f2:	459a      	cmp	sl, r3
1a0018f4:	f240 8085 	bls.w	1a001a02 <__udivmoddi4+0x2b6>
1a0018f8:	f1a9 0902 	sub.w	r9, r9, #2
1a0018fc:	4463      	add	r3, ip
1a0018fe:	eba3 030a 	sub.w	r3, r3, sl
1a001902:	b2a4      	uxth	r4, r4
1a001904:	fbb3 f0fe 	udiv	r0, r3, lr
1a001908:	fb0e 3310 	mls	r3, lr, r0, r3
1a00190c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001910:	fb00 f808 	mul.w	r8, r0, r8
1a001914:	45a0      	cmp	r8, r4
1a001916:	d908      	bls.n	1a00192a <__udivmoddi4+0x1de>
1a001918:	eb1c 0404 	adds.w	r4, ip, r4
1a00191c:	f100 33ff 	add.w	r3, r0, #4294967295
1a001920:	d26b      	bcs.n	1a0019fa <__udivmoddi4+0x2ae>
1a001922:	45a0      	cmp	r8, r4
1a001924:	d969      	bls.n	1a0019fa <__udivmoddi4+0x2ae>
1a001926:	3802      	subs	r0, #2
1a001928:	4464      	add	r4, ip
1a00192a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00192e:	eba4 0408 	sub.w	r4, r4, r8
1a001932:	fba0 8902 	umull	r8, r9, r0, r2
1a001936:	454c      	cmp	r4, r9
1a001938:	46c6      	mov	lr, r8
1a00193a:	464b      	mov	r3, r9
1a00193c:	d354      	bcc.n	1a0019e8 <__udivmoddi4+0x29c>
1a00193e:	d051      	beq.n	1a0019e4 <__udivmoddi4+0x298>
1a001940:	2e00      	cmp	r6, #0
1a001942:	d069      	beq.n	1a001a18 <__udivmoddi4+0x2cc>
1a001944:	ebb1 020e 	subs.w	r2, r1, lr
1a001948:	eb64 0403 	sbc.w	r4, r4, r3
1a00194c:	fa04 f505 	lsl.w	r5, r4, r5
1a001950:	fa22 f307 	lsr.w	r3, r2, r7
1a001954:	40fc      	lsrs	r4, r7
1a001956:	431d      	orrs	r5, r3
1a001958:	e9c6 5400 	strd	r5, r4, [r6]
1a00195c:	2700      	movs	r7, #0
1a00195e:	e746      	b.n	1a0017ee <__udivmoddi4+0xa2>
1a001960:	4637      	mov	r7, r6
1a001962:	4630      	mov	r0, r6
1a001964:	e743      	b.n	1a0017ee <__udivmoddi4+0xa2>
1a001966:	4618      	mov	r0, r3
1a001968:	e737      	b.n	1a0017da <__udivmoddi4+0x8e>
1a00196a:	4607      	mov	r7, r0
1a00196c:	e71f      	b.n	1a0017ae <__udivmoddi4+0x62>
1a00196e:	f1c2 0320 	rsb	r3, r2, #32
1a001972:	fa20 f703 	lsr.w	r7, r0, r3
1a001976:	4095      	lsls	r5, r2
1a001978:	fa01 f002 	lsl.w	r0, r1, r2
1a00197c:	fa21 f303 	lsr.w	r3, r1, r3
1a001980:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001984:	4338      	orrs	r0, r7
1a001986:	0c01      	lsrs	r1, r0, #16
1a001988:	fbb3 f7fe 	udiv	r7, r3, lr
1a00198c:	fa1f f885 	uxth.w	r8, r5
1a001990:	fb0e 3317 	mls	r3, lr, r7, r3
1a001994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001998:	fb07 f308 	mul.w	r3, r7, r8
1a00199c:	428b      	cmp	r3, r1
1a00199e:	fa04 f402 	lsl.w	r4, r4, r2
1a0019a2:	d907      	bls.n	1a0019b4 <__udivmoddi4+0x268>
1a0019a4:	1869      	adds	r1, r5, r1
1a0019a6:	f107 3cff 	add.w	ip, r7, #4294967295
1a0019aa:	d228      	bcs.n	1a0019fe <__udivmoddi4+0x2b2>
1a0019ac:	428b      	cmp	r3, r1
1a0019ae:	d926      	bls.n	1a0019fe <__udivmoddi4+0x2b2>
1a0019b0:	3f02      	subs	r7, #2
1a0019b2:	4429      	add	r1, r5
1a0019b4:	1acb      	subs	r3, r1, r3
1a0019b6:	b281      	uxth	r1, r0
1a0019b8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0019bc:	fb0e 3310 	mls	r3, lr, r0, r3
1a0019c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0019c4:	fb00 f308 	mul.w	r3, r0, r8
1a0019c8:	428b      	cmp	r3, r1
1a0019ca:	d907      	bls.n	1a0019dc <__udivmoddi4+0x290>
1a0019cc:	1869      	adds	r1, r5, r1
1a0019ce:	f100 3cff 	add.w	ip, r0, #4294967295
1a0019d2:	d210      	bcs.n	1a0019f6 <__udivmoddi4+0x2aa>
1a0019d4:	428b      	cmp	r3, r1
1a0019d6:	d90e      	bls.n	1a0019f6 <__udivmoddi4+0x2aa>
1a0019d8:	3802      	subs	r0, #2
1a0019da:	4429      	add	r1, r5
1a0019dc:	1ac9      	subs	r1, r1, r3
1a0019de:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0019e2:	e714      	b.n	1a00180e <__udivmoddi4+0xc2>
1a0019e4:	4541      	cmp	r1, r8
1a0019e6:	d2ab      	bcs.n	1a001940 <__udivmoddi4+0x1f4>
1a0019e8:	ebb8 0e02 	subs.w	lr, r8, r2
1a0019ec:	eb69 020c 	sbc.w	r2, r9, ip
1a0019f0:	3801      	subs	r0, #1
1a0019f2:	4613      	mov	r3, r2
1a0019f4:	e7a4      	b.n	1a001940 <__udivmoddi4+0x1f4>
1a0019f6:	4660      	mov	r0, ip
1a0019f8:	e7f0      	b.n	1a0019dc <__udivmoddi4+0x290>
1a0019fa:	4618      	mov	r0, r3
1a0019fc:	e795      	b.n	1a00192a <__udivmoddi4+0x1de>
1a0019fe:	4667      	mov	r7, ip
1a001a00:	e7d8      	b.n	1a0019b4 <__udivmoddi4+0x268>
1a001a02:	4681      	mov	r9, r0
1a001a04:	e77b      	b.n	1a0018fe <__udivmoddi4+0x1b2>
1a001a06:	4638      	mov	r0, r7
1a001a08:	e745      	b.n	1a001896 <__udivmoddi4+0x14a>
1a001a0a:	f1ac 0c02 	sub.w	ip, ip, #2
1a001a0e:	442b      	add	r3, r5
1a001a10:	e710      	b.n	1a001834 <__udivmoddi4+0xe8>
1a001a12:	3802      	subs	r0, #2
1a001a14:	442c      	add	r4, r5
1a001a16:	e721      	b.n	1a00185c <__udivmoddi4+0x110>
1a001a18:	4637      	mov	r7, r6
1a001a1a:	e6e8      	b.n	1a0017ee <__udivmoddi4+0xa2>

1a001a1c <__aeabi_idiv0>:
1a001a1c:	4770      	bx	lr
1a001a1e:	bf00      	nop

1a001a20 <__libc_init_array>:
1a001a20:	b570      	push	{r4, r5, r6, lr}
1a001a22:	4d0d      	ldr	r5, [pc, #52]	; (1a001a58 <__libc_init_array+0x38>)
1a001a24:	4c0d      	ldr	r4, [pc, #52]	; (1a001a5c <__libc_init_array+0x3c>)
1a001a26:	1b64      	subs	r4, r4, r5
1a001a28:	10a4      	asrs	r4, r4, #2
1a001a2a:	2600      	movs	r6, #0
1a001a2c:	42a6      	cmp	r6, r4
1a001a2e:	d109      	bne.n	1a001a44 <__libc_init_array+0x24>
1a001a30:	4d0b      	ldr	r5, [pc, #44]	; (1a001a60 <__libc_init_array+0x40>)
1a001a32:	4c0c      	ldr	r4, [pc, #48]	; (1a001a64 <__libc_init_array+0x44>)
1a001a34:	f7ff fe70 	bl	1a001718 <_init>
1a001a38:	1b64      	subs	r4, r4, r5
1a001a3a:	10a4      	asrs	r4, r4, #2
1a001a3c:	2600      	movs	r6, #0
1a001a3e:	42a6      	cmp	r6, r4
1a001a40:	d105      	bne.n	1a001a4e <__libc_init_array+0x2e>
1a001a42:	bd70      	pop	{r4, r5, r6, pc}
1a001a44:	f855 3b04 	ldr.w	r3, [r5], #4
1a001a48:	4798      	blx	r3
1a001a4a:	3601      	adds	r6, #1
1a001a4c:	e7ee      	b.n	1a001a2c <__libc_init_array+0xc>
1a001a4e:	f855 3b04 	ldr.w	r3, [r5], #4
1a001a52:	4798      	blx	r3
1a001a54:	3601      	adds	r6, #1
1a001a56:	e7f2      	b.n	1a001a3e <__libc_init_array+0x1e>
1a001a58:	1a001d3c 	.word	0x1a001d3c
1a001a5c:	1a001d3c 	.word	0x1a001d3c
1a001a60:	1a001d3c 	.word	0x1a001d3c
1a001a64:	1a001d3c 	.word	0x1a001d3c

1a001a68 <memset>:
1a001a68:	4402      	add	r2, r0
1a001a6a:	4603      	mov	r3, r0
1a001a6c:	4293      	cmp	r3, r2
1a001a6e:	d100      	bne.n	1a001a72 <memset+0xa>
1a001a70:	4770      	bx	lr
1a001a72:	f803 1b01 	strb.w	r1, [r3], #1
1a001a76:	e7f9      	b.n	1a001a6c <memset+0x4>

1a001a78 <paso>:
1a001a78:	0101 0000 0100 0001 0000 0101 0001 0100     ................

1a001a88 <gpioPinsInit>:
1a001a88:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a001a98:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a001aa8:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a001ab8:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a001ac8:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a001ad8:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a001ae8:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a001af8:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a001b08:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a001b18:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a001b28:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a001b38:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a001b48:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a001b58:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a001b68:	020b 000c 0c01 0004 0200 0400 0001 0102     ................
1a001b78:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a001b88:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a001b98:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a001ba8:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a001bb8:	010e 0005 0801 ffff                         ........

1a001bc0 <ultrasonicSensorsIrqMap>:
1a001bc0:	0100 ff02                                   ....

1a001bc4 <InitClkStates>:
1a001bc4:	0f01 0101                                   ....

1a001bc8 <pinmuxing>:
1a001bc8:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a001bd8:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a001be8:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a001bf8:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a001c08:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a001c18:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a001c28:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a001c38:	0206 0057                                   ..W.

1a001c3c <ExtRateIn>:
1a001c3c:	0000 0000                                   ....

1a001c40 <GpioButtons>:
1a001c40:	0400 0800 0900 0901                         ........

1a001c48 <GpioLeds>:
1a001c48:	0005 0105 0205 0e00 0b01 0c01               ............

1a001c54 <GpioPorts>:
1a001c54:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a001c64:	0802 ffff                                   ....

1a001c68 <OscRateIn>:
1a001c68:	1b00 00b7                                   ....

1a001c6c <InitClkStates>:
1a001c6c:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a001c7c:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a001c8c:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a001c9c:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001cac:	111a 0001 111b 0001 0201 0804 0f03 0f0f     ................
1a001cbc:	00ff 0000                                   ....

1a001cc0 <periph_to_base>:
1a001cc0:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001cd0:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001ce0:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001cf0:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001d00:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a001d10:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a001d20:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a001d2c <UART_BClock>:
1a001d2c:	01c2 01a2 0182 0162                         ......b.

1a001d34 <UART_PClock>:
1a001d34:	0081 0082 00a1 00a2                         ........
