
app/out/app.elf:     file format elf32-littlearm
app/out/app.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001d31

Program Header:
0x70000001 off    0x00012e24 vaddr 0x1a002e24 paddr 0x1a002e24 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x0000019c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002e2c memsz 0x00002e2c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002e2c align 2**16
         filesz 0x0000013c memsz 0x0000013c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e24  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  10000000  1a002e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0002013c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0002013c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0002013c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0002013c  2**2
                  CONTENTS
  6 .bss          0000005c  10000140  10000140  00000140  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0002013c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0002013c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0002013c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0002013c  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002e24  1a002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  0002013c  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  0002013c  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  0002013c  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  0002013c  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  0002013c  2**2
                  CONTENTS
 17 .noinit       00000000  1000019c  1000019c  0002013c  2**2
                  CONTENTS
 18 .debug_info   00025eb5  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00005020  00000000  00000000  00045ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000082cb  00000000  00000000  0004b011  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000a30  00000000  00000000  000532dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000a60  00000000  00000000  00053d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00008fd6  00000000  00000000  0005476c  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00013349  00000000  00000000  0005d742  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00025701  00000000  00000000  00070a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  0009618c  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  000961f4  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001d84  00000000  00000000  00096228  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000140 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002e24 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000019c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 mef.c
10000140 l     O .bss	00000001 estado
10000141 l     O .bss	00000001 gramos
10000142 l     O .bss	00000001 i
00000000 l    df *ABS*	00000000 encoder.c
10000143 l     O .bss	00000001 CLK_PIN
10000144 l     O .bss	00000001 DT_PIN
10000145 l     O .bss	00000001 SENS
10000146 l     O .bss	00000001 SW_PIN
10000147 l     O .bss	00000001 cambiandoEstado.13392
10000148 l     O .bss	00000001 cont1.13387
10000149 l     O .bss	00000001 cont2.13388
1000014a l     O .bss	00000001 estadoAct.13391
1000014b l     O .bss	00000001 estadoAnt.13390
1000014c l     O .bss	00000001 tiempo.13389
1000014d l     O .bss	00000001 ultEst
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000010 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0007c4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_timer.c
1a000a36 l     F .text	00000002 errorOcurred
1a000a38 l     F .text	00000002 doNothing
10000018 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_tick.c
10000150 l     O .bss	00000004 callBackFuncParams
10000158 l     O .bss	00000008 tickCounter
10000160 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000164 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_lcd.c
1a000db4 l     F .text	0000002e lcdSendNibble
1a000de2 l     F .text	0000001c lcdEnablePulse
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a000f74 l     F .text	00000010 clearInterrupt
1a000f84 l     F .text	0000005c serveInterrupt
10000058 l     O .data	00000048 ultrasonicSensors
1a002c14 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002c18 l     O .text	00000004 InitClkStates
1a002c1c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 system.c
10000168 l     O .bss	00000004 heap_end.11577
00000000 l    df *ABS*	00000000 board.c
1a0010ec l     F .text	00000044 Board_LED_Init
1a001130 l     F .text	00000040 Board_TEC_Init
1a001170 l     F .text	00000040 Board_GPIO_Init
1a0011b0 l     F .text	00000038 Board_SPI_Init
1a0011e8 l     F .text	00000024 Board_I2C_Init
1a00120c l     F .text	00000030 Board_ADC_Init
1a002c94 l     O .text	00000008 GpioButtons
1a002c9c l     O .text	0000000c GpioLeds
1a002ca8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00128c l     F .text	00000014 Chip_SSP_GetClockIndex
1a0012a0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
100000a0 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001414 l     F .text	00000014 Chip_ADC_GetClockIndex
1a001428 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002cc0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001648 l     F .text	000000a0 pll_calc_divs
1a0016e8 l     F .text	0000010c pll_get_frac
1a0017f4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001a68 l     F .text	00000022 Chip_Clock_GetDivRate
1000016c l     O .bss	00000008 audio_usb_pll_freq
1a002d14 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001bd4 l     F .text	0000002c Chip_UART_GetIndex
1a002d80 l     O .text	00000008 UART_BClock
1a002d88 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 impure.c
100000dc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a002e24 l       .bss_RAM5	00000000 __init_array_end
1a002e24 l       .bss_RAM5	00000000 __preinit_array_end
1a002e24 l       .bss_RAM5	00000000 __init_array_start
1a002e24 l       .bss_RAM5	00000000 __preinit_array_start
1a0029c8 g     F .text	00000010 _malloc_usable_size_r
1a00188c g     F .text	0000001c Chip_Clock_GetDividerSource
1a002170 g     F .text	00000010 strcpy
1a000abc g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a00034c g     F .text	0000001c mefInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
10000190 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0014ce g     F .text	0000000c Chip_ADC_SetResolution
1a002970 g     F .text	0000000c __malloc_unlock
1a000be4 g     F .text	0000002c SysTick_Handler
10000191 g     O .bss	00000001 __lock___arc4random_mutex
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a002930 g     F .text	00000034 memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002e2c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
53ff5b5e g       *ABS*	00000000 __valid_user_code_checksum
1a002e2c g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a000b00 g     F .text	00000044 TIMER3_IRQHandler
1a001b0a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a002104 g     F .text	0000001c memcpy
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a00238c g     F .text	000001f0 _svfprintf_r
1a001db8 g     F .text	00000000 .hidden __aeabi_uldivmod
1000019c g       .noinit	00000000 _noinit
1000018c g     O .bss	00000004 SystemCoreClock
1a000368 g     F .text	00000304 mefUpdate
1a001c00 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001b88 g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a001038 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001de8 g     F .text	000002d0 .hidden __udivmoddi4
1a0010cc g     F .text	00000020 _sbrk_r
1a002c90 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000fea g     F .text	0000000a GPIO1_IRQHandler
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a002e24 g       .ARM.exidx	00000000 __exidx_start
10000192 g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
10000193 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a00297c g     F .text	0000004c _realloc_r
1a0020bc g     F .text	00000048 __libc_init_array
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a001260 g     F .text	0000002c Board_Init
1a001db4 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a00066c g     F .text	00000048 encoderInit
1a00018a  w    F .text	00000002 RTC_IRQHandler
1000019c g       .bss	00000000 _ebss
1a000a3c g     F .text	00000040 TIMER0_IRQHandler
1a000b68 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a001384 g     F .text	00000038 Chip_I2C_SetClockRate
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a001840 g     F .text	0000004c Chip_Clock_EnableCrystal
10000194 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a000a7c g     F .text	00000040 TIMER1_IRQHandler
1a002d90 g     O .text	00000020 __sf_fake_stderr
1a001360 g     F .text	00000024 Chip_I2C_Init
1a002182 g     F .text	00000002 __retarget_lock_release_recursive
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a0019fc g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0022d4 g     F .text	000000b6 __ssputs_r
1a002ad8 g     O .text	00000136 gpioPinsInit
1a0012b8 g     F .text	00000012 Chip_SSP_SetClockRate
1a000ff4 g     F .text	0000000a GPIO2_IRQHandler
1a002890 g     F .text	00000000 memchr
1a002184 g     F .text	0000009c _free_r
1a001ae4 g     F .text	00000026 Chip_Clock_GetBaseClock
1a000eae g     F .text	000000b0 lcdInit
10000140 g       .bss	00000000 _bss
1a00149c g     F .text	00000032 Chip_ADC_SetSampleRate
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a0012ca g     F .text	0000003e Chip_SSP_SetBitRate
1a0013bc g     F .text	00000002 Chip_GPIO_Init
1a002cbc g     O .text	00000004 OscRateIn
1000019c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a0006b4 g     F .text	000000f4 encoderRead
1a000e36 g     F .text	00000030 lcdData
1a000178 g       .text	00000000 __bss_section_table_end
1a0007f8 g     F .text	00000194 gpioInit
1a0020b8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a000dfe g     F .text	00000038 lcdCommand
1a000c10 g     F .text	0000001c USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a002964 g     F .text	0000000c __malloc_lock
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a002db0 g     O .text	00000020 __sf_fake_stdin
1a0018a8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002180 g     F .text	00000002 __retarget_lock_acquire_recursive
1a002120 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	0000004a main
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
10000014 g     O .data	00000004 DWT_CTRL
1a002220 g     F .text	000000b4 _malloc_r
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a001b18 g     F .text	0000003c Chip_Clock_EnableOpts
1a0018c4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0013c0 g     F .text	00000054 fpuInit
1a00197c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0010b0 g     F .text	0000001c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a000d7c g     F .text	00000038 delay
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00098c g     F .text	00000056 gpioWrite
1a002130 g     F .text	00000040 sprintf
1a00145c g     F .text	00000040 Chip_ADC_Init
10000188 g     O .bss	00000004 g_pUsbApi
1a001000 g     F .text	00000038 Board_SetupMuxing
1a000e68 g     F .text	00000034 lcdGoToXY
1a001c54 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000b44 g     F .text	0000000c tickRead
10000180 g     O .bss	00000008 tickRateMS
1a00018a  w    F .text	00000002 ETH_IRQHandler
1a00257c g     F .text	000000ea _printf_common
100000d8 g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000f5e g     F .text	00000016 lcdSendStringRaw
1a00238c g     F .text	000001f0 _svfiprintf_r
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000019c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001308 g     F .text	00000038 Chip_SSP_Init
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a00123c g     F .text	00000024 Board_Debug_Init
1000013c g       .data	00000000 _edata
1a001340 g     F .text	00000020 Chip_I2C_EventHandler
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
10000195 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0014dc g     F .text	00000158 Chip_SetupCoreClock
1a000fe0 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a001d30 g     F .text	00000084 ResetISR
1a001634 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a000e9c g     F .text	00000012 lcdClear
1a002dd0 g     O .text	00000020 __sf_fake_stdout
1a002130 g     F .text	00000040 siprintf
1a000d20 g     F .text	0000005c delayInaccurateUs
1a0020b8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
10000196 g     O .bss	00000001 __lock___dd_hash_mutex
10000197 g     O .bss	00000001 __lock___tz_mutex
1a002668 g     F .text	00000228 _printf_i
1a001b54 g     F .text	00000034 Chip_Clock_Enable
1a00018a  w    F .text	00000002 UART3_IRQHandler
10000000 g     O .data	00000010 arregloHoras
10000178 g     O .bss	00000004 __malloc_sbrk_start
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a0009e2 g     F .text	00000054 gpioRead
1a000c2c g     F .text	000000f4 boardInit
10000174 g     O .bss	00000004 __malloc_free_list
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000b50 g     F .text	00000018 tickPowerSet
1a001a8c g     F .text	00000058 Chip_Clock_SetBaseClock
1a0007a8 g     F .text	0000001c cyclesCounterInit
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
10000198 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0010a4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 31 1d 00 1a 79 01 00 1a 7b 01 00 1a     ....1...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 5e 5b ff 53     }...........^[.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	e5 0b 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 11 0c 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a 3d 0a 00 1a 7d 0a 00 1a bd 0a 00 1a     ....=...}.......
1a00007c:	01 0b 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a e1 0f 00 1a eb 0f 00 1a f5 0f 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002e2c 	.word	0x1a002e2c
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000013c 	.word	0x0000013c
1a000120:	1a002e2c 	.word	0x1a002e2c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002e2c 	.word	0x1a002e2c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002e2c 	.word	0x1a002e2c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002e2c 	.word	0x1a002e2c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000140 	.word	0x10000140
1a000154:	0000005c 	.word	0x0000005c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
#include "mef.h"
#include "encoder.h"
#include "eeprom.h"
// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void )
{
1a000300:	b500      	push	{lr}
1a000302:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------

   // Inicializar y configurar la plataforma
   boardConfig();
1a000304:	f000 fc92 	bl	1a000c2c <boardInit>
   encoderInit(ENET_TXEN,GPIO2,GPIO4,3);
1a000308:	2303      	movs	r3, #3
1a00030a:	221e      	movs	r2, #30
1a00030c:	211f      	movs	r1, #31
1a00030e:	201b      	movs	r0, #27
1a000310:	f000 f9ac 	bl	1a00066c <encoderInit>
   mefInit();
1a000314:	f000 f81a 	bl	1a00034c <mefInit>
   mefUpdate(0,0,0);
1a000318:	2200      	movs	r2, #0
1a00031a:	4611      	mov	r1, r2
1a00031c:	4610      	mov	r0, r2
1a00031e:	f000 f823 	bl	1a000368 <mefUpdate>
   //botonInit(ENET_TXEN,20);
   uint8_t sentido=0;
   uint8_t boton=0;
1a000322:	2300      	movs	r3, #0
1a000324:	f88d 3007 	strb.w	r3, [sp, #7]
1a000328:	e003      	b.n	1a000332 <main+0x32>
      sentido=encoderRead(&boton);
      if(sentido!=0){
         mefUpdate(sentido,boton,0);
      }
      
      delay(1);
1a00032a:	2001      	movs	r0, #1
1a00032c:	2100      	movs	r1, #0
1a00032e:	f000 fd25 	bl	1a000d7c <delay>
      sentido=encoderRead(&boton);
1a000332:	f10d 0007 	add.w	r0, sp, #7
1a000336:	f000 f9bd 	bl	1a0006b4 <encoderRead>
      if(sentido!=0){
1a00033a:	2800      	cmp	r0, #0
1a00033c:	d0f5      	beq.n	1a00032a <main+0x2a>
         mefUpdate(sentido,boton,0);
1a00033e:	2200      	movs	r2, #0
1a000340:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000344:	f000 f810 	bl	1a000368 <mefUpdate>
1a000348:	e7ef      	b.n	1a00032a <main+0x2a>
1a00034a:	Address 0x1a00034a is out of bounds.


1a00034c <mefInit>:

static estadosMef estado;
static uint8_t gramos;
static uint8_t i=0;
const uint8_t* arregloHoras[]={"14:00","16:00","20:00","21:00"};
void mefInit(){
1a00034c:	b508      	push	{r3, lr}
      estado = PRINCIPAL;
1a00034e:	4b05      	ldr	r3, [pc, #20]	; (1a000364 <mefInit+0x18>)
1a000350:	2200      	movs	r2, #0
1a000352:	701a      	strb	r2, [r3, #0]
      lcdInit(16,2,5,8);
1a000354:	2308      	movs	r3, #8
1a000356:	2205      	movs	r2, #5
1a000358:	2102      	movs	r1, #2
1a00035a:	2010      	movs	r0, #16
1a00035c:	f000 fda7 	bl	1a000eae <lcdInit>
}
1a000360:	bd08      	pop	{r3, pc}
1a000362:	bf00      	nop
1a000364:	10000140 	.word	0x10000140

1a000368 <mefUpdate>:

void mefUpdate(uint8_t sentido,uint8_t boton ,uint8_t cancelar){
1a000368:	b500      	push	{lr}
1a00036a:	b083      	sub	sp, #12
   static uint8_t* hora ="     ";

   switch(estado){
1a00036c:	4ba3      	ldr	r3, [pc, #652]	; (1a0005fc <mefUpdate+0x294>)
1a00036e:	781b      	ldrb	r3, [r3, #0]
1a000370:	2b07      	cmp	r3, #7
1a000372:	f200 80a3 	bhi.w	1a0004bc <mefUpdate+0x154>
1a000376:	e8df f003 	tbb	[pc, r3]
1a00037a:	1104      	.short	0x1104
1a00037c:	824c3b23 	.word	0x824c3b23
1a000380:	9d93      	.short	0x9d93
      case PRINCIPAL:
                     if(sentido==1)
1a000382:	2801      	cmp	r0, #1
1a000384:	d006      	beq.n	1a000394 <mefUpdate+0x2c>
                        estado=OPCION_COMIDA;
                     else if(sentido==2)
1a000386:	2802      	cmp	r0, #2
1a000388:	f040 80a6 	bne.w	1a0004d8 <mefUpdate+0x170>
                        estado=DAR_COMIDA;
1a00038c:	4b9b      	ldr	r3, [pc, #620]	; (1a0005fc <mefUpdate+0x294>)
1a00038e:	2205      	movs	r2, #5
1a000390:	701a      	strb	r2, [r3, #0]
1a000392:	e0a1      	b.n	1a0004d8 <mefUpdate+0x170>
                        estado=OPCION_COMIDA;
1a000394:	4b99      	ldr	r3, [pc, #612]	; (1a0005fc <mefUpdate+0x294>)
1a000396:	2201      	movs	r2, #1
1a000398:	701a      	strb	r2, [r3, #0]
1a00039a:	e09d      	b.n	1a0004d8 <mefUpdate+0x170>
                     break;
      case OPCION_COMIDA:
                     if(boton)
1a00039c:	b119      	cbz	r1, 1a0003a6 <mefUpdate+0x3e>
                        estado=ELEGIR_CANTIDAD_COMIDA;
1a00039e:	4b97      	ldr	r3, [pc, #604]	; (1a0005fc <mefUpdate+0x294>)
1a0003a0:	2202      	movs	r2, #2
1a0003a2:	701a      	strb	r2, [r3, #0]
1a0003a4:	e098      	b.n	1a0004d8 <mefUpdate+0x170>
                     else if(sentido==1)
1a0003a6:	2801      	cmp	r0, #1
1a0003a8:	d006      	beq.n	1a0003b8 <mefUpdate+0x50>
                        estado=OPCION_HORA;
                     else if(sentido==2)
1a0003aa:	2802      	cmp	r0, #2
1a0003ac:	f040 8094 	bne.w	1a0004d8 <mefUpdate+0x170>
                        estado=PRINCIPAL;
1a0003b0:	4b92      	ldr	r3, [pc, #584]	; (1a0005fc <mefUpdate+0x294>)
1a0003b2:	2200      	movs	r2, #0
1a0003b4:	701a      	strb	r2, [r3, #0]
1a0003b6:	e08f      	b.n	1a0004d8 <mefUpdate+0x170>
                        estado=OPCION_HORA;
1a0003b8:	4b90      	ldr	r3, [pc, #576]	; (1a0005fc <mefUpdate+0x294>)
1a0003ba:	2203      	movs	r2, #3
1a0003bc:	701a      	strb	r2, [r3, #0]
1a0003be:	e08b      	b.n	1a0004d8 <mefUpdate+0x170>
                     break;
      case ELEGIR_CANTIDAD_COMIDA:
                     //Leer gramos de eeprom y guardarlos en variable gramos
                     if(boton){
1a0003c0:	b119      	cbz	r1, 1a0003ca <mefUpdate+0x62>
                        estado=OPCION_COMIDA;
1a0003c2:	4b8e      	ldr	r3, [pc, #568]	; (1a0005fc <mefUpdate+0x294>)
1a0003c4:	2201      	movs	r2, #1
1a0003c6:	701a      	strb	r2, [r3, #0]
1a0003c8:	e086      	b.n	1a0004d8 <mefUpdate+0x170>
                        //Guardo gramos de comida en eeprom?
                     }
                     else if(cancelar)
1a0003ca:	b11a      	cbz	r2, 1a0003d4 <mefUpdate+0x6c>
                        estado=OPCION_COMIDA;
1a0003cc:	4b8b      	ldr	r3, [pc, #556]	; (1a0005fc <mefUpdate+0x294>)
1a0003ce:	2201      	movs	r2, #1
1a0003d0:	701a      	strb	r2, [r3, #0]
1a0003d2:	e081      	b.n	1a0004d8 <mefUpdate+0x170>
                     else if(sentido==1)
1a0003d4:	2801      	cmp	r0, #1
1a0003d6:	d006      	beq.n	1a0003e6 <mefUpdate+0x7e>
                        gramos++;
                     else if(sentido==2){
1a0003d8:	2802      	cmp	r0, #2
1a0003da:	d17d      	bne.n	1a0004d8 <mefUpdate+0x170>
                        //if(gramos>0)
                           gramos--;
1a0003dc:	4a88      	ldr	r2, [pc, #544]	; (1a000600 <mefUpdate+0x298>)
1a0003de:	7813      	ldrb	r3, [r2, #0]
1a0003e0:	3b01      	subs	r3, #1
1a0003e2:	7013      	strb	r3, [r2, #0]
1a0003e4:	e078      	b.n	1a0004d8 <mefUpdate+0x170>
                        gramos++;
1a0003e6:	4a86      	ldr	r2, [pc, #536]	; (1a000600 <mefUpdate+0x298>)
1a0003e8:	7813      	ldrb	r3, [r2, #0]
1a0003ea:	3301      	adds	r3, #1
1a0003ec:	7013      	strb	r3, [r2, #0]
1a0003ee:	e073      	b.n	1a0004d8 <mefUpdate+0x170>
                     }
                     break;
      case OPCION_HORA:
                     if(boton)
1a0003f0:	b119      	cbz	r1, 1a0003fa <mefUpdate+0x92>
                        estado=DEFINIR_HORA;
1a0003f2:	4b82      	ldr	r3, [pc, #520]	; (1a0005fc <mefUpdate+0x294>)
1a0003f4:	2204      	movs	r2, #4
1a0003f6:	701a      	strb	r2, [r3, #0]
1a0003f8:	e06e      	b.n	1a0004d8 <mefUpdate+0x170>
                     else if(sentido==1)
1a0003fa:	2801      	cmp	r0, #1
1a0003fc:	d005      	beq.n	1a00040a <mefUpdate+0xa2>
                        estado=DAR_COMIDA;
                     else if(sentido==2)
1a0003fe:	2802      	cmp	r0, #2
1a000400:	d16a      	bne.n	1a0004d8 <mefUpdate+0x170>
                        estado=OPCION_COMIDA;
1a000402:	4b7e      	ldr	r3, [pc, #504]	; (1a0005fc <mefUpdate+0x294>)
1a000404:	2201      	movs	r2, #1
1a000406:	701a      	strb	r2, [r3, #0]
1a000408:	e066      	b.n	1a0004d8 <mefUpdate+0x170>
                        estado=DAR_COMIDA;
1a00040a:	4b7c      	ldr	r3, [pc, #496]	; (1a0005fc <mefUpdate+0x294>)
1a00040c:	2205      	movs	r2, #5
1a00040e:	701a      	strb	r2, [r3, #0]
1a000410:	e062      	b.n	1a0004d8 <mefUpdate+0x170>
                     break;
      case DEFINIR_HORA:
                     if(boton){
1a000412:	b119      	cbz	r1, 1a00041c <mefUpdate+0xb4>
                        estado=OPCION_HORA;
1a000414:	4b79      	ldr	r3, [pc, #484]	; (1a0005fc <mefUpdate+0x294>)
1a000416:	2203      	movs	r2, #3
1a000418:	701a      	strb	r2, [r3, #0]
1a00041a:	e05d      	b.n	1a0004d8 <mefUpdate+0x170>
                        //Guardo hora de comida en eeprom?
                     }
                     else if(cancelar){
1a00041c:	b11a      	cbz	r2, 1a000426 <mefUpdate+0xbe>
                        estado=OPCION_HORA;}
1a00041e:	4b77      	ldr	r3, [pc, #476]	; (1a0005fc <mefUpdate+0x294>)
1a000420:	2203      	movs	r2, #3
1a000422:	701a      	strb	r2, [r3, #0]
1a000424:	e058      	b.n	1a0004d8 <mefUpdate+0x170>
                     else if(sentido==1){
1a000426:	2801      	cmp	r0, #1
1a000428:	d011      	beq.n	1a00044e <mefUpdate+0xe6>
                        //aumento hora
                        if(++i==4)
                           i=0;
                        strcpy(hora,arregloHoras[i]);}
                     else if(sentido==2){
1a00042a:	2802      	cmp	r0, #2
1a00042c:	d154      	bne.n	1a0004d8 <mefUpdate+0x170>
                        //Disminuyo hora
                        if(--i==255)
1a00042e:	4a75      	ldr	r2, [pc, #468]	; (1a000604 <mefUpdate+0x29c>)
1a000430:	7813      	ldrb	r3, [r2, #0]
1a000432:	3b01      	subs	r3, #1
1a000434:	b2db      	uxtb	r3, r3
1a000436:	7013      	strb	r3, [r2, #0]
1a000438:	2bff      	cmp	r3, #255	; 0xff
1a00043a:	d01c      	beq.n	1a000476 <mefUpdate+0x10e>
                           i=3;
                        strcpy(hora,arregloHoras[i]);
1a00043c:	4b71      	ldr	r3, [pc, #452]	; (1a000604 <mefUpdate+0x29c>)
1a00043e:	781a      	ldrb	r2, [r3, #0]
1a000440:	4b71      	ldr	r3, [pc, #452]	; (1a000608 <mefUpdate+0x2a0>)
1a000442:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a000446:	4871      	ldr	r0, [pc, #452]	; (1a00060c <mefUpdate+0x2a4>)
1a000448:	f001 fe92 	bl	1a002170 <strcpy>
1a00044c:	e044      	b.n	1a0004d8 <mefUpdate+0x170>
                        if(++i==4)
1a00044e:	4a6d      	ldr	r2, [pc, #436]	; (1a000604 <mefUpdate+0x29c>)
1a000450:	7813      	ldrb	r3, [r2, #0]
1a000452:	3301      	adds	r3, #1
1a000454:	b2db      	uxtb	r3, r3
1a000456:	7013      	strb	r3, [r2, #0]
1a000458:	2b04      	cmp	r3, #4
1a00045a:	d008      	beq.n	1a00046e <mefUpdate+0x106>
                        strcpy(hora,arregloHoras[i]);}
1a00045c:	4b69      	ldr	r3, [pc, #420]	; (1a000604 <mefUpdate+0x29c>)
1a00045e:	781a      	ldrb	r2, [r3, #0]
1a000460:	4b69      	ldr	r3, [pc, #420]	; (1a000608 <mefUpdate+0x2a0>)
1a000462:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a000466:	4869      	ldr	r0, [pc, #420]	; (1a00060c <mefUpdate+0x2a4>)
1a000468:	f001 fe82 	bl	1a002170 <strcpy>
1a00046c:	e034      	b.n	1a0004d8 <mefUpdate+0x170>
                           i=0;
1a00046e:	4613      	mov	r3, r2
1a000470:	2200      	movs	r2, #0
1a000472:	701a      	strb	r2, [r3, #0]
1a000474:	e7f2      	b.n	1a00045c <mefUpdate+0xf4>
                           i=3;
1a000476:	4613      	mov	r3, r2
1a000478:	2203      	movs	r2, #3
1a00047a:	701a      	strb	r2, [r3, #0]
1a00047c:	e7de      	b.n	1a00043c <mefUpdate+0xd4>
                     }
                     
                     break;
      case DAR_COMIDA:
                     if(boton)
1a00047e:	b119      	cbz	r1, 1a000488 <mefUpdate+0x120>
                        estado=DAR_COMIDA2;
1a000480:	4b5e      	ldr	r3, [pc, #376]	; (1a0005fc <mefUpdate+0x294>)
1a000482:	2206      	movs	r2, #6
1a000484:	701a      	strb	r2, [r3, #0]
1a000486:	e027      	b.n	1a0004d8 <mefUpdate+0x170>
                     else if(sentido==1)
1a000488:	2801      	cmp	r0, #1
1a00048a:	d005      	beq.n	1a000498 <mefUpdate+0x130>
                        estado=PRINCIPAL;
                     else if(sentido==2)
1a00048c:	2802      	cmp	r0, #2
1a00048e:	d123      	bne.n	1a0004d8 <mefUpdate+0x170>
                        estado=OPCION_HORA;
1a000490:	4b5a      	ldr	r3, [pc, #360]	; (1a0005fc <mefUpdate+0x294>)
1a000492:	2203      	movs	r2, #3
1a000494:	701a      	strb	r2, [r3, #0]
1a000496:	e01f      	b.n	1a0004d8 <mefUpdate+0x170>
                        estado=PRINCIPAL;
1a000498:	4b58      	ldr	r3, [pc, #352]	; (1a0005fc <mefUpdate+0x294>)
1a00049a:	2200      	movs	r2, #0
1a00049c:	701a      	strb	r2, [r3, #0]
1a00049e:	e01b      	b.n	1a0004d8 <mefUpdate+0x170>
                     break;
      case DAR_COMIDA2:
                     if(boton)
1a0004a0:	b119      	cbz	r1, 1a0004aa <mefUpdate+0x142>
                        estado=DISPENSANDO;
1a0004a2:	4b56      	ldr	r3, [pc, #344]	; (1a0005fc <mefUpdate+0x294>)
1a0004a4:	2207      	movs	r2, #7
1a0004a6:	701a      	strb	r2, [r3, #0]
1a0004a8:	e016      	b.n	1a0004d8 <mefUpdate+0x170>
                     else if(cancelar)
1a0004aa:	b1aa      	cbz	r2, 1a0004d8 <mefUpdate+0x170>
                        estado=DAR_COMIDA;
1a0004ac:	4b53      	ldr	r3, [pc, #332]	; (1a0005fc <mefUpdate+0x294>)
1a0004ae:	2205      	movs	r2, #5
1a0004b0:	701a      	strb	r2, [r3, #0]
1a0004b2:	e011      	b.n	1a0004d8 <mefUpdate+0x170>
                     break;
      case DISPENSANDO:
         //Habria que ver como hacer para que no haga nada hasta que deje de dispensar
         if(cancelar)
1a0004b4:	b112      	cbz	r2, 1a0004bc <mefUpdate+0x154>
            estado=PRINCIPAL;
1a0004b6:	4b51      	ldr	r3, [pc, #324]	; (1a0005fc <mefUpdate+0x294>)
1a0004b8:	2200      	movs	r2, #0
1a0004ba:	701a      	strb	r2, [r3, #0]
      default:
         lcdGoToXY(1,1);
1a0004bc:	2101      	movs	r1, #1
1a0004be:	4608      	mov	r0, r1
1a0004c0:	f000 fcd2 	bl	1a000e68 <lcdGoToXY>
         lcdSendStringRaw("Error           ");
1a0004c4:	4852      	ldr	r0, [pc, #328]	; (1a000610 <mefUpdate+0x2a8>)
1a0004c6:	f000 fd4a 	bl	1a000f5e <lcdSendStringRaw>
         lcdGoToXY(1,2);
1a0004ca:	2102      	movs	r1, #2
1a0004cc:	2001      	movs	r0, #1
1a0004ce:	f000 fccb 	bl	1a000e68 <lcdGoToXY>
         lcdSendStringRaw("Espere por favor");
1a0004d2:	4850      	ldr	r0, [pc, #320]	; (1a000614 <mefUpdate+0x2ac>)
1a0004d4:	f000 fd43 	bl	1a000f5e <lcdSendStringRaw>
         break;
   }  
   
   //***********************************************************************
   switch (estado) {
1a0004d8:	4b48      	ldr	r3, [pc, #288]	; (1a0005fc <mefUpdate+0x294>)
1a0004da:	781b      	ldrb	r3, [r3, #0]
1a0004dc:	2b07      	cmp	r3, #7
1a0004de:	f200 80b1 	bhi.w	1a000644 <mefUpdate+0x2dc>
1a0004e2:	e8df f003 	tbb	[pc, r3]
1a0004e6:	1504      	.short	0x1504
1a0004e8:	5d4b3c24 	.word	0x5d4b3c24
1a0004ec:	7b6c      	.short	0x7b6c
      uint8_t bufferG[4];
        case PRINCIPAL:
            lcdGoToXY(1, 1);
1a0004ee:	2101      	movs	r1, #1
1a0004f0:	4608      	mov	r0, r1
1a0004f2:	f000 fcb9 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("HH:MM           "); // Simula la hora
1a0004f6:	4848      	ldr	r0, [pc, #288]	; (1a000618 <mefUpdate+0x2b0>)
1a0004f8:	f000 fd31 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1, 2);
1a0004fc:	2102      	movs	r1, #2
1a0004fe:	2001      	movs	r0, #1
1a000500:	f000 fcb2 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Porcentaje comida");
1a000504:	4845      	ldr	r0, [pc, #276]	; (1a00061c <mefUpdate+0x2b4>)
1a000506:	f000 fd2a 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1, 2);
            lcdSendStringRaw("Espere por favor");
            break;
    }
   
1a00050a:	b003      	add	sp, #12
1a00050c:	f85d fb04 	ldr.w	pc, [sp], #4
            lcdGoToXY(1, 1);
1a000510:	2101      	movs	r1, #1
1a000512:	4608      	mov	r0, r1
1a000514:	f000 fca8 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Eleg cant comida");
1a000518:	4841      	ldr	r0, [pc, #260]	; (1a000620 <mefUpdate+0x2b8>)
1a00051a:	f000 fd20 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1, 2);
1a00051e:	2102      	movs	r1, #2
1a000520:	2001      	movs	r0, #1
1a000522:	f000 fca1 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("                ");
1a000526:	483f      	ldr	r0, [pc, #252]	; (1a000624 <mefUpdate+0x2bc>)
1a000528:	f000 fd19 	bl	1a000f5e <lcdSendStringRaw>
            break;
1a00052c:	e7ed      	b.n	1a00050a <mefUpdate+0x1a2>
            lcdGoToXY(1,1);
1a00052e:	2101      	movs	r1, #1
1a000530:	4608      	mov	r0, r1
1a000532:	f000 fc99 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Eleg cant comida");
1a000536:	483a      	ldr	r0, [pc, #232]	; (1a000620 <mefUpdate+0x2b8>)
1a000538:	f000 fd11 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1,2);
1a00053c:	2102      	movs	r1, #2
1a00053e:	2001      	movs	r0, #1
1a000540:	f000 fc92 	bl	1a000e68 <lcdGoToXY>
            sprintf(bufferG,"%d",gramos);
1a000544:	4b2e      	ldr	r3, [pc, #184]	; (1a000600 <mefUpdate+0x298>)
1a000546:	781a      	ldrb	r2, [r3, #0]
1a000548:	4937      	ldr	r1, [pc, #220]	; (1a000628 <mefUpdate+0x2c0>)
1a00054a:	a801      	add	r0, sp, #4
1a00054c:	f001 fdf0 	bl	1a002130 <siprintf>
            lcdSendStringRaw(bufferG);
1a000550:	a801      	add	r0, sp, #4
1a000552:	f000 fd04 	bl	1a000f5e <lcdSendStringRaw>
            lcdSendStringRaw(" gramos      ");
1a000556:	4835      	ldr	r0, [pc, #212]	; (1a00062c <mefUpdate+0x2c4>)
1a000558:	f000 fd01 	bl	1a000f5e <lcdSendStringRaw>
            break;
1a00055c:	e7d5      	b.n	1a00050a <mefUpdate+0x1a2>
            lcdGoToXY(1,1);
1a00055e:	2101      	movs	r1, #1
1a000560:	4608      	mov	r0, r1
1a000562:	f000 fc81 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Elegir hora     ");
1a000566:	4832      	ldr	r0, [pc, #200]	; (1a000630 <mefUpdate+0x2c8>)
1a000568:	f000 fcf9 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1,2);
1a00056c:	2102      	movs	r1, #2
1a00056e:	2001      	movs	r0, #1
1a000570:	f000 fc7a 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("                ");
1a000574:	482b      	ldr	r0, [pc, #172]	; (1a000624 <mefUpdate+0x2bc>)
1a000576:	f000 fcf2 	bl	1a000f5e <lcdSendStringRaw>
            break;
1a00057a:	e7c6      	b.n	1a00050a <mefUpdate+0x1a2>
            lcdGoToXY(1,1);
1a00057c:	2101      	movs	r1, #1
1a00057e:	4608      	mov	r0, r1
1a000580:	f000 fc72 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Elegir hora     ");
1a000584:	482a      	ldr	r0, [pc, #168]	; (1a000630 <mefUpdate+0x2c8>)
1a000586:	f000 fcea 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1,2);
1a00058a:	2102      	movs	r1, #2
1a00058c:	2001      	movs	r0, #1
1a00058e:	f000 fc6b 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw(hora);
1a000592:	481e      	ldr	r0, [pc, #120]	; (1a00060c <mefUpdate+0x2a4>)
1a000594:	f000 fce3 	bl	1a000f5e <lcdSendStringRaw>
            lcdSendStringRaw("           ");
1a000598:	4826      	ldr	r0, [pc, #152]	; (1a000634 <mefUpdate+0x2cc>)
1a00059a:	f000 fce0 	bl	1a000f5e <lcdSendStringRaw>
            break;
1a00059e:	e7b4      	b.n	1a00050a <mefUpdate+0x1a2>
            lcdGoToXY(1,1);
1a0005a0:	2101      	movs	r1, #1
1a0005a2:	4608      	mov	r0, r1
1a0005a4:	f000 fc60 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Dar comida");
1a0005a8:	4823      	ldr	r0, [pc, #140]	; (1a000638 <mefUpdate+0x2d0>)
1a0005aa:	f000 fcd8 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1,2);
1a0005ae:	2102      	movs	r1, #2
1a0005b0:	2001      	movs	r0, #1
1a0005b2:	f000 fc59 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("                ");
1a0005b6:	481b      	ldr	r0, [pc, #108]	; (1a000624 <mefUpdate+0x2bc>)
1a0005b8:	f000 fcd1 	bl	1a000f5e <lcdSendStringRaw>
            break;
1a0005bc:	e7a5      	b.n	1a00050a <mefUpdate+0x1a2>
            lcdGoToXY(1,1);
1a0005be:	2101      	movs	r1, #1
1a0005c0:	4608      	mov	r0, r1
1a0005c2:	f000 fc51 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Dar comida");
1a0005c6:	481c      	ldr	r0, [pc, #112]	; (1a000638 <mefUpdate+0x2d0>)
1a0005c8:	f000 fcc9 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1,2);
1a0005cc:	2102      	movs	r1, #2
1a0005ce:	2001      	movs	r0, #1
1a0005d0:	f000 fc4a 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Confirmar?      ");
1a0005d4:	4819      	ldr	r0, [pc, #100]	; (1a00063c <mefUpdate+0x2d4>)
1a0005d6:	f000 fcc2 	bl	1a000f5e <lcdSendStringRaw>
            break;
1a0005da:	e796      	b.n	1a00050a <mefUpdate+0x1a2>
            lcdGoToXY(1,1);
1a0005dc:	2101      	movs	r1, #1
1a0005de:	4608      	mov	r0, r1
1a0005e0:	f000 fc42 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Dispensando...  ");
1a0005e4:	4816      	ldr	r0, [pc, #88]	; (1a000640 <mefUpdate+0x2d8>)
1a0005e6:	f000 fcba 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1,2);
1a0005ea:	2102      	movs	r1, #2
1a0005ec:	2001      	movs	r0, #1
1a0005ee:	f000 fc3b 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Espere por favor");
1a0005f2:	4808      	ldr	r0, [pc, #32]	; (1a000614 <mefUpdate+0x2ac>)
1a0005f4:	f000 fcb3 	bl	1a000f5e <lcdSendStringRaw>
            break;
1a0005f8:	e787      	b.n	1a00050a <mefUpdate+0x1a2>
1a0005fa:	bf00      	nop
1a0005fc:	10000140 	.word	0x10000140
1a000600:	10000141 	.word	0x10000141
1a000604:	10000142 	.word	0x10000142
1a000608:	10000000 	.word	0x10000000
1a00060c:	1a002a5c 	.word	0x1a002a5c
1a000610:	1a0029d8 	.word	0x1a0029d8
1a000614:	1a0029ec 	.word	0x1a0029ec
1a000618:	1a002a00 	.word	0x1a002a00
1a00061c:	1a002a14 	.word	0x1a002a14
1a000620:	1a002a28 	.word	0x1a002a28
1a000624:	1a002a3c 	.word	0x1a002a3c
1a000628:	1a002a50 	.word	0x1a002a50
1a00062c:	1a002a54 	.word	0x1a002a54
1a000630:	1a002a64 	.word	0x1a002a64
1a000634:	1a002a78 	.word	0x1a002a78
1a000638:	1a002a84 	.word	0x1a002a84
1a00063c:	1a002a90 	.word	0x1a002a90
1a000640:	1a002aa4 	.word	0x1a002aa4
            lcdGoToXY(1, 1);
1a000644:	2101      	movs	r1, #1
1a000646:	4608      	mov	r0, r1
1a000648:	f000 fc0e 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Error           ");
1a00064c:	4805      	ldr	r0, [pc, #20]	; (1a000664 <mefUpdate+0x2fc>)
1a00064e:	f000 fc86 	bl	1a000f5e <lcdSendStringRaw>
            lcdGoToXY(1, 2);
1a000652:	2102      	movs	r1, #2
1a000654:	2001      	movs	r0, #1
1a000656:	f000 fc07 	bl	1a000e68 <lcdGoToXY>
            lcdSendStringRaw("Espere por favor");
1a00065a:	4803      	ldr	r0, [pc, #12]	; (1a000668 <mefUpdate+0x300>)
1a00065c:	f000 fc7f 	bl	1a000f5e <lcdSendStringRaw>
1a000660:	e753      	b.n	1a00050a <mefUpdate+0x1a2>
1a000662:	bf00      	nop
1a000664:	1a0029d8 	.word	0x1a0029d8
1a000668:	1a0029ec 	.word	0x1a0029ec

1a00066c <encoderInit>:
static uint8_t CLK_PIN;
static uint8_t DT_PIN;
static uint8_t SW_PIN;
static uint8_t SENS;
static uint8_t ultEst;
void encoderInit(uint8_t clk,uint8_t dt,uint8_t sw,uint8_t sens){
1a00066c:	b570      	push	{r4, r5, r6, lr}
   CLK_PIN=clk;
1a00066e:	4c0c      	ldr	r4, [pc, #48]	; (1a0006a0 <encoderInit+0x34>)
1a000670:	7020      	strb	r0, [r4, #0]
   DT_PIN=dt;
1a000672:	4e0c      	ldr	r6, [pc, #48]	; (1a0006a4 <encoderInit+0x38>)
1a000674:	7031      	strb	r1, [r6, #0]
   SW_PIN=sw;
1a000676:	4d0c      	ldr	r5, [pc, #48]	; (1a0006a8 <encoderInit+0x3c>)
1a000678:	702a      	strb	r2, [r5, #0]
   SENS=sens;
1a00067a:	4a0c      	ldr	r2, [pc, #48]	; (1a0006ac <encoderInit+0x40>)
1a00067c:	7013      	strb	r3, [r2, #0]
   gpioConfig(CLK_PIN,GPIO_INPUT);
1a00067e:	2100      	movs	r1, #0
1a000680:	f000 f8ba 	bl	1a0007f8 <gpioInit>
   gpioConfig(DT_PIN,GPIO_INPUT);
1a000684:	2100      	movs	r1, #0
1a000686:	7830      	ldrb	r0, [r6, #0]
1a000688:	f000 f8b6 	bl	1a0007f8 <gpioInit>
   gpioConfig(SW_PIN,GPIO_INPUT_PULLUP);
1a00068c:	2102      	movs	r1, #2
1a00068e:	7828      	ldrb	r0, [r5, #0]
1a000690:	f000 f8b2 	bl	1a0007f8 <gpioInit>
   ultEst=gpioRead(CLK_PIN);
1a000694:	7820      	ldrb	r0, [r4, #0]
1a000696:	f000 f9a4 	bl	1a0009e2 <gpioRead>
1a00069a:	4b05      	ldr	r3, [pc, #20]	; (1a0006b0 <encoderInit+0x44>)
1a00069c:	7018      	strb	r0, [r3, #0]
}
1a00069e:	bd70      	pop	{r4, r5, r6, pc}
1a0006a0:	10000143 	.word	0x10000143
1a0006a4:	10000144 	.word	0x10000144
1a0006a8:	10000146 	.word	0x10000146
1a0006ac:	10000145 	.word	0x10000145
1a0006b0:	1000014d 	.word	0x1000014d

1a0006b4 <encoderRead>:

uint8_t encoderRead(uint8_t* estadoBoton){
1a0006b4:	b538      	push	{r3, r4, r5, lr}
1a0006b6:	4605      	mov	r5, r0
   static uint8_t estadoAnt=0;
   static uint8_t estadoAct=0;
   static uint8_t cambiandoEstado=0;
   
   uint8_t giro;
   uint8_t est = gpioRead(CLK_PIN);
1a0006b8:	4b30      	ldr	r3, [pc, #192]	; (1a00077c <encoderRead+0xc8>)
1a0006ba:	7818      	ldrb	r0, [r3, #0]
1a0006bc:	f000 f991 	bl	1a0009e2 <gpioRead>
1a0006c0:	4604      	mov	r4, r0
   if(ultEst != est){
1a0006c2:	4b2f      	ldr	r3, [pc, #188]	; (1a000780 <encoderRead+0xcc>)
1a0006c4:	781b      	ldrb	r3, [r3, #0]
1a0006c6:	4283      	cmp	r3, r0
1a0006c8:	d122      	bne.n	1a000710 <encoderRead+0x5c>
      else{
         cont2++;
         cont1=0;
      }
   }
   ultEst=est;
1a0006ca:	4b2d      	ldr	r3, [pc, #180]	; (1a000780 <encoderRead+0xcc>)
1a0006cc:	701c      	strb	r4, [r3, #0]
   
   if(++tiempo >= 20){
1a0006ce:	4a2d      	ldr	r2, [pc, #180]	; (1a000784 <encoderRead+0xd0>)
1a0006d0:	7813      	ldrb	r3, [r2, #0]
1a0006d2:	3301      	adds	r3, #1
1a0006d4:	b2db      	uxtb	r3, r3
1a0006d6:	7013      	strb	r3, [r2, #0]
1a0006d8:	2b13      	cmp	r3, #19
1a0006da:	d82f      	bhi.n	1a00073c <encoderRead+0x88>
           *estadoBoton = !estadoAct;
           cambiandoEstado = 0;
       }
    }
   else{
      if(estadoAct != estadoAnt){
1a0006dc:	4b2a      	ldr	r3, [pc, #168]	; (1a000788 <encoderRead+0xd4>)
1a0006de:	781b      	ldrb	r3, [r3, #0]
1a0006e0:	4a2a      	ldr	r2, [pc, #168]	; (1a00078c <encoderRead+0xd8>)
1a0006e2:	7812      	ldrb	r2, [r2, #0]
1a0006e4:	4293      	cmp	r3, r2
1a0006e6:	d007      	beq.n	1a0006f8 <encoderRead+0x44>
         estadoAnt = estadoAct;
1a0006e8:	4a28      	ldr	r2, [pc, #160]	; (1a00078c <encoderRead+0xd8>)
1a0006ea:	7013      	strb	r3, [r2, #0]
         tiempo = 0;
1a0006ec:	4b25      	ldr	r3, [pc, #148]	; (1a000784 <encoderRead+0xd0>)
1a0006ee:	2200      	movs	r2, #0
1a0006f0:	701a      	strb	r2, [r3, #0]
         cambiandoEstado = 1;
1a0006f2:	4b27      	ldr	r3, [pc, #156]	; (1a000790 <encoderRead+0xdc>)
1a0006f4:	2201      	movs	r2, #1
1a0006f6:	701a      	strb	r2, [r3, #0]
       }
   }
      
      if(cont1==SENS){
1a0006f8:	4b26      	ldr	r3, [pc, #152]	; (1a000794 <encoderRead+0xe0>)
1a0006fa:	781a      	ldrb	r2, [r3, #0]
1a0006fc:	4b26      	ldr	r3, [pc, #152]	; (1a000798 <encoderRead+0xe4>)
1a0006fe:	781b      	ldrb	r3, [r3, #0]
1a000700:	429a      	cmp	r2, r3
1a000702:	d031      	beq.n	1a000768 <encoderRead+0xb4>
         cont1=0;
         return 1;
      }
      if(cont2==SENS){
1a000704:	4a25      	ldr	r2, [pc, #148]	; (1a00079c <encoderRead+0xe8>)
1a000706:	7812      	ldrb	r2, [r2, #0]
1a000708:	4293      	cmp	r3, r2
1a00070a:	d032      	beq.n	1a000772 <encoderRead+0xbe>
         cont2=0;
         return 2;         
      }
      return 0;
1a00070c:	2000      	movs	r0, #0
      
1a00070e:	bd38      	pop	{r3, r4, r5, pc}
      if(est != gpioRead(DT_PIN)){
1a000710:	4b23      	ldr	r3, [pc, #140]	; (1a0007a0 <encoderRead+0xec>)
1a000712:	7818      	ldrb	r0, [r3, #0]
1a000714:	f000 f965 	bl	1a0009e2 <gpioRead>
1a000718:	42a0      	cmp	r0, r4
1a00071a:	d007      	beq.n	1a00072c <encoderRead+0x78>
         cont1++;
1a00071c:	4a1d      	ldr	r2, [pc, #116]	; (1a000794 <encoderRead+0xe0>)
1a00071e:	7813      	ldrb	r3, [r2, #0]
1a000720:	3301      	adds	r3, #1
1a000722:	7013      	strb	r3, [r2, #0]
         cont2=0;
1a000724:	4b1d      	ldr	r3, [pc, #116]	; (1a00079c <encoderRead+0xe8>)
1a000726:	2200      	movs	r2, #0
1a000728:	701a      	strb	r2, [r3, #0]
1a00072a:	e7ce      	b.n	1a0006ca <encoderRead+0x16>
         cont2++;
1a00072c:	4a1b      	ldr	r2, [pc, #108]	; (1a00079c <encoderRead+0xe8>)
1a00072e:	7813      	ldrb	r3, [r2, #0]
1a000730:	3301      	adds	r3, #1
1a000732:	7013      	strb	r3, [r2, #0]
         cont1=0;
1a000734:	4b17      	ldr	r3, [pc, #92]	; (1a000794 <encoderRead+0xe0>)
1a000736:	2200      	movs	r2, #0
1a000738:	701a      	strb	r2, [r3, #0]
1a00073a:	e7c6      	b.n	1a0006ca <encoderRead+0x16>
       estadoAct = gpioRead(SW_PIN);
1a00073c:	4b19      	ldr	r3, [pc, #100]	; (1a0007a4 <encoderRead+0xf0>)
1a00073e:	7818      	ldrb	r0, [r3, #0]
1a000740:	f000 f94f 	bl	1a0009e2 <gpioRead>
1a000744:	4b10      	ldr	r3, [pc, #64]	; (1a000788 <encoderRead+0xd4>)
1a000746:	7018      	strb	r0, [r3, #0]
       if(cambiandoEstado && estadoAct == estadoAnt){
1a000748:	4b11      	ldr	r3, [pc, #68]	; (1a000790 <encoderRead+0xdc>)
1a00074a:	781b      	ldrb	r3, [r3, #0]
1a00074c:	2b00      	cmp	r3, #0
1a00074e:	d0d3      	beq.n	1a0006f8 <encoderRead+0x44>
1a000750:	4b0e      	ldr	r3, [pc, #56]	; (1a00078c <encoderRead+0xd8>)
1a000752:	781b      	ldrb	r3, [r3, #0]
1a000754:	4298      	cmp	r0, r3
1a000756:	d1cf      	bne.n	1a0006f8 <encoderRead+0x44>
           *estadoBoton = !estadoAct;
1a000758:	fab0 f080 	clz	r0, r0
1a00075c:	0940      	lsrs	r0, r0, #5
1a00075e:	7028      	strb	r0, [r5, #0]
           cambiandoEstado = 0;
1a000760:	4b0b      	ldr	r3, [pc, #44]	; (1a000790 <encoderRead+0xdc>)
1a000762:	2200      	movs	r2, #0
1a000764:	701a      	strb	r2, [r3, #0]
1a000766:	e7c7      	b.n	1a0006f8 <encoderRead+0x44>
         cont1=0;
1a000768:	4b0a      	ldr	r3, [pc, #40]	; (1a000794 <encoderRead+0xe0>)
1a00076a:	2200      	movs	r2, #0
1a00076c:	701a      	strb	r2, [r3, #0]
         return 1;
1a00076e:	2001      	movs	r0, #1
1a000770:	e7cd      	b.n	1a00070e <encoderRead+0x5a>
         cont2=0;
1a000772:	4b0a      	ldr	r3, [pc, #40]	; (1a00079c <encoderRead+0xe8>)
1a000774:	2200      	movs	r2, #0
1a000776:	701a      	strb	r2, [r3, #0]
         return 2;         
1a000778:	2002      	movs	r0, #2
1a00077a:	e7c8      	b.n	1a00070e <encoderRead+0x5a>
1a00077c:	10000143 	.word	0x10000143
1a000780:	1000014d 	.word	0x1000014d
1a000784:	1000014c 	.word	0x1000014c
1a000788:	1000014a 	.word	0x1000014a
1a00078c:	1000014b 	.word	0x1000014b
1a000790:	10000147 	.word	0x10000147
1a000794:	10000148 	.word	0x10000148
1a000798:	10000145 	.word	0x10000145
1a00079c:	10000149 	.word	0x10000149
1a0007a0:	10000144 	.word	0x10000144
1a0007a4:	10000146 	.word	0x10000146

1a0007a8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0007a8:	4b04      	ldr	r3, [pc, #16]	; (1a0007bc <cyclesCounterInit+0x14>)
1a0007aa:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a0007ac:	4b04      	ldr	r3, [pc, #16]	; (1a0007c0 <cyclesCounterInit+0x18>)
1a0007ae:	681a      	ldr	r2, [r3, #0]
1a0007b0:	6813      	ldr	r3, [r2, #0]
1a0007b2:	f043 0301 	orr.w	r3, r3, #1
1a0007b6:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0007b8:	2001      	movs	r0, #1
1a0007ba:	4770      	bx	lr
1a0007bc:	10000010 	.word	0x10000010
1a0007c0:	10000014 	.word	0x10000014

1a0007c4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0007c4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0007c6:	4d0b      	ldr	r5, [pc, #44]	; (1a0007f4 <gpioObtainPinInit+0x30>)
1a0007c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0007cc:	182c      	adds	r4, r5, r0
1a0007ce:	5628      	ldrsb	r0, [r5, r0]
1a0007d0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0007d2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0007d6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0007d8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0007dc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0007de:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0007e2:	9b02      	ldr	r3, [sp, #8]
1a0007e4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0007e6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0007ea:	9b03      	ldr	r3, [sp, #12]
1a0007ec:	701a      	strb	r2, [r3, #0]
}
1a0007ee:	bc30      	pop	{r4, r5}
1a0007f0:	4770      	bx	lr
1a0007f2:	bf00      	nop
1a0007f4:	1a002ad8 	.word	0x1a002ad8

1a0007f8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0007f8:	b570      	push	{r4, r5, r6, lr}
1a0007fa:	b084      	sub	sp, #16
1a0007fc:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0007fe:	2300      	movs	r3, #0
1a000800:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000804:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000808:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00080c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000810:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000814:	f10d 030b 	add.w	r3, sp, #11
1a000818:	9301      	str	r3, [sp, #4]
1a00081a:	ab03      	add	r3, sp, #12
1a00081c:	9300      	str	r3, [sp, #0]
1a00081e:	f10d 030d 	add.w	r3, sp, #13
1a000822:	f10d 020e 	add.w	r2, sp, #14
1a000826:	f10d 010f 	add.w	r1, sp, #15
1a00082a:	f7ff ffcb 	bl	1a0007c4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00082e:	2c05      	cmp	r4, #5
1a000830:	f200 80a5 	bhi.w	1a00097e <gpioInit+0x186>
1a000834:	e8df f004 	tbb	[pc, r4]
1a000838:	45278109 	.word	0x45278109
1a00083c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00083e:	4851      	ldr	r0, [pc, #324]	; (1a000984 <gpioInit+0x18c>)
1a000840:	f000 fdbc 	bl	1a0013bc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a000844:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a000846:	b004      	add	sp, #16
1a000848:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00084a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00084e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000852:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000856:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00085a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00085e:	494a      	ldr	r1, [pc, #296]	; (1a000988 <gpioInit+0x190>)
1a000860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000864:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000868:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00086c:	2001      	movs	r0, #1
1a00086e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a000872:	4c44      	ldr	r4, [pc, #272]	; (1a000984 <gpioInit+0x18c>)
1a000874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000878:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00087c:	ea22 0201 	bic.w	r2, r2, r1
1a000880:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000884:	e7df      	b.n	1a000846 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000886:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00088a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00088e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000892:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a000896:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00089a:	493b      	ldr	r1, [pc, #236]	; (1a000988 <gpioInit+0x190>)
1a00089c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0008a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0008a4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0008a8:	2001      	movs	r0, #1
1a0008aa:	fa00 f102 	lsl.w	r1, r0, r2
1a0008ae:	4c35      	ldr	r4, [pc, #212]	; (1a000984 <gpioInit+0x18c>)
1a0008b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0008b4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0008b8:	ea22 0201 	bic.w	r2, r2, r1
1a0008bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0008c0:	e7c1      	b.n	1a000846 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0008c2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0008c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0008ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0008ce:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0008d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0008d6:	492c      	ldr	r1, [pc, #176]	; (1a000988 <gpioInit+0x190>)
1a0008d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0008dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0008e0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0008e4:	2001      	movs	r0, #1
1a0008e6:	fa00 f102 	lsl.w	r1, r0, r2
1a0008ea:	4c26      	ldr	r4, [pc, #152]	; (1a000984 <gpioInit+0x18c>)
1a0008ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0008f0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0008f4:	ea22 0201 	bic.w	r2, r2, r1
1a0008f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0008fc:	e7a3      	b.n	1a000846 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0008fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000902:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000906:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00090a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00090e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000912:	491d      	ldr	r1, [pc, #116]	; (1a000988 <gpioInit+0x190>)
1a000914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000918:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00091c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000920:	2001      	movs	r0, #1
1a000922:	fa00 f102 	lsl.w	r1, r0, r2
1a000926:	4c17      	ldr	r4, [pc, #92]	; (1a000984 <gpioInit+0x18c>)
1a000928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00092c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000930:	ea22 0201 	bic.w	r2, r2, r1
1a000934:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000938:	e785      	b.n	1a000846 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00093a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00093e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000942:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000946:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00094a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00094e:	490e      	ldr	r1, [pc, #56]	; (1a000988 <gpioInit+0x190>)
1a000950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a000954:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a000958:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00095c:	2001      	movs	r0, #1
1a00095e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a000962:	4b08      	ldr	r3, [pc, #32]	; (1a000984 <gpioInit+0x18c>)
1a000964:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000968:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a00096c:	4331      	orrs	r1, r6
1a00096e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a000972:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a000974:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a000978:	2100      	movs	r1, #0
1a00097a:	5499      	strb	r1, [r3, r2]
1a00097c:	e763      	b.n	1a000846 <gpioInit+0x4e>
      ret_val = 0;
1a00097e:	2000      	movs	r0, #0
1a000980:	e761      	b.n	1a000846 <gpioInit+0x4e>
1a000982:	bf00      	nop
1a000984:	400f4000 	.word	0x400f4000
1a000988:	40086000 	.word	0x40086000

1a00098c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a00098c:	b510      	push	{r4, lr}
1a00098e:	b084      	sub	sp, #16
1a000990:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000992:	2300      	movs	r3, #0
1a000994:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000998:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00099c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0009a0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0009a4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0009a8:	f10d 030b 	add.w	r3, sp, #11
1a0009ac:	9301      	str	r3, [sp, #4]
1a0009ae:	ab03      	add	r3, sp, #12
1a0009b0:	9300      	str	r3, [sp, #0]
1a0009b2:	f10d 030d 	add.w	r3, sp, #13
1a0009b6:	f10d 020e 	add.w	r2, sp, #14
1a0009ba:	f10d 010f 	add.w	r1, sp, #15
1a0009be:	f7ff ff01 	bl	1a0007c4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0009c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0009c6:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0009ca:	3400      	adds	r4, #0
1a0009cc:	bf18      	it	ne
1a0009ce:	2401      	movne	r4, #1
1a0009d0:	015b      	lsls	r3, r3, #5
1a0009d2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0009d6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0009da:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0009dc:	2001      	movs	r0, #1
1a0009de:	b004      	add	sp, #16
1a0009e0:	bd10      	pop	{r4, pc}

1a0009e2 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0009e2:	b500      	push	{lr}
1a0009e4:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0009e6:	2300      	movs	r3, #0
1a0009e8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0009ec:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0009f0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0009f4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0009f8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0009fc:	f10d 030b 	add.w	r3, sp, #11
1a000a00:	9301      	str	r3, [sp, #4]
1a000a02:	ab03      	add	r3, sp, #12
1a000a04:	9300      	str	r3, [sp, #0]
1a000a06:	f10d 030d 	add.w	r3, sp, #13
1a000a0a:	f10d 020e 	add.w	r2, sp, #14
1a000a0e:	f10d 010f 	add.w	r1, sp, #15
1a000a12:	f7ff fed7 	bl	1a0007c4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a000a16:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a000a1a:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a000a1e:	015b      	lsls	r3, r3, #5
1a000a20:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a000a24:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a000a28:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a000a2a:	3000      	adds	r0, #0
1a000a2c:	bf18      	it	ne
1a000a2e:	2001      	movne	r0, #1
1a000a30:	b005      	add	sp, #20
1a000a32:	f85d fb04 	ldr.w	pc, [sp], #4

1a000a36 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a000a36:	e7fe      	b.n	1a000a36 <errorOcurred>

1a000a38 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a000a38:	4770      	bx	lr
1a000a3a:	Address 0x1a000a3a is out of bounds.


1a000a3c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a000a3c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000a3e:	2400      	movs	r4, #0
1a000a40:	e001      	b.n	1a000a46 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000a42:	3401      	adds	r4, #1
1a000a44:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000a46:	2c03      	cmp	r4, #3
1a000a48:	d812      	bhi.n	1a000a70 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a000a4a:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000a4c:	4b09      	ldr	r3, [pc, #36]	; (1a000a74 <TIMER0_IRQHandler+0x38>)
1a000a4e:	681a      	ldr	r2, [r3, #0]
1a000a50:	f004 010f 	and.w	r1, r4, #15
1a000a54:	2301      	movs	r3, #1
1a000a56:	408b      	lsls	r3, r1
1a000a58:	421a      	tst	r2, r3
1a000a5a:	d0f2      	beq.n	1a000a42 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000a5c:	4b06      	ldr	r3, [pc, #24]	; (1a000a78 <TIMER0_IRQHandler+0x3c>)
1a000a5e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000a62:	2000      	movs	r0, #0
1a000a64:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000a66:	2301      	movs	r3, #1
1a000a68:	40ab      	lsls	r3, r5
1a000a6a:	4a02      	ldr	r2, [pc, #8]	; (1a000a74 <TIMER0_IRQHandler+0x38>)
1a000a6c:	6013      	str	r3, [r2, #0]
1a000a6e:	e7e8      	b.n	1a000a42 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a000a70:	bd38      	pop	{r3, r4, r5, pc}
1a000a72:	bf00      	nop
1a000a74:	40084000 	.word	0x40084000
1a000a78:	10000018 	.word	0x10000018

1a000a7c <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a000a7c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000a7e:	2400      	movs	r4, #0
1a000a80:	e001      	b.n	1a000a86 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000a82:	3401      	adds	r4, #1
1a000a84:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000a86:	2c03      	cmp	r4, #3
1a000a88:	d813      	bhi.n	1a000ab2 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a000a8a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000a8c:	4b09      	ldr	r3, [pc, #36]	; (1a000ab4 <TIMER1_IRQHandler+0x38>)
1a000a8e:	681a      	ldr	r2, [r3, #0]
1a000a90:	f004 010f 	and.w	r1, r4, #15
1a000a94:	2301      	movs	r3, #1
1a000a96:	408b      	lsls	r3, r1
1a000a98:	421a      	tst	r2, r3
1a000a9a:	d0f2      	beq.n	1a000a82 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000a9c:	1d23      	adds	r3, r4, #4
1a000a9e:	4a06      	ldr	r2, [pc, #24]	; (1a000ab8 <TIMER1_IRQHandler+0x3c>)
1a000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000aa4:	2000      	movs	r0, #0
1a000aa6:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000aa8:	2301      	movs	r3, #1
1a000aaa:	40ab      	lsls	r3, r5
1a000aac:	4a01      	ldr	r2, [pc, #4]	; (1a000ab4 <TIMER1_IRQHandler+0x38>)
1a000aae:	6013      	str	r3, [r2, #0]
1a000ab0:	e7e7      	b.n	1a000a82 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a000ab2:	bd38      	pop	{r3, r4, r5, pc}
1a000ab4:	40085000 	.word	0x40085000
1a000ab8:	10000018 	.word	0x10000018

1a000abc <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a000abc:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000abe:	2400      	movs	r4, #0
1a000ac0:	e001      	b.n	1a000ac6 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000ac2:	3401      	adds	r4, #1
1a000ac4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000ac6:	2c03      	cmp	r4, #3
1a000ac8:	d814      	bhi.n	1a000af4 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a000aca:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000acc:	4b0a      	ldr	r3, [pc, #40]	; (1a000af8 <TIMER2_IRQHandler+0x3c>)
1a000ace:	681a      	ldr	r2, [r3, #0]
1a000ad0:	f004 010f 	and.w	r1, r4, #15
1a000ad4:	2301      	movs	r3, #1
1a000ad6:	408b      	lsls	r3, r1
1a000ad8:	421a      	tst	r2, r3
1a000ada:	d0f2      	beq.n	1a000ac2 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000adc:	f104 0308 	add.w	r3, r4, #8
1a000ae0:	4a06      	ldr	r2, [pc, #24]	; (1a000afc <TIMER2_IRQHandler+0x40>)
1a000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000ae6:	2000      	movs	r0, #0
1a000ae8:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000aea:	2301      	movs	r3, #1
1a000aec:	40ab      	lsls	r3, r5
1a000aee:	4a02      	ldr	r2, [pc, #8]	; (1a000af8 <TIMER2_IRQHandler+0x3c>)
1a000af0:	6013      	str	r3, [r2, #0]
1a000af2:	e7e6      	b.n	1a000ac2 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000af4:	bd38      	pop	{r3, r4, r5, pc}
1a000af6:	bf00      	nop
1a000af8:	400c3000 	.word	0x400c3000
1a000afc:	10000018 	.word	0x10000018

1a000b00 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a000b00:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000b02:	2400      	movs	r4, #0
1a000b04:	e001      	b.n	1a000b0a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000b06:	3401      	adds	r4, #1
1a000b08:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000b0a:	2c03      	cmp	r4, #3
1a000b0c:	d814      	bhi.n	1a000b38 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a000b0e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000b10:	4b0a      	ldr	r3, [pc, #40]	; (1a000b3c <TIMER3_IRQHandler+0x3c>)
1a000b12:	681a      	ldr	r2, [r3, #0]
1a000b14:	f004 010f 	and.w	r1, r4, #15
1a000b18:	2301      	movs	r3, #1
1a000b1a:	408b      	lsls	r3, r1
1a000b1c:	421a      	tst	r2, r3
1a000b1e:	d0f2      	beq.n	1a000b06 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000b20:	f104 030c 	add.w	r3, r4, #12
1a000b24:	4a06      	ldr	r2, [pc, #24]	; (1a000b40 <TIMER3_IRQHandler+0x40>)
1a000b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000b2a:	2000      	movs	r0, #0
1a000b2c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000b2e:	2301      	movs	r3, #1
1a000b30:	40ab      	lsls	r3, r5
1a000b32:	4a02      	ldr	r2, [pc, #8]	; (1a000b3c <TIMER3_IRQHandler+0x3c>)
1a000b34:	6013      	str	r3, [r2, #0]
1a000b36:	e7e6      	b.n	1a000b06 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a000b38:	bd38      	pop	{r3, r4, r5, pc}
1a000b3a:	bf00      	nop
1a000b3c:	400c4000 	.word	0x400c4000
1a000b40:	10000018 	.word	0x10000018

1a000b44 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a000b44:	4b01      	ldr	r3, [pc, #4]	; (1a000b4c <tickRead+0x8>)
1a000b46:	e9d3 0100 	ldrd	r0, r1, [r3]
1a000b4a:	4770      	bx	lr
1a000b4c:	10000158 	.word	0x10000158

1a000b50 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a000b50:	b118      	cbz	r0, 1a000b5a <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a000b52:	4b04      	ldr	r3, [pc, #16]	; (1a000b64 <tickPowerSet+0x14>)
1a000b54:	2207      	movs	r2, #7
1a000b56:	601a      	str	r2, [r3, #0]
1a000b58:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a000b5a:	4b02      	ldr	r3, [pc, #8]	; (1a000b64 <tickPowerSet+0x14>)
1a000b5c:	2200      	movs	r2, #0
1a000b5e:	601a      	str	r2, [r3, #0]
   }
}
1a000b60:	4770      	bx	lr
1a000b62:	bf00      	nop
1a000b64:	e000e010 	.word	0xe000e010

1a000b68 <tickInit>:
{
1a000b68:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a000b6a:	ea50 0401 	orrs.w	r4, r0, r1
1a000b6e:	d02a      	beq.n	1a000bc6 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a000b70:	f110 32ff 	adds.w	r2, r0, #4294967295
1a000b74:	f141 33ff 	adc.w	r3, r1, #4294967295
1a000b78:	2b00      	cmp	r3, #0
1a000b7a:	bf08      	it	eq
1a000b7c:	2a32      	cmpeq	r2, #50	; 0x32
1a000b7e:	d227      	bcs.n	1a000bd0 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a000b80:	4b14      	ldr	r3, [pc, #80]	; (1a000bd4 <tickInit+0x6c>)
1a000b82:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a000b86:	4b14      	ldr	r3, [pc, #80]	; (1a000bd8 <tickInit+0x70>)
1a000b88:	681b      	ldr	r3, [r3, #0]
1a000b8a:	fba3 4500 	umull	r4, r5, r3, r0
1a000b8e:	fb03 5501 	mla	r5, r3, r1, r5
1a000b92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000b96:	2300      	movs	r3, #0
1a000b98:	4620      	mov	r0, r4
1a000b9a:	4629      	mov	r1, r5
1a000b9c:	f001 f90c 	bl	1a001db8 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a000ba0:	3801      	subs	r0, #1
1a000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000ba6:	d209      	bcs.n	1a000bbc <tickInit+0x54>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000ba8:	4b0c      	ldr	r3, [pc, #48]	; (1a000bdc <tickInit+0x74>)
1a000baa:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000bac:	4a0c      	ldr	r2, [pc, #48]	; (1a000be0 <tickInit+0x78>)
1a000bae:	21e0      	movs	r1, #224	; 0xe0
1a000bb0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000bb4:	2200      	movs	r2, #0
1a000bb6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000bb8:	2207      	movs	r2, #7
1a000bba:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a000bbc:	2001      	movs	r0, #1
1a000bbe:	f7ff ffc7 	bl	1a000b50 <tickPowerSet>
      bool_t ret_val = 1;
1a000bc2:	2001      	movs	r0, #1
}
1a000bc4:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a000bc6:	2000      	movs	r0, #0
1a000bc8:	f7ff ffc2 	bl	1a000b50 <tickPowerSet>
         ret_val = 0;
1a000bcc:	2000      	movs	r0, #0
1a000bce:	e7f9      	b.n	1a000bc4 <tickInit+0x5c>
            ret_val = 0;
1a000bd0:	2000      	movs	r0, #0
1a000bd2:	e7f7      	b.n	1a000bc4 <tickInit+0x5c>
1a000bd4:	10000180 	.word	0x10000180
1a000bd8:	1000018c 	.word	0x1000018c
1a000bdc:	e000e010 	.word	0xe000e010
1a000be0:	e000ed00 	.word	0xe000ed00

1a000be4 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a000be4:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a000be6:	4a07      	ldr	r2, [pc, #28]	; (1a000c04 <SysTick_Handler+0x20>)
1a000be8:	6813      	ldr	r3, [r2, #0]
1a000bea:	6851      	ldr	r1, [r2, #4]
1a000bec:	3301      	adds	r3, #1
1a000bee:	f141 0100 	adc.w	r1, r1, #0
1a000bf2:	6013      	str	r3, [r2, #0]
1a000bf4:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a000bf6:	4b04      	ldr	r3, [pc, #16]	; (1a000c08 <SysTick_Handler+0x24>)
1a000bf8:	681b      	ldr	r3, [r3, #0]
1a000bfa:	b113      	cbz	r3, 1a000c02 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a000bfc:	4a03      	ldr	r2, [pc, #12]	; (1a000c0c <SysTick_Handler+0x28>)
1a000bfe:	6810      	ldr	r0, [r2, #0]
1a000c00:	4798      	blx	r3
   }
}
1a000c02:	bd08      	pop	{r3, pc}
1a000c04:	10000158 	.word	0x10000158
1a000c08:	10000160 	.word	0x10000160
1a000c0c:	10000150 	.word	0x10000150

1a000c10 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a000c10:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a000c12:	4b04      	ldr	r3, [pc, #16]	; (1a000c24 <USB0_IRQHandler+0x14>)
1a000c14:	681b      	ldr	r3, [r3, #0]
1a000c16:	681b      	ldr	r3, [r3, #0]
1a000c18:	68db      	ldr	r3, [r3, #12]
1a000c1a:	4a03      	ldr	r2, [pc, #12]	; (1a000c28 <USB0_IRQHandler+0x18>)
1a000c1c:	6810      	ldr	r0, [r2, #0]
1a000c1e:	4798      	blx	r3
}
1a000c20:	bd08      	pop	{r3, pc}
1a000c22:	bf00      	nop
1a000c24:	10000188 	.word	0x10000188
1a000c28:	10000164 	.word	0x10000164

1a000c2c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a000c2c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a000c2e:	f000 fd01 	bl	1a001634 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a000c32:	4b3a      	ldr	r3, [pc, #232]	; (1a000d1c <boardInit+0xf0>)
1a000c34:	6818      	ldr	r0, [r3, #0]
1a000c36:	f7ff fdb7 	bl	1a0007a8 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a000c3a:	2001      	movs	r0, #1
1a000c3c:	2100      	movs	r1, #0
1a000c3e:	f7ff ff93 	bl	1a000b68 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a000c42:	2105      	movs	r1, #5
1a000c44:	2000      	movs	r0, #0
1a000c46:	f7ff fdd7 	bl	1a0007f8 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a000c4a:	2100      	movs	r1, #0
1a000c4c:	2024      	movs	r0, #36	; 0x24
1a000c4e:	f7ff fdd3 	bl	1a0007f8 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a000c52:	2100      	movs	r1, #0
1a000c54:	2025      	movs	r0, #37	; 0x25
1a000c56:	f7ff fdcf 	bl	1a0007f8 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a000c5a:	2100      	movs	r1, #0
1a000c5c:	2026      	movs	r0, #38	; 0x26
1a000c5e:	f7ff fdcb 	bl	1a0007f8 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a000c62:	2100      	movs	r1, #0
1a000c64:	2027      	movs	r0, #39	; 0x27
1a000c66:	f7ff fdc7 	bl	1a0007f8 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a000c6a:	2101      	movs	r1, #1
1a000c6c:	2028      	movs	r0, #40	; 0x28
1a000c6e:	f7ff fdc3 	bl	1a0007f8 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a000c72:	2101      	movs	r1, #1
1a000c74:	2029      	movs	r0, #41	; 0x29
1a000c76:	f7ff fdbf 	bl	1a0007f8 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a000c7a:	2101      	movs	r1, #1
1a000c7c:	202a      	movs	r0, #42	; 0x2a
1a000c7e:	f7ff fdbb 	bl	1a0007f8 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a000c82:	2101      	movs	r1, #1
1a000c84:	202b      	movs	r0, #43	; 0x2b
1a000c86:	f7ff fdb7 	bl	1a0007f8 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a000c8a:	2101      	movs	r1, #1
1a000c8c:	202c      	movs	r0, #44	; 0x2c
1a000c8e:	f7ff fdb3 	bl	1a0007f8 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a000c92:	2101      	movs	r1, #1
1a000c94:	202d      	movs	r0, #45	; 0x2d
1a000c96:	f7ff fdaf 	bl	1a0007f8 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a000c9a:	2100      	movs	r1, #0
1a000c9c:	202e      	movs	r0, #46	; 0x2e
1a000c9e:	f7ff fdab 	bl	1a0007f8 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a000ca2:	2100      	movs	r1, #0
1a000ca4:	202f      	movs	r0, #47	; 0x2f
1a000ca6:	f7ff fda7 	bl	1a0007f8 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a000caa:	2100      	movs	r1, #0
1a000cac:	2030      	movs	r0, #48	; 0x30
1a000cae:	f7ff fda3 	bl	1a0007f8 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a000cb2:	2100      	movs	r1, #0
1a000cb4:	2031      	movs	r0, #49	; 0x31
1a000cb6:	f7ff fd9f 	bl	1a0007f8 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a000cba:	2100      	movs	r1, #0
1a000cbc:	2032      	movs	r0, #50	; 0x32
1a000cbe:	f7ff fd9b 	bl	1a0007f8 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a000cc2:	2100      	movs	r1, #0
1a000cc4:	2033      	movs	r0, #51	; 0x33
1a000cc6:	f7ff fd97 	bl	1a0007f8 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a000cca:	2100      	movs	r1, #0
1a000ccc:	2034      	movs	r0, #52	; 0x34
1a000cce:	f7ff fd93 	bl	1a0007f8 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a000cd2:	2100      	movs	r1, #0
1a000cd4:	2035      	movs	r0, #53	; 0x35
1a000cd6:	f7ff fd8f 	bl	1a0007f8 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a000cda:	2101      	movs	r1, #1
1a000cdc:	2036      	movs	r0, #54	; 0x36
1a000cde:	f7ff fd8b 	bl	1a0007f8 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a000ce2:	2101      	movs	r1, #1
1a000ce4:	2037      	movs	r0, #55	; 0x37
1a000ce6:	f7ff fd87 	bl	1a0007f8 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a000cea:	2101      	movs	r1, #1
1a000cec:	2038      	movs	r0, #56	; 0x38
1a000cee:	f7ff fd83 	bl	1a0007f8 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a000cf2:	2101      	movs	r1, #1
1a000cf4:	2039      	movs	r0, #57	; 0x39
1a000cf6:	f7ff fd7f 	bl	1a0007f8 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a000cfa:	2101      	movs	r1, #1
1a000cfc:	203a      	movs	r0, #58	; 0x3a
1a000cfe:	f7ff fd7b 	bl	1a0007f8 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a000d02:	2101      	movs	r1, #1
1a000d04:	203b      	movs	r0, #59	; 0x3b
1a000d06:	f7ff fd77 	bl	1a0007f8 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a000d0a:	2101      	movs	r1, #1
1a000d0c:	203c      	movs	r0, #60	; 0x3c
1a000d0e:	f7ff fd73 	bl	1a0007f8 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a000d12:	2101      	movs	r1, #1
1a000d14:	203d      	movs	r0, #61	; 0x3d
1a000d16:	f7ff fd6f 	bl	1a0007f8 <gpioInit>

}
1a000d1a:	bd08      	pop	{r3, pc}
1a000d1c:	1000018c 	.word	0x1000018c

1a000d20 <delayInaccurateUs>:

   for( i=delay; i>0; i-- );
}

void delayInaccurateUs(tick_t delay_us)
{
1a000d20:	b530      	push	{r4, r5, lr}
1a000d22:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;

   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a000d24:	1803      	adds	r3, r0, r0
1a000d26:	eb41 0201 	adc.w	r2, r1, r1
1a000d2a:	1818      	adds	r0, r3, r0
1a000d2c:	eb42 0101 	adc.w	r1, r2, r1
1a000d30:	010b      	lsls	r3, r1, #4
1a000d32:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a000d36:	0102      	lsls	r2, r0, #4
1a000d38:	1880      	adds	r0, r0, r2
1a000d3a:	eb43 0101 	adc.w	r1, r3, r1
1a000d3e:	008b      	lsls	r3, r1, #2
1a000d40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a000d44:	0082      	lsls	r2, r0, #2
1a000d46:	4610      	mov	r0, r2
1a000d48:	4619      	mov	r1, r3
1a000d4a:	220a      	movs	r2, #10
1a000d4c:	2300      	movs	r3, #0
1a000d4e:	f001 f833 	bl	1a001db8 <__aeabi_uldivmod>
1a000d52:	e9cd 0100 	strd	r0, r1, [sp]

   for( i=delay; i>0; i-- );
1a000d56:	e9dd 2300 	ldrd	r2, r3, [sp]
1a000d5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000d62:	4313      	orrs	r3, r2
1a000d64:	d008      	beq.n	1a000d78 <delayInaccurateUs+0x58>
1a000d66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000d6a:	f112 34ff 	adds.w	r4, r2, #4294967295
1a000d6e:	f143 35ff 	adc.w	r5, r3, #4294967295
1a000d72:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a000d76:	e7f2      	b.n	1a000d5e <delayInaccurateUs+0x3e>
}
1a000d78:	b005      	add	sp, #20
1a000d7a:	bd30      	pop	{r4, r5, pc}

1a000d7c <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a000d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000d80:	4680      	mov	r8, r0
1a000d82:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a000d84:	f7ff fede 	bl	1a000b44 <tickRead>
1a000d88:	4606      	mov	r6, r0
1a000d8a:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a000d8c:	f7ff feda 	bl	1a000b44 <tickRead>
1a000d90:	1b84      	subs	r4, r0, r6
1a000d92:	eb61 0507 	sbc.w	r5, r1, r7
1a000d96:	4b06      	ldr	r3, [pc, #24]	; (1a000db0 <delay+0x34>)
1a000d98:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000d9c:	4640      	mov	r0, r8
1a000d9e:	4649      	mov	r1, r9
1a000da0:	f001 f80a 	bl	1a001db8 <__aeabi_uldivmod>
1a000da4:	428d      	cmp	r5, r1
1a000da6:	bf08      	it	eq
1a000da8:	4284      	cmpeq	r4, r0
1a000daa:	d3ef      	bcc.n	1a000d8c <delay+0x10>
}
1a000dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000db0:	10000180 	.word	0x10000180

1a000db4 <lcdSendNibble>:
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider
   lcdPinWrite( LCD_HD44780_EN, OFF );    // EN = 0 for H-to-L pulse
}

static void lcdSendNibble( uint8_t nibble )
{
1a000db4:	b510      	push	{r4, lr}
1a000db6:	4604      	mov	r4, r0
   lcdPinWrite( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a000db8:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a000dbc:	2014      	movs	r0, #20
1a000dbe:	f7ff fde5 	bl	1a00098c <gpioWrite>
   lcdPinWrite( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a000dc2:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a000dc6:	2012      	movs	r0, #18
1a000dc8:	f7ff fde0 	bl	1a00098c <gpioWrite>
   lcdPinWrite( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a000dcc:	f004 0120 	and.w	r1, r4, #32
1a000dd0:	2011      	movs	r0, #17
1a000dd2:	f7ff fddb 	bl	1a00098c <gpioWrite>
   lcdPinWrite( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a000dd6:	f004 0110 	and.w	r1, r4, #16
1a000dda:	2010      	movs	r0, #16
1a000ddc:	f7ff fdd6 	bl	1a00098c <gpioWrite>
}
1a000de0:	bd10      	pop	{r4, pc}

1a000de2 <lcdEnablePulse>:
{
1a000de2:	b508      	push	{r3, lr}
   lcdPinWrite( LCD_HD44780_EN, ON );     // EN = 1 for H-to-L pulse
1a000de4:	2101      	movs	r1, #1
1a000de6:	2021      	movs	r0, #33	; 0x21
1a000de8:	f7ff fdd0 	bl	1a00098c <gpioWrite>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider
1a000dec:	2019      	movs	r0, #25
1a000dee:	2100      	movs	r1, #0
1a000df0:	f7ff ff96 	bl	1a000d20 <delayInaccurateUs>
   lcdPinWrite( LCD_HD44780_EN, OFF );    // EN = 0 for H-to-L pulse
1a000df4:	2100      	movs	r1, #0
1a000df6:	2021      	movs	r0, #33	; 0x21
1a000df8:	f7ff fdc8 	bl	1a00098c <gpioWrite>
}
1a000dfc:	bd08      	pop	{r3, pc}

1a000dfe <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a000dfe:	b510      	push	{r4, lr}
1a000e00:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a000e02:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a000e06:	f7ff ffd5 	bl	1a000db4 <lcdSendNibble>

   lcdPinWrite( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a000e0a:	2100      	movs	r1, #0
1a000e0c:	2013      	movs	r0, #19
1a000e0e:	f7ff fdbd 	bl	1a00098c <gpioWrite>
   lcdPinWrite( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a000e12:	2100      	movs	r1, #0
1a000e14:	4608      	mov	r0, r1
1a000e16:	f7ff fdb9 	bl	1a00098c <gpioWrite>

   lcdEnablePulse();
1a000e1a:	f7ff ffe2 	bl	1a000de2 <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a000e1e:	2019      	movs	r0, #25
1a000e20:	2100      	movs	r1, #0
1a000e22:	f7ff ff7d 	bl	1a000d20 <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a000e26:	0120      	lsls	r0, r4, #4
1a000e28:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a000e2c:	f7ff ffc2 	bl	1a000db4 <lcdSendNibble>
   lcdEnablePulse();
1a000e30:	f7ff ffd7 	bl	1a000de2 <lcdEnablePulse>
}
1a000e34:	bd10      	pop	{r4, pc}

1a000e36 <lcdData>:

void lcdData( uint8_t data )
{
1a000e36:	b510      	push	{r4, lr}
1a000e38:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a000e3a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a000e3e:	f7ff ffb9 	bl	1a000db4 <lcdSendNibble>

   lcdPinWrite( LCD_HD44780_RS, ON );    // RS = 1 for data
1a000e42:	2101      	movs	r1, #1
1a000e44:	2013      	movs	r0, #19
1a000e46:	f7ff fda1 	bl	1a00098c <gpioWrite>
   lcdPinWrite( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a000e4a:	2100      	movs	r1, #0
1a000e4c:	4608      	mov	r0, r1
1a000e4e:	f7ff fd9d 	bl	1a00098c <gpioWrite>

   lcdEnablePulse();
1a000e52:	f7ff ffc6 	bl	1a000de2 <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a000e56:	0120      	lsls	r0, r4, #4
1a000e58:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a000e5c:	f7ff ffaa 	bl	1a000db4 <lcdSendNibble>
   lcdEnablePulse();
1a000e60:	f7ff ffbf 	bl	1a000de2 <lcdEnablePulse>
}
1a000e64:	bd10      	pop	{r4, pc}
1a000e66:	Address 0x1a000e66 is out of bounds.


1a000e68 <lcdGoToXY>:

   lcdDelay_ms( 1 );                     // Wait
}

void lcdGoToXY( uint8_t x, uint8_t y )
{
1a000e68:	b500      	push	{lr}
1a000e6a:	b083      	sub	sp, #12
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a000e6c:	4b0a      	ldr	r3, [pc, #40]	; (1a000e98 <lcdGoToXY+0x30>)
1a000e6e:	681b      	ldr	r3, [r3, #0]
1a000e70:	9301      	str	r3, [sp, #4]
   lcdCommand( firstCharAdress[ y - 1 ] + x - 1 );
1a000e72:	3901      	subs	r1, #1
1a000e74:	ab02      	add	r3, sp, #8
1a000e76:	4419      	add	r1, r3
1a000e78:	f811 3c04 	ldrb.w	r3, [r1, #-4]
1a000e7c:	4418      	add	r0, r3
1a000e7e:	b2c0      	uxtb	r0, r0
1a000e80:	3801      	subs	r0, #1
1a000e82:	b2c0      	uxtb	r0, r0
1a000e84:	f7ff ffbb 	bl	1a000dfe <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a000e88:	2064      	movs	r0, #100	; 0x64
1a000e8a:	2100      	movs	r1, #0
1a000e8c:	f7ff ff48 	bl	1a000d20 <delayInaccurateUs>
}
1a000e90:	b003      	add	sp, #12
1a000e92:	f85d fb04 	ldr.w	pc, [sp], #4
1a000e96:	bf00      	nop
1a000e98:	1a002c10 	.word	0x1a002c10

1a000e9c <lcdClear>:

void lcdClear( void )
{
1a000e9c:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a000e9e:	2001      	movs	r0, #1
1a000ea0:	f7ff ffad 	bl	1a000dfe <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a000ea4:	2003      	movs	r0, #3
1a000ea6:	2100      	movs	r1, #0
1a000ea8:	f7ff ff68 	bl	1a000d7c <delay>
}
1a000eac:	bd08      	pop	{r3, pc}

1a000eae <lcdInit>:
{
1a000eae:	b508      	push	{r3, lr}
   lcdInitPinAsOutput( LCD_HD44780_RS );
1a000eb0:	2101      	movs	r1, #1
1a000eb2:	2013      	movs	r0, #19
1a000eb4:	f7ff fca0 	bl	1a0007f8 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_RW );
1a000eb8:	2101      	movs	r1, #1
1a000eba:	2000      	movs	r0, #0
1a000ebc:	f7ff fc9c 	bl	1a0007f8 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_EN );
1a000ec0:	2101      	movs	r1, #1
1a000ec2:	2021      	movs	r0, #33	; 0x21
1a000ec4:	f7ff fc98 	bl	1a0007f8 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D4 );
1a000ec8:	2101      	movs	r1, #1
1a000eca:	2010      	movs	r0, #16
1a000ecc:	f7ff fc94 	bl	1a0007f8 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D5 );
1a000ed0:	2101      	movs	r1, #1
1a000ed2:	2011      	movs	r0, #17
1a000ed4:	f7ff fc90 	bl	1a0007f8 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D6 );
1a000ed8:	2101      	movs	r1, #1
1a000eda:	2012      	movs	r0, #18
1a000edc:	f7ff fc8c 	bl	1a0007f8 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D7 );
1a000ee0:	2101      	movs	r1, #1
1a000ee2:	2014      	movs	r0, #20
1a000ee4:	f7ff fc88 	bl	1a0007f8 <gpioInit>
   lcdPinWrite( LCD_HD44780_RW, OFF );   // RW = 0
1a000ee8:	2100      	movs	r1, #0
1a000eea:	4608      	mov	r0, r1
1a000eec:	f7ff fd4e 	bl	1a00098c <gpioWrite>
   lcdPinWrite( LCD_HD44780_RS, OFF );   // RS = 0
1a000ef0:	2100      	movs	r1, #0
1a000ef2:	2013      	movs	r0, #19
1a000ef4:	f7ff fd4a 	bl	1a00098c <gpioWrite>
   lcdPinWrite( LCD_HD44780_EN, OFF );   // EN = 0
1a000ef8:	2100      	movs	r1, #0
1a000efa:	2021      	movs	r0, #33	; 0x21
1a000efc:	f7ff fd46 	bl	1a00098c <gpioWrite>
   lcdDelay_ms( LCD_STARTUP_WAIT_MS );   // Wait for stable power
1a000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000f04:	2100      	movs	r1, #0
1a000f06:	f7ff ff39 	bl	1a000d7c <delay>
   lcdCommand( 0x33 );                   // Command 0x33 for 4-bit mode
1a000f0a:	2033      	movs	r0, #51	; 0x33
1a000f0c:	f7ff ff77 	bl	1a000dfe <lcdCommand>
   lcdCommandDelay();                    // Wait
1a000f10:	202d      	movs	r0, #45	; 0x2d
1a000f12:	2100      	movs	r1, #0
1a000f14:	f7ff ff04 	bl	1a000d20 <delayInaccurateUs>
   lcdCommand( 0x32 );                   // Command 0x32 for 4-bit mode
1a000f18:	2032      	movs	r0, #50	; 0x32
1a000f1a:	f7ff ff70 	bl	1a000dfe <lcdCommand>
   lcdCommandDelay();                    // Wait
1a000f1e:	202d      	movs	r0, #45	; 0x2d
1a000f20:	2100      	movs	r1, #0
1a000f22:	f7ff fefd 	bl	1a000d20 <delayInaccurateUs>
   lcdCommand( 0x28 );                   // Command 0x28 for 4-bit mode
1a000f26:	2028      	movs	r0, #40	; 0x28
1a000f28:	f7ff ff69 	bl	1a000dfe <lcdCommand>
   lcdCommandDelay();                    // Wait
1a000f2c:	202d      	movs	r0, #45	; 0x2d
1a000f2e:	2100      	movs	r1, #0
1a000f30:	f7ff fef6 	bl	1a000d20 <delayInaccurateUs>
   lcdCommand( 0x0E );                   // Command 0x0E for display on, cursor on
1a000f34:	200e      	movs	r0, #14
1a000f36:	f7ff ff62 	bl	1a000dfe <lcdCommand>
   lcdCommandDelay();                    // Wait
1a000f3a:	202d      	movs	r0, #45	; 0x2d
1a000f3c:	2100      	movs	r1, #0
1a000f3e:	f7ff feef 	bl	1a000d20 <delayInaccurateUs>
   lcdClear();                           // Command for clear LCD
1a000f42:	f7ff ffab 	bl	1a000e9c <lcdClear>
   lcdCommand( 0x06 );                   // Command 0x06 for Shift cursor right
1a000f46:	2006      	movs	r0, #6
1a000f48:	f7ff ff59 	bl	1a000dfe <lcdCommand>
   lcdCommandDelay();                    // Wait
1a000f4c:	202d      	movs	r0, #45	; 0x2d
1a000f4e:	2100      	movs	r1, #0
1a000f50:	f7ff fee6 	bl	1a000d20 <delayInaccurateUs>
   lcdDelay_ms( 1 );                     // Wait
1a000f54:	2001      	movs	r0, #1
1a000f56:	2100      	movs	r1, #0
1a000f58:	f7ff ff10 	bl	1a000d7c <delay>
}
1a000f5c:	bd08      	pop	{r3, pc}

1a000f5e <lcdSendStringRaw>:

void lcdSendStringRaw( char* str )
{
1a000f5e:	b538      	push	{r3, r4, r5, lr}
1a000f60:	4605      	mov	r5, r0
   uint8_t i = 0;
1a000f62:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a000f64:	5d28      	ldrb	r0, [r5, r4]
1a000f66:	b120      	cbz	r0, 1a000f72 <lcdSendStringRaw+0x14>
      lcdData( str[i] );
1a000f68:	f7ff ff65 	bl	1a000e36 <lcdData>
      i++;
1a000f6c:	3401      	adds	r4, #1
1a000f6e:	b2e4      	uxtb	r4, r4
1a000f70:	e7f8      	b.n	1a000f64 <lcdSendStringRaw+0x6>
   }
}
1a000f72:	bd38      	pop	{r3, r4, r5, pc}

1a000f74 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a000f74:	2301      	movs	r3, #1
1a000f76:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000f7a:	4b01      	ldr	r3, [pc, #4]	; (1a000f80 <clearInterrupt+0xc>)
1a000f7c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a000f7e:	4770      	bx	lr
1a000f80:	40087000 	.word	0x40087000

1a000f84 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a000f86:	4b12      	ldr	r3, [pc, #72]	; (1a000fd0 <serveInterrupt+0x4c>)
1a000f88:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a000f8a:	4b12      	ldr	r3, [pc, #72]	; (1a000fd4 <serveInterrupt+0x50>)
1a000f8c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a000f8e:	2301      	movs	r3, #1
1a000f90:	4083      	lsls	r3, r0
1a000f92:	420b      	tst	r3, r1
1a000f94:	d00c      	beq.n	1a000fb0 <serveInterrupt+0x2c>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a000f96:	4910      	ldr	r1, [pc, #64]	; (1a000fd8 <serveInterrupt+0x54>)
1a000f98:	688c      	ldr	r4, [r1, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a000f9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a000f9e:	00d1      	lsls	r1, r2, #3
1a000fa0:	4a0e      	ldr	r2, [pc, #56]	; (1a000fdc <serveInterrupt+0x58>)
1a000fa2:	440a      	add	r2, r1
1a000fa4:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a000fa6:	4a0b      	ldr	r2, [pc, #44]	; (1a000fd4 <serveInterrupt+0x50>)
1a000fa8:	61d3      	str	r3, [r2, #28]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a000faa:	f7ff ffe3 	bl	1a000f74 <clearInterrupt>
}
1a000fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000fb0:	4909      	ldr	r1, [pc, #36]	; (1a000fd8 <serveInterrupt+0x54>)
1a000fb2:	688e      	ldr	r6, [r1, #8]
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a000fb4:	4d09      	ldr	r5, [pc, #36]	; (1a000fdc <serveInterrupt+0x58>)
1a000fb6:	0051      	lsls	r1, r2, #1
1a000fb8:	188f      	adds	r7, r1, r2
1a000fba:	00fc      	lsls	r4, r7, #3
1a000fbc:	4627      	mov	r7, r4
1a000fbe:	442c      	add	r4, r5
1a000fc0:	60a6      	str	r6, [r4, #8]
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a000fc2:	6864      	ldr	r4, [r4, #4]
1a000fc4:	1b36      	subs	r6, r6, r4
1a000fc6:	443d      	add	r5, r7
1a000fc8:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a000fca:	4a02      	ldr	r2, [pc, #8]	; (1a000fd4 <serveInterrupt+0x50>)
1a000fcc:	6213      	str	r3, [r2, #32]
1a000fce:	e7ec      	b.n	1a000faa <serveInterrupt+0x26>
1a000fd0:	1a002c14 	.word	0x1a002c14
1a000fd4:	40087000 	.word	0x40087000
1a000fd8:	40084000 	.word	0x40084000
1a000fdc:	10000058 	.word	0x10000058

1a000fe0 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a000fe0:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a000fe2:	2000      	movs	r0, #0
1a000fe4:	f7ff ffce 	bl	1a000f84 <serveInterrupt>
}
1a000fe8:	bd08      	pop	{r3, pc}

1a000fea <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a000fea:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a000fec:	2001      	movs	r0, #1
1a000fee:	f7ff ffc9 	bl	1a000f84 <serveInterrupt>
}
1a000ff2:	bd08      	pop	{r3, pc}

1a000ff4 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a000ff4:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a000ff6:	2002      	movs	r0, #2
1a000ff8:	f7ff ffc4 	bl	1a000f84 <serveInterrupt>
}
1a000ffc:	bd08      	pop	{r3, pc}
1a000ffe:	Address 0x1a000ffe is out of bounds.


1a001000 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001000:	2300      	movs	r3, #0
1a001002:	2b1c      	cmp	r3, #28
1a001004:	d812      	bhi.n	1a00102c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a001006:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001008:	4a09      	ldr	r2, [pc, #36]	; (1a001030 <Board_SetupMuxing+0x30>)
1a00100a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00100e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001012:	784a      	ldrb	r2, [r1, #1]
1a001014:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001016:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00101a:	4906      	ldr	r1, [pc, #24]	; (1a001034 <Board_SetupMuxing+0x34>)
1a00101c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001020:	3301      	adds	r3, #1
1a001022:	2b1c      	cmp	r3, #28
1a001024:	d9f0      	bls.n	1a001008 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001026:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00102a:	4770      	bx	lr
1a00102c:	4770      	bx	lr
1a00102e:	bf00      	nop
1a001030:	1a002c1c 	.word	0x1a002c1c
1a001034:	40086000 	.word	0x40086000

1a001038 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001038:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00103a:	4a17      	ldr	r2, [pc, #92]	; (1a001098 <Board_SetupClocking+0x60>)
1a00103c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001044:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001048:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00104c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001054:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001058:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00105c:	2201      	movs	r2, #1
1a00105e:	490f      	ldr	r1, [pc, #60]	; (1a00109c <Board_SetupClocking+0x64>)
1a001060:	2006      	movs	r0, #6
1a001062:	f000 fa3b 	bl	1a0014dc <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001066:	2400      	movs	r4, #0
1a001068:	b14c      	cbz	r4, 1a00107e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00106a:	4b0b      	ldr	r3, [pc, #44]	; (1a001098 <Board_SetupClocking+0x60>)
1a00106c:	685a      	ldr	r2, [r3, #4]
1a00106e:	f022 020c 	bic.w	r2, r2, #12
1a001072:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001074:	685a      	ldr	r2, [r3, #4]
1a001076:	f042 0203 	orr.w	r2, r2, #3
1a00107a:	605a      	str	r2, [r3, #4]
}
1a00107c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00107e:	4808      	ldr	r0, [pc, #32]	; (1a0010a0 <Board_SetupClocking+0x68>)
1a001080:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001084:	2301      	movs	r3, #1
1a001086:	788a      	ldrb	r2, [r1, #2]
1a001088:	7849      	ldrb	r1, [r1, #1]
1a00108a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00108e:	f000 fcfd 	bl	1a001a8c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001092:	3401      	adds	r4, #1
1a001094:	e7e8      	b.n	1a001068 <Board_SetupClocking+0x30>
1a001096:	bf00      	nop
1a001098:	40043000 	.word	0x40043000
1a00109c:	0c28cb00 	.word	0x0c28cb00
1a0010a0:	1a002c18 	.word	0x1a002c18

1a0010a4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0010a4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0010a6:	f7ff ffab 	bl	1a001000 <Board_SetupMuxing>
    Board_SetupClocking();
1a0010aa:	f7ff ffc5 	bl	1a001038 <Board_SetupClocking>
}
1a0010ae:	bd08      	pop	{r3, pc}

1a0010b0 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0010b0:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a0010b2:	4a04      	ldr	r2, [pc, #16]	; (1a0010c4 <SystemInit+0x14>)
1a0010b4:	4b04      	ldr	r3, [pc, #16]	; (1a0010c8 <SystemInit+0x18>)
1a0010b6:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0010b8:	f000 f982 	bl	1a0013c0 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a0010bc:	f7ff fff2 	bl	1a0010a4 <Board_SystemInit>
}
1a0010c0:	bd08      	pop	{r3, pc}
1a0010c2:	bf00      	nop
1a0010c4:	1a000000 	.word	0x1a000000
1a0010c8:	e000ed08 	.word	0xe000ed08

1a0010cc <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0010cc:	4b05      	ldr	r3, [pc, #20]	; (1a0010e4 <_sbrk_r+0x18>)
1a0010ce:	681b      	ldr	r3, [r3, #0]
1a0010d0:	b123      	cbz	r3, 1a0010dc <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0010d2:	4b04      	ldr	r3, [pc, #16]	; (1a0010e4 <_sbrk_r+0x18>)
1a0010d4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0010d6:	4401      	add	r1, r0
1a0010d8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0010da:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0010dc:	4b01      	ldr	r3, [pc, #4]	; (1a0010e4 <_sbrk_r+0x18>)
1a0010de:	4a02      	ldr	r2, [pc, #8]	; (1a0010e8 <_sbrk_r+0x1c>)
1a0010e0:	601a      	str	r2, [r3, #0]
1a0010e2:	e7f6      	b.n	1a0010d2 <_sbrk_r+0x6>
1a0010e4:	10000168 	.word	0x10000168
1a0010e8:	1000019c 	.word	0x1000019c

1a0010ec <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0010ec:	2200      	movs	r2, #0
1a0010ee:	2a05      	cmp	r2, #5
1a0010f0:	d819      	bhi.n	1a001126 <Board_LED_Init+0x3a>
{
1a0010f2:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0010f4:	490c      	ldr	r1, [pc, #48]	; (1a001128 <Board_LED_Init+0x3c>)
1a0010f6:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0010fa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0010fe:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a001100:	4b0a      	ldr	r3, [pc, #40]	; (1a00112c <Board_LED_Init+0x40>)
1a001102:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a001106:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00110a:	2001      	movs	r0, #1
1a00110c:	40a0      	lsls	r0, r4
1a00110e:	4301      	orrs	r1, r0
1a001110:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a001114:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001118:	2100      	movs	r1, #0
1a00111a:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00111c:	3201      	adds	r2, #1
1a00111e:	2a05      	cmp	r2, #5
1a001120:	d9e8      	bls.n	1a0010f4 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a001122:	bc70      	pop	{r4, r5, r6}
1a001124:	4770      	bx	lr
1a001126:	4770      	bx	lr
1a001128:	1a002c9c 	.word	0x1a002c9c
1a00112c:	400f4000 	.word	0x400f4000

1a001130 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001130:	2300      	movs	r3, #0
1a001132:	2b03      	cmp	r3, #3
1a001134:	d816      	bhi.n	1a001164 <Board_TEC_Init+0x34>
{
1a001136:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001138:	490b      	ldr	r1, [pc, #44]	; (1a001168 <Board_TEC_Init+0x38>)
1a00113a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00113e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001142:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001144:	4c09      	ldr	r4, [pc, #36]	; (1a00116c <Board_TEC_Init+0x3c>)
1a001146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00114a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00114e:	2001      	movs	r0, #1
1a001150:	40a8      	lsls	r0, r5
1a001152:	ea21 0100 	bic.w	r1, r1, r0
1a001156:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00115a:	3301      	adds	r3, #1
1a00115c:	2b03      	cmp	r3, #3
1a00115e:	d9eb      	bls.n	1a001138 <Board_TEC_Init+0x8>
    }
}
1a001160:	bc30      	pop	{r4, r5}
1a001162:	4770      	bx	lr
1a001164:	4770      	bx	lr
1a001166:	bf00      	nop
1a001168:	1a002c94 	.word	0x1a002c94
1a00116c:	400f4000 	.word	0x400f4000

1a001170 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001170:	2300      	movs	r3, #0
1a001172:	2b08      	cmp	r3, #8
1a001174:	d816      	bhi.n	1a0011a4 <Board_GPIO_Init+0x34>
{
1a001176:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001178:	490b      	ldr	r1, [pc, #44]	; (1a0011a8 <Board_GPIO_Init+0x38>)
1a00117a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00117e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001182:	784d      	ldrb	r5, [r1, #1]
1a001184:	4c09      	ldr	r4, [pc, #36]	; (1a0011ac <Board_GPIO_Init+0x3c>)
1a001186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00118a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00118e:	2001      	movs	r0, #1
1a001190:	40a8      	lsls	r0, r5
1a001192:	ea21 0100 	bic.w	r1, r1, r0
1a001196:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00119a:	3301      	adds	r3, #1
1a00119c:	2b08      	cmp	r3, #8
1a00119e:	d9eb      	bls.n	1a001178 <Board_GPIO_Init+0x8>
    }
}
1a0011a0:	bc30      	pop	{r4, r5}
1a0011a2:	4770      	bx	lr
1a0011a4:	4770      	bx	lr
1a0011a6:	bf00      	nop
1a0011a8:	1a002ca8 	.word	0x1a002ca8
1a0011ac:	400f4000 	.word	0x400f4000

1a0011b0 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a0011b0:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0011b2:	4c0b      	ldr	r4, [pc, #44]	; (1a0011e0 <Board_SPI_Init+0x30>)
1a0011b4:	4620      	mov	r0, r4
1a0011b6:	f000 f8a7 	bl	1a001308 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0011ba:	6863      	ldr	r3, [r4, #4]
1a0011bc:	f023 0304 	bic.w	r3, r3, #4
1a0011c0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0011c2:	6823      	ldr	r3, [r4, #0]
1a0011c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0011c8:	f043 0307 	orr.w	r3, r3, #7
1a0011cc:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0011ce:	4905      	ldr	r1, [pc, #20]	; (1a0011e4 <Board_SPI_Init+0x34>)
1a0011d0:	4620      	mov	r0, r4
1a0011d2:	f000 f87a 	bl	1a0012ca <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0011d6:	6863      	ldr	r3, [r4, #4]
1a0011d8:	f043 0302 	orr.w	r3, r3, #2
1a0011dc:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a0011de:	bd10      	pop	{r4, pc}
1a0011e0:	400c5000 	.word	0x400c5000
1a0011e4:	000186a0 	.word	0x000186a0

1a0011e8 <Board_I2C_Init>:
{
1a0011e8:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0011ea:	2000      	movs	r0, #0
1a0011ec:	f000 f8b8 	bl	1a001360 <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0011f0:	4b04      	ldr	r3, [pc, #16]	; (1a001204 <Board_I2C_Init+0x1c>)
1a0011f2:	f640 0208 	movw	r2, #2056	; 0x808
1a0011f6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0011fa:	4903      	ldr	r1, [pc, #12]	; (1a001208 <Board_I2C_Init+0x20>)
1a0011fc:	2000      	movs	r0, #0
1a0011fe:	f000 f8c1 	bl	1a001384 <Chip_I2C_SetClockRate>
}
1a001202:	bd08      	pop	{r3, pc}
1a001204:	40086000 	.word	0x40086000
1a001208:	000f4240 	.word	0x000f4240

1a00120c <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a00120c:	b510      	push	{r4, lr}
1a00120e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a001210:	4c08      	ldr	r4, [pc, #32]	; (1a001234 <Board_ADC_Init+0x28>)
1a001212:	4669      	mov	r1, sp
1a001214:	4620      	mov	r0, r4
1a001216:	f000 f921 	bl	1a00145c <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00121a:	4a07      	ldr	r2, [pc, #28]	; (1a001238 <Board_ADC_Init+0x2c>)
1a00121c:	4669      	mov	r1, sp
1a00121e:	4620      	mov	r0, r4
1a001220:	f000 f93c 	bl	1a00149c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001224:	2200      	movs	r2, #0
1a001226:	4669      	mov	r1, sp
1a001228:	4620      	mov	r0, r4
1a00122a:	f000 f950 	bl	1a0014ce <Chip_ADC_SetResolution>
}
1a00122e:	b002      	add	sp, #8
1a001230:	bd10      	pop	{r4, pc}
1a001232:	bf00      	nop
1a001234:	400e3000 	.word	0x400e3000
1a001238:	00061a80 	.word	0x00061a80

1a00123c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a00123c:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a00123e:	4c07      	ldr	r4, [pc, #28]	; (1a00125c <Board_Debug_Init+0x20>)
1a001240:	4620      	mov	r0, r4
1a001242:	f000 fcdd 	bl	1a001c00 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a001246:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00124a:	4620      	mov	r0, r4
1a00124c:	f000 fd02 	bl	1a001c54 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001250:	2303      	movs	r3, #3
1a001252:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001254:	2301      	movs	r3, #1
1a001256:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a001258:	bd10      	pop	{r4, pc}
1a00125a:	bf00      	nop
1a00125c:	400c1000 	.word	0x400c1000

1a001260 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001260:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001262:	f7ff ffeb 	bl	1a00123c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001266:	4808      	ldr	r0, [pc, #32]	; (1a001288 <Board_Init+0x28>)
1a001268:	f000 f8a8 	bl	1a0013bc <Chip_GPIO_Init>

   Board_LED_Init();
1a00126c:	f7ff ff3e 	bl	1a0010ec <Board_LED_Init>
   Board_TEC_Init();
1a001270:	f7ff ff5e 	bl	1a001130 <Board_TEC_Init>
   Board_SPI_Init();
1a001274:	f7ff ff9c 	bl	1a0011b0 <Board_SPI_Init>
   Board_GPIO_Init();
1a001278:	f7ff ff7a 	bl	1a001170 <Board_GPIO_Init>
   Board_I2C_Init();
1a00127c:	f7ff ffb4 	bl	1a0011e8 <Board_I2C_Init>
   Board_ADC_Init();
1a001280:	f7ff ffc4 	bl	1a00120c <Board_ADC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a001284:	bd08      	pop	{r3, pc}
1a001286:	bf00      	nop
1a001288:	400f4000 	.word	0x400f4000

1a00128c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00128c:	4b03      	ldr	r3, [pc, #12]	; (1a00129c <Chip_SSP_GetClockIndex+0x10>)
1a00128e:	4298      	cmp	r0, r3
1a001290:	d001      	beq.n	1a001296 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001292:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001294:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001296:	20a5      	movs	r0, #165	; 0xa5
1a001298:	4770      	bx	lr
1a00129a:	bf00      	nop
1a00129c:	400c5000 	.word	0x400c5000

1a0012a0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0012a0:	4b04      	ldr	r3, [pc, #16]	; (1a0012b4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0012a2:	4298      	cmp	r0, r3
1a0012a4:	d002      	beq.n	1a0012ac <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0012a6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0012aa:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0012ac:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0012b0:	4770      	bx	lr
1a0012b2:	bf00      	nop
1a0012b4:	400c5000 	.word	0x400c5000

1a0012b8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0012b8:	6803      	ldr	r3, [r0, #0]
1a0012ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0012be:	0209      	lsls	r1, r1, #8
1a0012c0:	b289      	uxth	r1, r1
1a0012c2:	4319      	orrs	r1, r3
1a0012c4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0012c6:	6102      	str	r2, [r0, #16]
}
1a0012c8:	4770      	bx	lr

1a0012ca <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0012ca:	b570      	push	{r4, r5, r6, lr}
1a0012cc:	4606      	mov	r6, r0
1a0012ce:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0012d0:	f7ff ffe6 	bl	1a0012a0 <Chip_SSP_GetPeriphClockIndex>
1a0012d4:	f000 fc58 	bl	1a001b88 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0012d8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0012da:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a0012de:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0012e0:	e000      	b.n	1a0012e4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0012e2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0012e4:	42ab      	cmp	r3, r5
1a0012e6:	d90b      	bls.n	1a001300 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0012e8:	1c4c      	adds	r4, r1, #1
1a0012ea:	fb02 f304 	mul.w	r3, r2, r4
1a0012ee:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0012f2:	429d      	cmp	r5, r3
1a0012f4:	d2f6      	bcs.n	1a0012e4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0012f6:	2cff      	cmp	r4, #255	; 0xff
1a0012f8:	d9f3      	bls.n	1a0012e2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0012fa:	3202      	adds	r2, #2
				cr0_div = 0;
1a0012fc:	2100      	movs	r1, #0
1a0012fe:	e7f1      	b.n	1a0012e4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001300:	4630      	mov	r0, r6
1a001302:	f7ff ffd9 	bl	1a0012b8 <Chip_SSP_SetClockRate>
}
1a001306:	bd70      	pop	{r4, r5, r6, pc}

1a001308 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001308:	b510      	push	{r4, lr}
1a00130a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00130c:	f7ff ffbe 	bl	1a00128c <Chip_SSP_GetClockIndex>
1a001310:	f000 fc20 	bl	1a001b54 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001314:	4620      	mov	r0, r4
1a001316:	f7ff ffc3 	bl	1a0012a0 <Chip_SSP_GetPeriphClockIndex>
1a00131a:	f000 fc1b 	bl	1a001b54 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00131e:	6863      	ldr	r3, [r4, #4]
1a001320:	f023 0304 	bic.w	r3, r3, #4
1a001324:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001326:	6823      	ldr	r3, [r4, #0]
1a001328:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00132c:	f043 0307 	orr.w	r3, r3, #7
1a001330:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001332:	4902      	ldr	r1, [pc, #8]	; (1a00133c <Chip_SSP_Init+0x34>)
1a001334:	4620      	mov	r0, r4
1a001336:	f7ff ffc8 	bl	1a0012ca <Chip_SSP_SetBitRate>
}
1a00133a:	bd10      	pop	{r4, pc}
1a00133c:	000186a0 	.word	0x000186a0

1a001340 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001340:	2901      	cmp	r1, #1
1a001342:	d109      	bne.n	1a001358 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001344:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001348:	0082      	lsls	r2, r0, #2
1a00134a:	4b04      	ldr	r3, [pc, #16]	; (1a00135c <Chip_I2C_EventHandler+0x1c>)
1a00134c:	4413      	add	r3, r2
1a00134e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001350:	7d13      	ldrb	r3, [r2, #20]
1a001352:	b2db      	uxtb	r3, r3
1a001354:	2b04      	cmp	r3, #4
1a001356:	d0fb      	beq.n	1a001350 <Chip_I2C_EventHandler+0x10>
}
1a001358:	4770      	bx	lr
1a00135a:	bf00      	nop
1a00135c:	100000a0 	.word	0x100000a0

1a001360 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001360:	b570      	push	{r4, r5, r6, lr}
1a001362:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001364:	4e06      	ldr	r6, [pc, #24]	; (1a001380 <Chip_I2C_Init+0x20>)
1a001366:	00c4      	lsls	r4, r0, #3
1a001368:	1a22      	subs	r2, r4, r0
1a00136a:	0093      	lsls	r3, r2, #2
1a00136c:	4433      	add	r3, r6
1a00136e:	8898      	ldrh	r0, [r3, #4]
1a001370:	f000 fbf0 	bl	1a001b54 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001374:	1b64      	subs	r4, r4, r5
1a001376:	00a3      	lsls	r3, r4, #2
1a001378:	58f3      	ldr	r3, [r6, r3]
1a00137a:	226c      	movs	r2, #108	; 0x6c
1a00137c:	619a      	str	r2, [r3, #24]
}
1a00137e:	bd70      	pop	{r4, r5, r6, pc}
1a001380:	100000a0 	.word	0x100000a0

1a001384 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001388:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00138a:	4e0b      	ldr	r6, [pc, #44]	; (1a0013b8 <Chip_I2C_SetClockRate+0x34>)
1a00138c:	00c5      	lsls	r5, r0, #3
1a00138e:	1a2b      	subs	r3, r5, r0
1a001390:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001394:	eb06 0308 	add.w	r3, r6, r8
1a001398:	8898      	ldrh	r0, [r3, #4]
1a00139a:	f000 fbf5 	bl	1a001b88 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00139e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0013a2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0013a6:	0842      	lsrs	r2, r0, #1
1a0013a8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0013aa:	f856 3008 	ldr.w	r3, [r6, r8]
1a0013ae:	691a      	ldr	r2, [r3, #16]
1a0013b0:	1a80      	subs	r0, r0, r2
1a0013b2:	6158      	str	r0, [r3, #20]
}
1a0013b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0013b8:	100000a0 	.word	0x100000a0

1a0013bc <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0013bc:	4770      	bx	lr
1a0013be:	Address 0x1a0013be is out of bounds.


1a0013c0 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0013c0:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a0013c2:	4b0f      	ldr	r3, [pc, #60]	; (1a001400 <fpuInit+0x40>)
1a0013c4:	681b      	ldr	r3, [r3, #0]
1a0013c6:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a0013c8:	4b0e      	ldr	r3, [pc, #56]	; (1a001404 <fpuInit+0x44>)
1a0013ca:	681b      	ldr	r3, [r3, #0]
1a0013cc:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0013ce:	9a02      	ldr	r2, [sp, #8]
1a0013d0:	4b0d      	ldr	r3, [pc, #52]	; (1a001408 <fpuInit+0x48>)
1a0013d2:	429a      	cmp	r2, r3
1a0013d4:	d00c      	beq.n	1a0013f0 <fpuInit+0x30>
1a0013d6:	2300      	movs	r3, #0

	if (vfpPresent) {
1a0013d8:	b143      	cbz	r3, 1a0013ec <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a0013da:	4a0c      	ldr	r2, [pc, #48]	; (1a00140c <fpuInit+0x4c>)
1a0013dc:	6813      	ldr	r3, [r2, #0]
1a0013de:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a0013e0:	9b03      	ldr	r3, [sp, #12]
1a0013e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0013e6:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0013e8:	9b03      	ldr	r3, [sp, #12]
1a0013ea:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0013ec:	b004      	add	sp, #16
1a0013ee:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0013f0:	9a01      	ldr	r2, [sp, #4]
1a0013f2:	4b07      	ldr	r3, [pc, #28]	; (1a001410 <fpuInit+0x50>)
1a0013f4:	429a      	cmp	r2, r3
1a0013f6:	d001      	beq.n	1a0013fc <fpuInit+0x3c>
1a0013f8:	2300      	movs	r3, #0
1a0013fa:	e7ed      	b.n	1a0013d8 <fpuInit+0x18>
1a0013fc:	2301      	movs	r3, #1
1a0013fe:	e7eb      	b.n	1a0013d8 <fpuInit+0x18>
1a001400:	e000ef40 	.word	0xe000ef40
1a001404:	e000ef44 	.word	0xe000ef44
1a001408:	10110021 	.word	0x10110021
1a00140c:	e000ed88 	.word	0xe000ed88
1a001410:	11000011 	.word	0x11000011

1a001414 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001414:	4b03      	ldr	r3, [pc, #12]	; (1a001424 <Chip_ADC_GetClockIndex+0x10>)
1a001416:	4298      	cmp	r0, r3
1a001418:	d001      	beq.n	1a00141e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00141a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a00141c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00141e:	2004      	movs	r0, #4
1a001420:	4770      	bx	lr
1a001422:	bf00      	nop
1a001424:	400e4000 	.word	0x400e4000

1a001428 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001428:	b570      	push	{r4, r5, r6, lr}
1a00142a:	460d      	mov	r5, r1
1a00142c:	4614      	mov	r4, r2
1a00142e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001430:	f7ff fff0 	bl	1a001414 <Chip_ADC_GetClockIndex>
1a001434:	f000 fba8 	bl	1a001b88 <Chip_Clock_GetRate>
	if (burstMode) {
1a001438:	b155      	cbz	r5, 1a001450 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a00143a:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00143e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001442:	0064      	lsls	r4, r4, #1
1a001444:	fbb0 f0f4 	udiv	r0, r0, r4
1a001448:	b2c0      	uxtb	r0, r0
1a00144a:	3801      	subs	r0, #1
	return div;
}
1a00144c:	b2c0      	uxtb	r0, r0
1a00144e:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001450:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001454:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a001458:	e7f1      	b.n	1a00143e <getClkDiv+0x16>
1a00145a:	Address 0x1a00145a is out of bounds.


1a00145c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a00145c:	b538      	push	{r3, r4, r5, lr}
1a00145e:	4605      	mov	r5, r0
1a001460:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001462:	f7ff ffd7 	bl	1a001414 <Chip_ADC_GetClockIndex>
1a001466:	2301      	movs	r3, #1
1a001468:	461a      	mov	r2, r3
1a00146a:	4619      	mov	r1, r3
1a00146c:	f000 fb54 	bl	1a001b18 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001470:	2100      	movs	r1, #0
1a001472:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001474:	4a08      	ldr	r2, [pc, #32]	; (1a001498 <Chip_ADC_Init+0x3c>)
1a001476:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001478:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00147a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00147c:	230b      	movs	r3, #11
1a00147e:	4628      	mov	r0, r5
1a001480:	f7ff ffd2 	bl	1a001428 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001484:	0200      	lsls	r0, r0, #8
1a001486:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00148a:	7920      	ldrb	r0, [r4, #4]
1a00148c:	0440      	lsls	r0, r0, #17
1a00148e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001492:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001494:	6028      	str	r0, [r5, #0]
}
1a001496:	bd38      	pop	{r3, r4, r5, pc}
1a001498:	00061a80 	.word	0x00061a80

1a00149c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00149c:	b570      	push	{r4, r5, r6, lr}
1a00149e:	4605      	mov	r5, r0
1a0014a0:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0014a2:	6804      	ldr	r4, [r0, #0]
1a0014a4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0014a8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0014ac:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0014ae:	790b      	ldrb	r3, [r1, #4]
1a0014b0:	f1c3 030b 	rsb	r3, r3, #11
1a0014b4:	b2db      	uxtb	r3, r3
1a0014b6:	7949      	ldrb	r1, [r1, #5]
1a0014b8:	f7ff ffb6 	bl	1a001428 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0014bc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0014c0:	7933      	ldrb	r3, [r6, #4]
1a0014c2:	045b      	lsls	r3, r3, #17
1a0014c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0014c8:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0014ca:	602b      	str	r3, [r5, #0]
}
1a0014cc:	bd70      	pop	{r4, r5, r6, pc}

1a0014ce <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0014ce:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0014d0:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0014d2:	680a      	ldr	r2, [r1, #0]
1a0014d4:	f7ff ffe2 	bl	1a00149c <Chip_ADC_SetSampleRate>
}
1a0014d8:	bd08      	pop	{r3, pc}
1a0014da:	Address 0x1a0014da is out of bounds.


1a0014dc <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0014dc:	b570      	push	{r4, r5, r6, lr}
1a0014de:	b08a      	sub	sp, #40	; 0x28
1a0014e0:	4605      	mov	r5, r0
1a0014e2:	460e      	mov	r6, r1
1a0014e4:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0014e6:	f242 7310 	movw	r3, #10000	; 0x2710
1a0014ea:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0014ec:	2806      	cmp	r0, #6
1a0014ee:	d018      	beq.n	1a001522 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0014f0:	2300      	movs	r3, #0
1a0014f2:	2201      	movs	r2, #1
1a0014f4:	4629      	mov	r1, r5
1a0014f6:	2004      	movs	r0, #4
1a0014f8:	f000 fac8 	bl	1a001a8c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0014fc:	4a4a      	ldr	r2, [pc, #296]	; (1a001628 <Chip_SetupCoreClock+0x14c>)
1a0014fe:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001500:	f043 0301 	orr.w	r3, r3, #1
1a001504:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001506:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00150a:	a901      	add	r1, sp, #4
1a00150c:	4630      	mov	r0, r6
1a00150e:	f000 fa35 	bl	1a00197c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001512:	4b46      	ldr	r3, [pc, #280]	; (1a00162c <Chip_SetupCoreClock+0x150>)
1a001514:	429e      	cmp	r6, r3
1a001516:	d916      	bls.n	1a001546 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001518:	9b01      	ldr	r3, [sp, #4]
1a00151a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00151e:	d003      	beq.n	1a001528 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001520:	e7fe      	b.n	1a001520 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001522:	f000 f98d 	bl	1a001840 <Chip_Clock_EnableCrystal>
1a001526:	e7e3      	b.n	1a0014f0 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001528:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00152c:	d005      	beq.n	1a00153a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00152e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001532:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001534:	2500      	movs	r5, #0
			direct = 1;
1a001536:	2601      	movs	r6, #1
1a001538:	e007      	b.n	1a00154a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00153a:	9b04      	ldr	r3, [sp, #16]
1a00153c:	3301      	adds	r3, #1
1a00153e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001540:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001542:	2600      	movs	r6, #0
1a001544:	e001      	b.n	1a00154a <Chip_SetupCoreClock+0x6e>
1a001546:	2500      	movs	r5, #0
1a001548:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00154a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00154e:	9b01      	ldr	r3, [sp, #4]
1a001550:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001554:	9a05      	ldr	r2, [sp, #20]
1a001556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00155a:	9a03      	ldr	r2, [sp, #12]
1a00155c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001560:	9a04      	ldr	r2, [sp, #16]
1a001562:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001566:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00156a:	4a2f      	ldr	r2, [pc, #188]	; (1a001628 <Chip_SetupCoreClock+0x14c>)
1a00156c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00156e:	4b2e      	ldr	r3, [pc, #184]	; (1a001628 <Chip_SetupCoreClock+0x14c>)
1a001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001572:	f013 0f01 	tst.w	r3, #1
1a001576:	d0fa      	beq.n	1a00156e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001578:	2300      	movs	r3, #0
1a00157a:	2201      	movs	r2, #1
1a00157c:	2109      	movs	r1, #9
1a00157e:	2004      	movs	r0, #4
1a001580:	f000 fa84 	bl	1a001a8c <Chip_Clock_SetBaseClock>

	if (direct) {
1a001584:	b306      	cbz	r6, 1a0015c8 <Chip_SetupCoreClock+0xec>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001586:	f242 7310 	movw	r3, #10000	; 0x2710
1a00158a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00158c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00158e:	1e5a      	subs	r2, r3, #1
1a001590:	9209      	str	r2, [sp, #36]	; 0x24
1a001592:	2b00      	cmp	r3, #0
1a001594:	d1fa      	bne.n	1a00158c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001596:	9b01      	ldr	r3, [sp, #4]
1a001598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00159c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00159e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0015a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0015a6:	9a05      	ldr	r2, [sp, #20]
1a0015a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0015ac:	9a03      	ldr	r2, [sp, #12]
1a0015ae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0015b2:	9a04      	ldr	r2, [sp, #16]
1a0015b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0015b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0015bc:	4a1a      	ldr	r2, [pc, #104]	; (1a001628 <Chip_SetupCoreClock+0x14c>)
1a0015be:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0015c0:	2c00      	cmp	r4, #0
1a0015c2:	d12e      	bne.n	1a001622 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0015c4:	b00a      	add	sp, #40	; 0x28
1a0015c6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0015c8:	2d00      	cmp	r5, #0
1a0015ca:	d0f9      	beq.n	1a0015c0 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0015cc:	f242 7310 	movw	r3, #10000	; 0x2710
1a0015d0:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0015d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0015d4:	1e5a      	subs	r2, r3, #1
1a0015d6:	9209      	str	r2, [sp, #36]	; 0x24
1a0015d8:	2b00      	cmp	r3, #0
1a0015da:	d1fa      	bne.n	1a0015d2 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a0015dc:	9b04      	ldr	r3, [sp, #16]
1a0015de:	1e5a      	subs	r2, r3, #1
1a0015e0:	9204      	str	r2, [sp, #16]
1a0015e2:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0015e6:	9b01      	ldr	r3, [sp, #4]
1a0015e8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0015ec:	9905      	ldr	r1, [sp, #20]
1a0015ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0015f2:	9903      	ldr	r1, [sp, #12]
1a0015f4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0015f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0015fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001600:	4a09      	ldr	r2, [pc, #36]	; (1a001628 <Chip_SetupCoreClock+0x14c>)
1a001602:	6453      	str	r3, [r2, #68]	; 0x44
1a001604:	e7dc      	b.n	1a0015c0 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001606:	480a      	ldr	r0, [pc, #40]	; (1a001630 <Chip_SetupCoreClock+0x154>)
1a001608:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00160c:	78cb      	ldrb	r3, [r1, #3]
1a00160e:	788a      	ldrb	r2, [r1, #2]
1a001610:	7849      	ldrb	r1, [r1, #1]
1a001612:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001616:	f000 fa39 	bl	1a001a8c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00161a:	3401      	adds	r4, #1
1a00161c:	2c11      	cmp	r4, #17
1a00161e:	d9f2      	bls.n	1a001606 <Chip_SetupCoreClock+0x12a>
1a001620:	e7d0      	b.n	1a0015c4 <Chip_SetupCoreClock+0xe8>
1a001622:	2400      	movs	r4, #0
1a001624:	e7fa      	b.n	1a00161c <Chip_SetupCoreClock+0x140>
1a001626:	bf00      	nop
1a001628:	40050000 	.word	0x40050000
1a00162c:	068e7780 	.word	0x068e7780
1a001630:	1a002cc0 	.word	0x1a002cc0

1a001634 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001634:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001636:	2069      	movs	r0, #105	; 0x69
1a001638:	f000 faa6 	bl	1a001b88 <Chip_Clock_GetRate>
1a00163c:	4b01      	ldr	r3, [pc, #4]	; (1a001644 <SystemCoreClockUpdate+0x10>)
1a00163e:	6018      	str	r0, [r3, #0]
}
1a001640:	bd08      	pop	{r3, pc}
1a001642:	bf00      	nop
1a001644:	1000018c 	.word	0x1000018c

1a001648 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001648:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a00164a:	680b      	ldr	r3, [r1, #0]
1a00164c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001650:	d002      	beq.n	1a001658 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001656:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001658:	4607      	mov	r7, r0
1a00165a:	2501      	movs	r5, #1
1a00165c:	e03a      	b.n	1a0016d4 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00165e:	694b      	ldr	r3, [r1, #20]
1a001660:	fb03 f302 	mul.w	r3, r3, r2
1a001664:	fbb3 f3f5 	udiv	r3, r3, r5
1a001668:	e01c      	b.n	1a0016a4 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00166a:	461c      	mov	r4, r3
	if (val < 0)
1a00166c:	ebb0 0c04 	subs.w	ip, r0, r4
1a001670:	d427      	bmi.n	1a0016c2 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001672:	4567      	cmp	r7, ip
1a001674:	d906      	bls.n	1a001684 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a001676:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001678:	1c77      	adds	r7, r6, #1
1a00167a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00167c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00167e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001680:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001682:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001684:	3201      	adds	r2, #1
1a001686:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00168a:	dc1d      	bgt.n	1a0016c8 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a00168c:	680c      	ldr	r4, [r1, #0]
1a00168e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001692:	d0e4      	beq.n	1a00165e <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001694:	1c73      	adds	r3, r6, #1
1a001696:	fa02 fc03 	lsl.w	ip, r2, r3
1a00169a:	694b      	ldr	r3, [r1, #20]
1a00169c:	fb03 f30c 	mul.w	r3, r3, ip
1a0016a0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0016a4:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a0016e0 <pll_calc_divs+0x98>
1a0016a8:	4563      	cmp	r3, ip
1a0016aa:	d9eb      	bls.n	1a001684 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0016ac:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a0016e4 <pll_calc_divs+0x9c>
1a0016b0:	4563      	cmp	r3, ip
1a0016b2:	d809      	bhi.n	1a0016c8 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0016b4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0016b8:	d1d7      	bne.n	1a00166a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0016ba:	1c74      	adds	r4, r6, #1
1a0016bc:	fa23 f404 	lsr.w	r4, r3, r4
1a0016c0:	e7d4      	b.n	1a00166c <pll_calc_divs+0x24>
		return -val;
1a0016c2:	f1cc 0c00 	rsb	ip, ip, #0
1a0016c6:	e7d4      	b.n	1a001672 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a0016c8:	3601      	adds	r6, #1
1a0016ca:	2e03      	cmp	r6, #3
1a0016cc:	dc01      	bgt.n	1a0016d2 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a0016ce:	2201      	movs	r2, #1
1a0016d0:	e7d9      	b.n	1a001686 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a0016d2:	3501      	adds	r5, #1
1a0016d4:	2d04      	cmp	r5, #4
1a0016d6:	dc01      	bgt.n	1a0016dc <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a0016d8:	2600      	movs	r6, #0
1a0016da:	e7f6      	b.n	1a0016ca <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a0016dc:	bcf0      	pop	{r4, r5, r6, r7}
1a0016de:	4770      	bx	lr
1a0016e0:	094c5eff 	.word	0x094c5eff
1a0016e4:	1312d000 	.word	0x1312d000

1a0016e8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0016ea:	b099      	sub	sp, #100	; 0x64
1a0016ec:	4605      	mov	r5, r0
1a0016ee:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0016f0:	225c      	movs	r2, #92	; 0x5c
1a0016f2:	2100      	movs	r1, #0
1a0016f4:	a801      	add	r0, sp, #4
1a0016f6:	f000 fd13 	bl	1a002120 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0016fa:	2380      	movs	r3, #128	; 0x80
1a0016fc:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0016fe:	6963      	ldr	r3, [r4, #20]
1a001700:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001702:	7923      	ldrb	r3, [r4, #4]
1a001704:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001708:	4669      	mov	r1, sp
1a00170a:	4628      	mov	r0, r5
1a00170c:	f7ff ff9c 	bl	1a001648 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001710:	9b06      	ldr	r3, [sp, #24]
1a001712:	42ab      	cmp	r3, r5
1a001714:	d027      	beq.n	1a001766 <pll_get_frac+0x7e>
	if (val < 0)
1a001716:	1aeb      	subs	r3, r5, r3
1a001718:	d42e      	bmi.n	1a001778 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00171a:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00171c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00171e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001722:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001724:	6963      	ldr	r3, [r4, #20]
1a001726:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001728:	7923      	ldrb	r3, [r4, #4]
1a00172a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00172e:	a910      	add	r1, sp, #64	; 0x40
1a001730:	4628      	mov	r0, r5
1a001732:	f7ff ff89 	bl	1a001648 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001736:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001738:	42ab      	cmp	r3, r5
1a00173a:	d01f      	beq.n	1a00177c <pll_get_frac+0x94>
	if (val < 0)
1a00173c:	1aeb      	subs	r3, r5, r3
1a00173e:	d425      	bmi.n	1a00178c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001740:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001742:	4b2b      	ldr	r3, [pc, #172]	; (1a0017f0 <pll_get_frac+0x108>)
1a001744:	429d      	cmp	r5, r3
1a001746:	d923      	bls.n	1a001790 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00174a:	1aed      	subs	r5, r5, r3
1a00174c:	d433      	bmi.n	1a0017b6 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00174e:	42ae      	cmp	r6, r5
1a001750:	dc3b      	bgt.n	1a0017ca <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a001752:	42be      	cmp	r6, r7
1a001754:	dc31      	bgt.n	1a0017ba <pll_get_frac+0xd2>
			*ppll = pll[0];
1a001756:	466d      	mov	r5, sp
1a001758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00175a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00175c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001764:	e006      	b.n	1a001774 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a001766:	466d      	mov	r5, sp
1a001768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00176a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00176c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001774:	b019      	add	sp, #100	; 0x64
1a001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001778:	425b      	negs	r3, r3
1a00177a:	e7ce      	b.n	1a00171a <pll_get_frac+0x32>
		*ppll = pll[2];
1a00177c:	ad10      	add	r5, sp, #64	; 0x40
1a00177e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001782:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00178a:	e7f3      	b.n	1a001774 <pll_get_frac+0x8c>
		return -val;
1a00178c:	425b      	negs	r3, r3
1a00178e:	e7d7      	b.n	1a001740 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001790:	2340      	movs	r3, #64	; 0x40
1a001792:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001794:	6963      	ldr	r3, [r4, #20]
1a001796:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001798:	a908      	add	r1, sp, #32
1a00179a:	4628      	mov	r0, r5
1a00179c:	f7ff ff54 	bl	1a001648 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0017a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0017a2:	42ab      	cmp	r3, r5
1a0017a4:	d1d0      	bne.n	1a001748 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0017a6:	ad08      	add	r5, sp, #32
1a0017a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0017aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0017ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0017b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0017b4:	e7de      	b.n	1a001774 <pll_get_frac+0x8c>
		return -val;
1a0017b6:	426d      	negs	r5, r5
1a0017b8:	e7c9      	b.n	1a00174e <pll_get_frac+0x66>
			*ppll = pll[2];
1a0017ba:	ad10      	add	r5, sp, #64	; 0x40
1a0017bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0017be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0017c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0017c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0017c8:	e7d4      	b.n	1a001774 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0017ca:	42af      	cmp	r7, r5
1a0017cc:	db07      	blt.n	1a0017de <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0017ce:	ad08      	add	r5, sp, #32
1a0017d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0017d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0017d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0017d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0017dc:	e7ca      	b.n	1a001774 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0017de:	ad10      	add	r5, sp, #64	; 0x40
1a0017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0017e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0017e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0017ec:	e7c2      	b.n	1a001774 <pll_get_frac+0x8c>
1a0017ee:	bf00      	nop
1a0017f0:	068e7780 	.word	0x068e7780

1a0017f4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0017f4:	b430      	push	{r4, r5}
1a0017f6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0017f8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0017fa:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0017fc:	e000      	b.n	1a001800 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0017fe:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001800:	281c      	cmp	r0, #28
1a001802:	d118      	bne.n	1a001836 <Chip_Clock_FindBaseClock+0x42>
1a001804:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001808:	0051      	lsls	r1, r2, #1
1a00180a:	4a0c      	ldr	r2, [pc, #48]	; (1a00183c <Chip_Clock_FindBaseClock+0x48>)
1a00180c:	440a      	add	r2, r1
1a00180e:	7914      	ldrb	r4, [r2, #4]
1a001810:	4284      	cmp	r4, r0
1a001812:	d010      	beq.n	1a001836 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001814:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001818:	004a      	lsls	r2, r1, #1
1a00181a:	4908      	ldr	r1, [pc, #32]	; (1a00183c <Chip_Clock_FindBaseClock+0x48>)
1a00181c:	5a8a      	ldrh	r2, [r1, r2]
1a00181e:	42aa      	cmp	r2, r5
1a001820:	d8ed      	bhi.n	1a0017fe <Chip_Clock_FindBaseClock+0xa>
1a001822:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001826:	0051      	lsls	r1, r2, #1
1a001828:	4a04      	ldr	r2, [pc, #16]	; (1a00183c <Chip_Clock_FindBaseClock+0x48>)
1a00182a:	440a      	add	r2, r1
1a00182c:	8852      	ldrh	r2, [r2, #2]
1a00182e:	42aa      	cmp	r2, r5
1a001830:	d3e5      	bcc.n	1a0017fe <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001832:	4620      	mov	r0, r4
1a001834:	e7e4      	b.n	1a001800 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001836:	bc30      	pop	{r4, r5}
1a001838:	4770      	bx	lr
1a00183a:	bf00      	nop
1a00183c:	1a002d14 	.word	0x1a002d14

1a001840 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001840:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001846:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001848:	4a0d      	ldr	r2, [pc, #52]	; (1a001880 <Chip_Clock_EnableCrystal+0x40>)
1a00184a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00184c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001850:	6992      	ldr	r2, [r2, #24]
1a001852:	428a      	cmp	r2, r1
1a001854:	d001      	beq.n	1a00185a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001856:	4a0a      	ldr	r2, [pc, #40]	; (1a001880 <Chip_Clock_EnableCrystal+0x40>)
1a001858:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00185a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00185e:	4a09      	ldr	r2, [pc, #36]	; (1a001884 <Chip_Clock_EnableCrystal+0x44>)
1a001860:	6811      	ldr	r1, [r2, #0]
1a001862:	4a09      	ldr	r2, [pc, #36]	; (1a001888 <Chip_Clock_EnableCrystal+0x48>)
1a001864:	4291      	cmp	r1, r2
1a001866:	d901      	bls.n	1a00186c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001868:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00186c:	4a04      	ldr	r2, [pc, #16]	; (1a001880 <Chip_Clock_EnableCrystal+0x40>)
1a00186e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001870:	9b01      	ldr	r3, [sp, #4]
1a001872:	1e5a      	subs	r2, r3, #1
1a001874:	9201      	str	r2, [sp, #4]
1a001876:	2b00      	cmp	r3, #0
1a001878:	d1fa      	bne.n	1a001870 <Chip_Clock_EnableCrystal+0x30>
}
1a00187a:	b002      	add	sp, #8
1a00187c:	4770      	bx	lr
1a00187e:	bf00      	nop
1a001880:	40050000 	.word	0x40050000
1a001884:	1a002cbc 	.word	0x1a002cbc
1a001888:	01312cff 	.word	0x01312cff

1a00188c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00188c:	3012      	adds	r0, #18
1a00188e:	4b05      	ldr	r3, [pc, #20]	; (1a0018a4 <Chip_Clock_GetDividerSource+0x18>)
1a001890:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001894:	f010 0f01 	tst.w	r0, #1
1a001898:	d102      	bne.n	1a0018a0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00189a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00189e:	4770      	bx	lr
		return CLKINPUT_PD;
1a0018a0:	2011      	movs	r0, #17
}
1a0018a2:	4770      	bx	lr
1a0018a4:	40050000 	.word	0x40050000

1a0018a8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0018a8:	f100 0212 	add.w	r2, r0, #18
1a0018ac:	4b03      	ldr	r3, [pc, #12]	; (1a0018bc <Chip_Clock_GetDividerDivisor+0x14>)
1a0018ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0018b2:	4b03      	ldr	r3, [pc, #12]	; (1a0018c0 <Chip_Clock_GetDividerDivisor+0x18>)
1a0018b4:	5c18      	ldrb	r0, [r3, r0]
}
1a0018b6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0018ba:	4770      	bx	lr
1a0018bc:	40050000 	.word	0x40050000
1a0018c0:	1a002d0c 	.word	0x1a002d0c

1a0018c4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0018c4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0018c6:	2810      	cmp	r0, #16
1a0018c8:	d80a      	bhi.n	1a0018e0 <Chip_Clock_GetClockInputHz+0x1c>
1a0018ca:	e8df f000 	tbb	[pc, r0]
1a0018ce:	0b44      	.short	0x0b44
1a0018d0:	0921180d 	.word	0x0921180d
1a0018d4:	2d2a2724 	.word	0x2d2a2724
1a0018d8:	34300909 	.word	0x34300909
1a0018dc:	3c38      	.short	0x3c38
1a0018de:	40          	.byte	0x40
1a0018df:	00          	.byte	0x00
	uint32_t rate = 0;
1a0018e0:	2000      	movs	r0, #0
1a0018e2:	e03a      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0018e4:	481e      	ldr	r0, [pc, #120]	; (1a001960 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0018e6:	e038      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0018e8:	4b1e      	ldr	r3, [pc, #120]	; (1a001964 <Chip_Clock_GetClockInputHz+0xa0>)
1a0018ea:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0018ee:	f003 0307 	and.w	r3, r3, #7
1a0018f2:	2b04      	cmp	r3, #4
1a0018f4:	d001      	beq.n	1a0018fa <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0018f6:	481c      	ldr	r0, [pc, #112]	; (1a001968 <Chip_Clock_GetClockInputHz+0xa4>)
1a0018f8:	e02f      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a0018fa:	2000      	movs	r0, #0
1a0018fc:	e02d      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0018fe:	4b19      	ldr	r3, [pc, #100]	; (1a001964 <Chip_Clock_GetClockInputHz+0xa0>)
1a001900:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001904:	f003 0307 	and.w	r3, r3, #7
1a001908:	2b04      	cmp	r3, #4
1a00190a:	d027      	beq.n	1a00195c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00190c:	4816      	ldr	r0, [pc, #88]	; (1a001968 <Chip_Clock_GetClockInputHz+0xa4>)
1a00190e:	e024      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001910:	4b16      	ldr	r3, [pc, #88]	; (1a00196c <Chip_Clock_GetClockInputHz+0xa8>)
1a001912:	6818      	ldr	r0, [r3, #0]
		break;
1a001914:	e021      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001916:	4b16      	ldr	r3, [pc, #88]	; (1a001970 <Chip_Clock_GetClockInputHz+0xac>)
1a001918:	6818      	ldr	r0, [r3, #0]
		break;
1a00191a:	e01e      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00191c:	4b15      	ldr	r3, [pc, #84]	; (1a001974 <Chip_Clock_GetClockInputHz+0xb0>)
1a00191e:	6818      	ldr	r0, [r3, #0]
		break;
1a001920:	e01b      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001922:	4b14      	ldr	r3, [pc, #80]	; (1a001974 <Chip_Clock_GetClockInputHz+0xb0>)
1a001924:	6858      	ldr	r0, [r3, #4]
		break;
1a001926:	e018      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001928:	f000 f868 	bl	1a0019fc <Chip_Clock_GetMainPLLHz>
		break;
1a00192c:	e015      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00192e:	2100      	movs	r1, #0
1a001930:	f000 f89a 	bl	1a001a68 <Chip_Clock_GetDivRate>
		break;
1a001934:	e011      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001936:	2101      	movs	r1, #1
1a001938:	f000 f896 	bl	1a001a68 <Chip_Clock_GetDivRate>
		break;
1a00193c:	e00d      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00193e:	2102      	movs	r1, #2
1a001940:	f000 f892 	bl	1a001a68 <Chip_Clock_GetDivRate>
		break;
1a001944:	e009      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001946:	2103      	movs	r1, #3
1a001948:	f000 f88e 	bl	1a001a68 <Chip_Clock_GetDivRate>
		break;
1a00194c:	e005      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00194e:	2104      	movs	r1, #4
1a001950:	f000 f88a 	bl	1a001a68 <Chip_Clock_GetDivRate>
		break;
1a001954:	e001      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a001956:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00195a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a00195c:	4806      	ldr	r0, [pc, #24]	; (1a001978 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00195e:	e7fc      	b.n	1a00195a <Chip_Clock_GetClockInputHz+0x96>
1a001960:	00b71b00 	.word	0x00b71b00
1a001964:	40043000 	.word	0x40043000
1a001968:	017d7840 	.word	0x017d7840
1a00196c:	1a002c90 	.word	0x1a002c90
1a001970:	1a002cbc 	.word	0x1a002cbc
1a001974:	1000016c 	.word	0x1000016c
1a001978:	02faf080 	.word	0x02faf080

1a00197c <Chip_Clock_CalcMainPLLValue>:
{
1a00197c:	b538      	push	{r3, r4, r5, lr}
1a00197e:	4605      	mov	r5, r0
1a001980:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001982:	7908      	ldrb	r0, [r1, #4]
1a001984:	f7ff ff9e 	bl	1a0018c4 <Chip_Clock_GetClockInputHz>
1a001988:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00198a:	4b19      	ldr	r3, [pc, #100]	; (1a0019f0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00198c:	442b      	add	r3, r5
1a00198e:	4a19      	ldr	r2, [pc, #100]	; (1a0019f4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001990:	4293      	cmp	r3, r2
1a001992:	d821      	bhi.n	1a0019d8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001994:	b318      	cbz	r0, 1a0019de <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001996:	2380      	movs	r3, #128	; 0x80
1a001998:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00199a:	2300      	movs	r3, #0
1a00199c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00199e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0019a0:	fbb5 f3f0 	udiv	r3, r5, r0
1a0019a4:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0019a6:	4a14      	ldr	r2, [pc, #80]	; (1a0019f8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0019a8:	4295      	cmp	r5, r2
1a0019aa:	d903      	bls.n	1a0019b4 <Chip_Clock_CalcMainPLLValue+0x38>
1a0019ac:	fb03 f000 	mul.w	r0, r3, r0
1a0019b0:	42a8      	cmp	r0, r5
1a0019b2:	d007      	beq.n	1a0019c4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0019b4:	4621      	mov	r1, r4
1a0019b6:	4628      	mov	r0, r5
1a0019b8:	f7ff fe96 	bl	1a0016e8 <pll_get_frac>
		if (!ppll->nsel) {
1a0019bc:	68a3      	ldr	r3, [r4, #8]
1a0019be:	b18b      	cbz	r3, 1a0019e4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0019c0:	3b01      	subs	r3, #1
1a0019c2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0019c4:	6923      	ldr	r3, [r4, #16]
1a0019c6:	b183      	cbz	r3, 1a0019ea <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0019c8:	68e2      	ldr	r2, [r4, #12]
1a0019ca:	b10a      	cbz	r2, 1a0019d0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0019cc:	3a01      	subs	r2, #1
1a0019ce:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0019d0:	3b01      	subs	r3, #1
1a0019d2:	6123      	str	r3, [r4, #16]
	return 0;
1a0019d4:	2000      	movs	r0, #0
}
1a0019d6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0019d8:	f04f 30ff 	mov.w	r0, #4294967295
1a0019dc:	e7fb      	b.n	1a0019d6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0019de:	f04f 30ff 	mov.w	r0, #4294967295
1a0019e2:	e7f8      	b.n	1a0019d6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0019e4:	f04f 30ff 	mov.w	r0, #4294967295
1a0019e8:	e7f5      	b.n	1a0019d6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0019ea:	f04f 30ff 	mov.w	r0, #4294967295
1a0019ee:	e7f2      	b.n	1a0019d6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0019f0:	ff6b3a10 	.word	0xff6b3a10
1a0019f4:	0b940510 	.word	0x0b940510
1a0019f8:	094c5eff 	.word	0x094c5eff

1a0019fc <Chip_Clock_GetMainPLLHz>:
{
1a0019fc:	b530      	push	{r4, r5, lr}
1a0019fe:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001a00:	4d17      	ldr	r5, [pc, #92]	; (1a001a60 <Chip_Clock_GetMainPLLHz+0x64>)
1a001a02:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001a04:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001a08:	f7ff ff5c 	bl	1a0018c4 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001a0c:	4b15      	ldr	r3, [pc, #84]	; (1a001a64 <Chip_Clock_GetMainPLLHz+0x68>)
1a001a0e:	681b      	ldr	r3, [r3, #0]
1a001a10:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001a12:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001a14:	f013 0f01 	tst.w	r3, #1
1a001a18:	d020      	beq.n	1a001a5c <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001a1a:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001a1e:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001a22:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001a26:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001a2a:	3301      	adds	r3, #1
	n = nsel + 1;
1a001a2c:	3201      	adds	r2, #1
	p = ptab[psel];
1a001a2e:	f10d 0c08 	add.w	ip, sp, #8
1a001a32:	4461      	add	r1, ip
1a001a34:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001a38:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001a3c:	d108      	bne.n	1a001a50 <Chip_Clock_GetMainPLLHz+0x54>
1a001a3e:	b93d      	cbnz	r5, 1a001a50 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001a40:	0049      	lsls	r1, r1, #1
1a001a42:	fbb3 f3f1 	udiv	r3, r3, r1
1a001a46:	fbb0 f0f2 	udiv	r0, r0, r2
1a001a4a:	fb00 f003 	mul.w	r0, r0, r3
1a001a4e:	e003      	b.n	1a001a58 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a001a50:	fbb0 f0f2 	udiv	r0, r0, r2
1a001a54:	fb03 f000 	mul.w	r0, r3, r0
}
1a001a58:	b003      	add	sp, #12
1a001a5a:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001a5c:	2000      	movs	r0, #0
1a001a5e:	e7fb      	b.n	1a001a58 <Chip_Clock_GetMainPLLHz+0x5c>
1a001a60:	40050000 	.word	0x40050000
1a001a64:	1a002d08 	.word	0x1a002d08

1a001a68 <Chip_Clock_GetDivRate>:
{
1a001a68:	b538      	push	{r3, r4, r5, lr}
1a001a6a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001a6c:	4608      	mov	r0, r1
1a001a6e:	f7ff ff0d 	bl	1a00188c <Chip_Clock_GetDividerSource>
1a001a72:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001a74:	4620      	mov	r0, r4
1a001a76:	f7ff ff17 	bl	1a0018a8 <Chip_Clock_GetDividerDivisor>
1a001a7a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001a7c:	4628      	mov	r0, r5
1a001a7e:	f7ff ff21 	bl	1a0018c4 <Chip_Clock_GetClockInputHz>
1a001a82:	3401      	adds	r4, #1
}
1a001a84:	fbb0 f0f4 	udiv	r0, r0, r4
1a001a88:	bd38      	pop	{r3, r4, r5, pc}
1a001a8a:	Address 0x1a001a8a is out of bounds.


1a001a8c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001a8c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001a8e:	f100 0416 	add.w	r4, r0, #22
1a001a92:	00a4      	lsls	r4, r4, #2
1a001a94:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001a98:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001a9c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001a9e:	281b      	cmp	r0, #27
1a001aa0:	d813      	bhi.n	1a001aca <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001aa2:	2911      	cmp	r1, #17
1a001aa4:	d01a      	beq.n	1a001adc <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001aa6:	4d0e      	ldr	r5, [pc, #56]	; (1a001ae0 <Chip_Clock_SetBaseClock+0x54>)
1a001aa8:	4025      	ands	r5, r4

			if (autoblocken) {
1a001aaa:	b10a      	cbz	r2, 1a001ab0 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001aac:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001ab0:	b10b      	cbz	r3, 1a001ab6 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001ab2:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001ab6:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001aba:	3016      	adds	r0, #22
1a001abc:	0080      	lsls	r0, r0, #2
1a001abe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001ac2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001ac6:	6045      	str	r5, [r0, #4]
1a001ac8:	e008      	b.n	1a001adc <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001aca:	f044 0401 	orr.w	r4, r4, #1
1a001ace:	3016      	adds	r0, #22
1a001ad0:	0080      	lsls	r0, r0, #2
1a001ad2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001ad6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001ada:	6044      	str	r4, [r0, #4]
	}
}
1a001adc:	bc30      	pop	{r4, r5}
1a001ade:	4770      	bx	lr
1a001ae0:	e0fff7fe 	.word	0xe0fff7fe

1a001ae4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001ae4:	281b      	cmp	r0, #27
1a001ae6:	d80c      	bhi.n	1a001b02 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001ae8:	3016      	adds	r0, #22
1a001aea:	0080      	lsls	r0, r0, #2
1a001aec:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001af0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001af4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001af6:	f010 0f01 	tst.w	r0, #1
1a001afa:	d104      	bne.n	1a001b06 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001afc:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001b00:	4770      	bx	lr
		return CLKINPUT_PD;
1a001b02:	2011      	movs	r0, #17
1a001b04:	4770      	bx	lr
		return CLKINPUT_PD;
1a001b06:	2011      	movs	r0, #17
}
1a001b08:	4770      	bx	lr

1a001b0a <Chip_Clock_GetBaseClocktHz>:
{
1a001b0a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001b0c:	f7ff ffea 	bl	1a001ae4 <Chip_Clock_GetBaseClock>
1a001b10:	f7ff fed8 	bl	1a0018c4 <Chip_Clock_GetClockInputHz>
}
1a001b14:	bd08      	pop	{r3, pc}
1a001b16:	Address 0x1a001b16 is out of bounds.


1a001b18 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001b18:	b971      	cbnz	r1, 1a001b38 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001b1a:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001b1c:	b10a      	cbz	r2, 1a001b22 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001b1e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001b22:	2b02      	cmp	r3, #2
1a001b24:	d00a      	beq.n	1a001b3c <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001b26:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001b2a:	d30a      	bcc.n	1a001b42 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001b2c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001b30:	4b06      	ldr	r3, [pc, #24]	; (1a001b4c <Chip_Clock_EnableOpts+0x34>)
1a001b32:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001b36:	4770      	bx	lr
		reg |= (1 << 1);
1a001b38:	2103      	movs	r1, #3
1a001b3a:	e7ef      	b.n	1a001b1c <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001b3c:	f041 0120 	orr.w	r1, r1, #32
1a001b40:	e7f1      	b.n	1a001b26 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001b42:	3020      	adds	r0, #32
1a001b44:	4b02      	ldr	r3, [pc, #8]	; (1a001b50 <Chip_Clock_EnableOpts+0x38>)
1a001b46:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001b4a:	4770      	bx	lr
1a001b4c:	40052000 	.word	0x40052000
1a001b50:	40051000 	.word	0x40051000

1a001b54 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001b54:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001b58:	d309      	bcc.n	1a001b6e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001b5a:	4a09      	ldr	r2, [pc, #36]	; (1a001b80 <Chip_Clock_Enable+0x2c>)
1a001b5c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001b60:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001b64:	f043 0301 	orr.w	r3, r3, #1
1a001b68:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001b6c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001b6e:	4a05      	ldr	r2, [pc, #20]	; (1a001b84 <Chip_Clock_Enable+0x30>)
1a001b70:	3020      	adds	r0, #32
1a001b72:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001b76:	f043 0301 	orr.w	r3, r3, #1
1a001b7a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001b7e:	4770      	bx	lr
1a001b80:	40052000 	.word	0x40052000
1a001b84:	40051000 	.word	0x40051000

1a001b88 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001b88:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001b8a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001b8e:	d309      	bcc.n	1a001ba4 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001b90:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001b94:	4a0d      	ldr	r2, [pc, #52]	; (1a001bcc <Chip_Clock_GetRate+0x44>)
1a001b96:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001b9a:	f014 0f01 	tst.w	r4, #1
1a001b9e:	d107      	bne.n	1a001bb0 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001ba0:	2000      	movs	r0, #0
	}

	return rate;
}
1a001ba2:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001ba4:	f100 0320 	add.w	r3, r0, #32
1a001ba8:	4a09      	ldr	r2, [pc, #36]	; (1a001bd0 <Chip_Clock_GetRate+0x48>)
1a001baa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001bae:	e7f4      	b.n	1a001b9a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001bb0:	f7ff fe20 	bl	1a0017f4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001bb4:	f7ff ffa9 	bl	1a001b0a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001bb8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001bbc:	d103      	bne.n	1a001bc6 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001bbe:	2301      	movs	r3, #1
		rate = rate / div;
1a001bc0:	fbb0 f0f3 	udiv	r0, r0, r3
1a001bc4:	e7ed      	b.n	1a001ba2 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001bc6:	2302      	movs	r3, #2
1a001bc8:	e7fa      	b.n	1a001bc0 <Chip_Clock_GetRate+0x38>
1a001bca:	bf00      	nop
1a001bcc:	40052000 	.word	0x40052000
1a001bd0:	40051000 	.word	0x40051000

1a001bd4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001bd4:	4b09      	ldr	r3, [pc, #36]	; (1a001bfc <Chip_UART_GetIndex+0x28>)
1a001bd6:	4298      	cmp	r0, r3
1a001bd8:	d009      	beq.n	1a001bee <Chip_UART_GetIndex+0x1a>
1a001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001bde:	4298      	cmp	r0, r3
1a001be0:	d007      	beq.n	1a001bf2 <Chip_UART_GetIndex+0x1e>
1a001be2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001be6:	4298      	cmp	r0, r3
1a001be8:	d005      	beq.n	1a001bf6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001bea:	2000      	movs	r0, #0
1a001bec:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001bee:	2002      	movs	r0, #2
1a001bf0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001bf2:	2003      	movs	r0, #3
1a001bf4:	4770      	bx	lr
			return 1;
1a001bf6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001bf8:	4770      	bx	lr
1a001bfa:	bf00      	nop
1a001bfc:	400c1000 	.word	0x400c1000

1a001c00 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001c00:	b530      	push	{r4, r5, lr}
1a001c02:	b083      	sub	sp, #12
1a001c04:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001c06:	f7ff ffe5 	bl	1a001bd4 <Chip_UART_GetIndex>
1a001c0a:	2301      	movs	r3, #1
1a001c0c:	461a      	mov	r2, r3
1a001c0e:	4619      	mov	r1, r3
1a001c10:	4d0e      	ldr	r5, [pc, #56]	; (1a001c4c <Chip_UART_Init+0x4c>)
1a001c12:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001c16:	f7ff ff7f 	bl	1a001b18 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001c1a:	2307      	movs	r3, #7
1a001c1c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001c1e:	2300      	movs	r3, #0
1a001c20:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001c22:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001c24:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001c26:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001c28:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001c2a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001c2c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001c2e:	4b08      	ldr	r3, [pc, #32]	; (1a001c50 <Chip_UART_Init+0x50>)
1a001c30:	429c      	cmp	r4, r3
1a001c32:	d006      	beq.n	1a001c42 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001c34:	2303      	movs	r3, #3
1a001c36:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001c38:	2310      	movs	r3, #16
1a001c3a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001c3c:	9b01      	ldr	r3, [sp, #4]
}
1a001c3e:	b003      	add	sp, #12
1a001c40:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a001c42:	2300      	movs	r3, #0
1a001c44:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001c46:	69a3      	ldr	r3, [r4, #24]
1a001c48:	9301      	str	r3, [sp, #4]
1a001c4a:	e7f3      	b.n	1a001c34 <Chip_UART_Init+0x34>
1a001c4c:	1a002d88 	.word	0x1a002d88
1a001c50:	40082000 	.word	0x40082000

1a001c54 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001c58:	b083      	sub	sp, #12
1a001c5a:	9001      	str	r0, [sp, #4]
1a001c5c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001c5e:	f7ff ffb9 	bl	1a001bd4 <Chip_UART_GetIndex>
1a001c62:	4b32      	ldr	r3, [pc, #200]	; (1a001d2c <Chip_UART_SetBaudFDR+0xd8>)
1a001c64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001c68:	f7ff ff8e 	bl	1a001b88 <Chip_Clock_GetRate>
1a001c6c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001c6e:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001c72:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001c74:	f04f 0b00 	mov.w	fp, #0
1a001c78:	46a2      	mov	sl, r4
1a001c7a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001c7c:	e02a      	b.n	1a001cd4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a001c7e:	4242      	negs	r2, r0
				div ++;
1a001c80:	1c4b      	adds	r3, r1, #1
1a001c82:	e017      	b.n	1a001cb4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001c84:	b30a      	cbz	r2, 1a001cca <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001c86:	4617      	mov	r7, r2
			sd = d;
1a001c88:	46ab      	mov	fp, r5
			sm = m;
1a001c8a:	46a2      	mov	sl, r4
			sdiv = div;
1a001c8c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001c8e:	3501      	adds	r5, #1
1a001c90:	42ac      	cmp	r4, r5
1a001c92:	d91e      	bls.n	1a001cd2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001c94:	0933      	lsrs	r3, r6, #4
1a001c96:	0730      	lsls	r0, r6, #28
1a001c98:	fba4 0100 	umull	r0, r1, r4, r0
1a001c9c:	fb04 1103 	mla	r1, r4, r3, r1
1a001ca0:	1962      	adds	r2, r4, r5
1a001ca2:	fb08 f202 	mul.w	r2, r8, r2
1a001ca6:	2300      	movs	r3, #0
1a001ca8:	f000 f886 	bl	1a001db8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001cac:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001cae:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001cb0:	2800      	cmp	r0, #0
1a001cb2:	dbe4      	blt.n	1a001c7e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001cb4:	4297      	cmp	r7, r2
1a001cb6:	d3ea      	bcc.n	1a001c8e <Chip_UART_SetBaudFDR+0x3a>
1a001cb8:	2b00      	cmp	r3, #0
1a001cba:	d0e8      	beq.n	1a001c8e <Chip_UART_SetBaudFDR+0x3a>
1a001cbc:	0c19      	lsrs	r1, r3, #16
1a001cbe:	d1e6      	bne.n	1a001c8e <Chip_UART_SetBaudFDR+0x3a>
1a001cc0:	2b02      	cmp	r3, #2
1a001cc2:	d8df      	bhi.n	1a001c84 <Chip_UART_SetBaudFDR+0x30>
1a001cc4:	2d00      	cmp	r5, #0
1a001cc6:	d0dd      	beq.n	1a001c84 <Chip_UART_SetBaudFDR+0x30>
1a001cc8:	e7e1      	b.n	1a001c8e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001cca:	4617      	mov	r7, r2
			sd = d;
1a001ccc:	46ab      	mov	fp, r5
			sm = m;
1a001cce:	46a2      	mov	sl, r4
			sdiv = div;
1a001cd0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001cd2:	3401      	adds	r4, #1
1a001cd4:	b11f      	cbz	r7, 1a001cde <Chip_UART_SetBaudFDR+0x8a>
1a001cd6:	2c0f      	cmp	r4, #15
1a001cd8:	d801      	bhi.n	1a001cde <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001cda:	2500      	movs	r5, #0
1a001cdc:	e7d8      	b.n	1a001c90 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001cde:	f1b9 0f00 	cmp.w	r9, #0
1a001ce2:	d01e      	beq.n	1a001d22 <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001ce4:	9a01      	ldr	r2, [sp, #4]
1a001ce6:	4611      	mov	r1, r2
1a001ce8:	68d3      	ldr	r3, [r2, #12]
1a001cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001cee:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001cf0:	fa5f f389 	uxtb.w	r3, r9
1a001cf4:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a001cf6:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001cfa:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001cfc:	68d3      	ldr	r3, [r2, #12]
1a001cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001d02:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001d04:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001d08:	b2db      	uxtb	r3, r3
1a001d0a:	f00b 020f 	and.w	r2, fp, #15
1a001d0e:	4313      	orrs	r3, r2
1a001d10:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001d12:	0933      	lsrs	r3, r6, #4
1a001d14:	fb0a f303 	mul.w	r3, sl, r3
1a001d18:	44da      	add	sl, fp
1a001d1a:	fb09 f90a 	mul.w	r9, r9, sl
1a001d1e:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001d22:	4648      	mov	r0, r9
1a001d24:	b003      	add	sp, #12
1a001d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001d2a:	bf00      	nop
1a001d2c:	1a002d80 	.word	0x1a002d80

1a001d30 <ResetISR>:
void ResetISR(void) {
1a001d30:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a001d32:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001d34:	4b18      	ldr	r3, [pc, #96]	; (1a001d98 <ResetISR+0x68>)
1a001d36:	4a19      	ldr	r2, [pc, #100]	; (1a001d9c <ResetISR+0x6c>)
1a001d38:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001d3a:	3304      	adds	r3, #4
1a001d3c:	4a18      	ldr	r2, [pc, #96]	; (1a001da0 <ResetISR+0x70>)
1a001d3e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001d40:	2300      	movs	r3, #0
1a001d42:	e005      	b.n	1a001d50 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001d44:	4a17      	ldr	r2, [pc, #92]	; (1a001da4 <ResetISR+0x74>)
1a001d46:	f04f 31ff 	mov.w	r1, #4294967295
1a001d4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001d4e:	3301      	adds	r3, #1
1a001d50:	2b07      	cmp	r3, #7
1a001d52:	d9f7      	bls.n	1a001d44 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a001d54:	b662      	cpsie	i
    SystemInit();
1a001d56:	f7ff f9ab 	bl	1a0010b0 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a001d5a:	4b13      	ldr	r3, [pc, #76]	; (1a001da8 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001d5c:	e007      	b.n	1a001d6e <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a001d5e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001d62:	689a      	ldr	r2, [r3, #8]
1a001d64:	6859      	ldr	r1, [r3, #4]
1a001d66:	6818      	ldr	r0, [r3, #0]
1a001d68:	f7fe fa10 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a001d6c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a001d6e:	4a0f      	ldr	r2, [pc, #60]	; (1a001dac <ResetISR+0x7c>)
1a001d70:	4293      	cmp	r3, r2
1a001d72:	d3f4      	bcc.n	1a001d5e <ResetISR+0x2e>
1a001d74:	e006      	b.n	1a001d84 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a001d76:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001d78:	6859      	ldr	r1, [r3, #4]
1a001d7a:	f854 0b08 	ldr.w	r0, [r4], #8
1a001d7e:	f7fe fa14 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a001d82:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001d84:	4a0a      	ldr	r2, [pc, #40]	; (1a001db0 <ResetISR+0x80>)
1a001d86:	4293      	cmp	r3, r2
1a001d88:	d3f5      	bcc.n	1a001d76 <ResetISR+0x46>
    __libc_init_array();
1a001d8a:	f000 f997 	bl	1a0020bc <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a001d8e:	f7ff fa67 	bl	1a001260 <Board_Init>
    main();
1a001d92:	f7fe fab5 	bl	1a000300 <main>
        ;
1a001d96:	e7fe      	b.n	1a001d96 <ResetISR+0x66>
1a001d98:	40053100 	.word	0x40053100
1a001d9c:	10df1000 	.word	0x10df1000
1a001da0:	01dff7ff 	.word	0x01dff7ff
1a001da4:	e000e280 	.word	0xe000e280
1a001da8:	1a000114 	.word	0x1a000114
1a001dac:	1a000150 	.word	0x1a000150
1a001db0:	1a000178 	.word	0x1a000178

1a001db4 <_init>:
void _init(void) {}
1a001db4:	4770      	bx	lr
1a001db6:	Address 0x1a001db6 is out of bounds.


1a001db8 <__aeabi_uldivmod>:
1a001db8:	b953      	cbnz	r3, 1a001dd0 <__aeabi_uldivmod+0x18>
1a001dba:	b94a      	cbnz	r2, 1a001dd0 <__aeabi_uldivmod+0x18>
1a001dbc:	2900      	cmp	r1, #0
1a001dbe:	bf08      	it	eq
1a001dc0:	2800      	cmpeq	r0, #0
1a001dc2:	bf1c      	itt	ne
1a001dc4:	f04f 31ff 	movne.w	r1, #4294967295
1a001dc8:	f04f 30ff 	movne.w	r0, #4294967295
1a001dcc:	f000 b974 	b.w	1a0020b8 <__aeabi_idiv0>
1a001dd0:	f1ad 0c08 	sub.w	ip, sp, #8
1a001dd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001dd8:	f000 f806 	bl	1a001de8 <__udivmoddi4>
1a001ddc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001de4:	b004      	add	sp, #16
1a001de6:	4770      	bx	lr

1a001de8 <__udivmoddi4>:
1a001de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001dec:	9e08      	ldr	r6, [sp, #32]
1a001dee:	4604      	mov	r4, r0
1a001df0:	4688      	mov	r8, r1
1a001df2:	2b00      	cmp	r3, #0
1a001df4:	f040 8085 	bne.w	1a001f02 <__udivmoddi4+0x11a>
1a001df8:	428a      	cmp	r2, r1
1a001dfa:	4615      	mov	r5, r2
1a001dfc:	d948      	bls.n	1a001e90 <__udivmoddi4+0xa8>
1a001dfe:	fab2 f282 	clz	r2, r2
1a001e02:	b14a      	cbz	r2, 1a001e18 <__udivmoddi4+0x30>
1a001e04:	f1c2 0720 	rsb	r7, r2, #32
1a001e08:	fa01 f302 	lsl.w	r3, r1, r2
1a001e0c:	fa20 f707 	lsr.w	r7, r0, r7
1a001e10:	4095      	lsls	r5, r2
1a001e12:	ea47 0803 	orr.w	r8, r7, r3
1a001e16:	4094      	lsls	r4, r2
1a001e18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e1c:	0c23      	lsrs	r3, r4, #16
1a001e1e:	fbb8 f7fe 	udiv	r7, r8, lr
1a001e22:	fa1f fc85 	uxth.w	ip, r5
1a001e26:	fb0e 8817 	mls	r8, lr, r7, r8
1a001e2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001e2e:	fb07 f10c 	mul.w	r1, r7, ip
1a001e32:	4299      	cmp	r1, r3
1a001e34:	d909      	bls.n	1a001e4a <__udivmoddi4+0x62>
1a001e36:	18eb      	adds	r3, r5, r3
1a001e38:	f107 30ff 	add.w	r0, r7, #4294967295
1a001e3c:	f080 80e3 	bcs.w	1a002006 <__udivmoddi4+0x21e>
1a001e40:	4299      	cmp	r1, r3
1a001e42:	f240 80e0 	bls.w	1a002006 <__udivmoddi4+0x21e>
1a001e46:	3f02      	subs	r7, #2
1a001e48:	442b      	add	r3, r5
1a001e4a:	1a5b      	subs	r3, r3, r1
1a001e4c:	b2a4      	uxth	r4, r4
1a001e4e:	fbb3 f0fe 	udiv	r0, r3, lr
1a001e52:	fb0e 3310 	mls	r3, lr, r0, r3
1a001e56:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001e5a:	fb00 fc0c 	mul.w	ip, r0, ip
1a001e5e:	45a4      	cmp	ip, r4
1a001e60:	d909      	bls.n	1a001e76 <__udivmoddi4+0x8e>
1a001e62:	192c      	adds	r4, r5, r4
1a001e64:	f100 33ff 	add.w	r3, r0, #4294967295
1a001e68:	f080 80cb 	bcs.w	1a002002 <__udivmoddi4+0x21a>
1a001e6c:	45a4      	cmp	ip, r4
1a001e6e:	f240 80c8 	bls.w	1a002002 <__udivmoddi4+0x21a>
1a001e72:	3802      	subs	r0, #2
1a001e74:	442c      	add	r4, r5
1a001e76:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001e7a:	eba4 040c 	sub.w	r4, r4, ip
1a001e7e:	2700      	movs	r7, #0
1a001e80:	b11e      	cbz	r6, 1a001e8a <__udivmoddi4+0xa2>
1a001e82:	40d4      	lsrs	r4, r2
1a001e84:	2300      	movs	r3, #0
1a001e86:	e9c6 4300 	strd	r4, r3, [r6]
1a001e8a:	4639      	mov	r1, r7
1a001e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e90:	2a00      	cmp	r2, #0
1a001e92:	d053      	beq.n	1a001f3c <__udivmoddi4+0x154>
1a001e94:	fab2 f282 	clz	r2, r2
1a001e98:	2a00      	cmp	r2, #0
1a001e9a:	f040 80b6 	bne.w	1a00200a <__udivmoddi4+0x222>
1a001e9e:	1b49      	subs	r1, r1, r5
1a001ea0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ea4:	fa1f f885 	uxth.w	r8, r5
1a001ea8:	2701      	movs	r7, #1
1a001eaa:	fbb1 fcfe 	udiv	ip, r1, lr
1a001eae:	0c23      	lsrs	r3, r4, #16
1a001eb0:	fb0e 111c 	mls	r1, lr, ip, r1
1a001eb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001eb8:	fb08 f10c 	mul.w	r1, r8, ip
1a001ebc:	4299      	cmp	r1, r3
1a001ebe:	d907      	bls.n	1a001ed0 <__udivmoddi4+0xe8>
1a001ec0:	18eb      	adds	r3, r5, r3
1a001ec2:	f10c 30ff 	add.w	r0, ip, #4294967295
1a001ec6:	d202      	bcs.n	1a001ece <__udivmoddi4+0xe6>
1a001ec8:	4299      	cmp	r1, r3
1a001eca:	f200 80ec 	bhi.w	1a0020a6 <__udivmoddi4+0x2be>
1a001ece:	4684      	mov	ip, r0
1a001ed0:	1a59      	subs	r1, r3, r1
1a001ed2:	b2a3      	uxth	r3, r4
1a001ed4:	fbb1 f0fe 	udiv	r0, r1, lr
1a001ed8:	fb0e 1410 	mls	r4, lr, r0, r1
1a001edc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001ee0:	fb08 f800 	mul.w	r8, r8, r0
1a001ee4:	45a0      	cmp	r8, r4
1a001ee6:	d907      	bls.n	1a001ef8 <__udivmoddi4+0x110>
1a001ee8:	192c      	adds	r4, r5, r4
1a001eea:	f100 33ff 	add.w	r3, r0, #4294967295
1a001eee:	d202      	bcs.n	1a001ef6 <__udivmoddi4+0x10e>
1a001ef0:	45a0      	cmp	r8, r4
1a001ef2:	f200 80dc 	bhi.w	1a0020ae <__udivmoddi4+0x2c6>
1a001ef6:	4618      	mov	r0, r3
1a001ef8:	eba4 0408 	sub.w	r4, r4, r8
1a001efc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001f00:	e7be      	b.n	1a001e80 <__udivmoddi4+0x98>
1a001f02:	428b      	cmp	r3, r1
1a001f04:	d908      	bls.n	1a001f18 <__udivmoddi4+0x130>
1a001f06:	2e00      	cmp	r6, #0
1a001f08:	d078      	beq.n	1a001ffc <__udivmoddi4+0x214>
1a001f0a:	2700      	movs	r7, #0
1a001f0c:	e9c6 0100 	strd	r0, r1, [r6]
1a001f10:	4638      	mov	r0, r7
1a001f12:	4639      	mov	r1, r7
1a001f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f18:	fab3 f783 	clz	r7, r3
1a001f1c:	b97f      	cbnz	r7, 1a001f3e <__udivmoddi4+0x156>
1a001f1e:	428b      	cmp	r3, r1
1a001f20:	d302      	bcc.n	1a001f28 <__udivmoddi4+0x140>
1a001f22:	4282      	cmp	r2, r0
1a001f24:	f200 80bd 	bhi.w	1a0020a2 <__udivmoddi4+0x2ba>
1a001f28:	1a84      	subs	r4, r0, r2
1a001f2a:	eb61 0303 	sbc.w	r3, r1, r3
1a001f2e:	2001      	movs	r0, #1
1a001f30:	4698      	mov	r8, r3
1a001f32:	2e00      	cmp	r6, #0
1a001f34:	d0a9      	beq.n	1a001e8a <__udivmoddi4+0xa2>
1a001f36:	e9c6 4800 	strd	r4, r8, [r6]
1a001f3a:	e7a6      	b.n	1a001e8a <__udivmoddi4+0xa2>
1a001f3c:	deff      	udf	#255	; 0xff
1a001f3e:	f1c7 0520 	rsb	r5, r7, #32
1a001f42:	40bb      	lsls	r3, r7
1a001f44:	fa22 fc05 	lsr.w	ip, r2, r5
1a001f48:	ea4c 0c03 	orr.w	ip, ip, r3
1a001f4c:	fa01 f407 	lsl.w	r4, r1, r7
1a001f50:	fa20 f805 	lsr.w	r8, r0, r5
1a001f54:	fa21 f305 	lsr.w	r3, r1, r5
1a001f58:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001f5c:	ea48 0404 	orr.w	r4, r8, r4
1a001f60:	fbb3 f9fe 	udiv	r9, r3, lr
1a001f64:	0c21      	lsrs	r1, r4, #16
1a001f66:	fb0e 3319 	mls	r3, lr, r9, r3
1a001f6a:	fa1f f88c 	uxth.w	r8, ip
1a001f6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001f72:	fb09 fa08 	mul.w	sl, r9, r8
1a001f76:	459a      	cmp	sl, r3
1a001f78:	fa02 f207 	lsl.w	r2, r2, r7
1a001f7c:	fa00 f107 	lsl.w	r1, r0, r7
1a001f80:	d90b      	bls.n	1a001f9a <__udivmoddi4+0x1b2>
1a001f82:	eb1c 0303 	adds.w	r3, ip, r3
1a001f86:	f109 30ff 	add.w	r0, r9, #4294967295
1a001f8a:	f080 8088 	bcs.w	1a00209e <__udivmoddi4+0x2b6>
1a001f8e:	459a      	cmp	sl, r3
1a001f90:	f240 8085 	bls.w	1a00209e <__udivmoddi4+0x2b6>
1a001f94:	f1a9 0902 	sub.w	r9, r9, #2
1a001f98:	4463      	add	r3, ip
1a001f9a:	eba3 030a 	sub.w	r3, r3, sl
1a001f9e:	b2a4      	uxth	r4, r4
1a001fa0:	fbb3 f0fe 	udiv	r0, r3, lr
1a001fa4:	fb0e 3310 	mls	r3, lr, r0, r3
1a001fa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001fac:	fb00 f808 	mul.w	r8, r0, r8
1a001fb0:	45a0      	cmp	r8, r4
1a001fb2:	d908      	bls.n	1a001fc6 <__udivmoddi4+0x1de>
1a001fb4:	eb1c 0404 	adds.w	r4, ip, r4
1a001fb8:	f100 33ff 	add.w	r3, r0, #4294967295
1a001fbc:	d26b      	bcs.n	1a002096 <__udivmoddi4+0x2ae>
1a001fbe:	45a0      	cmp	r8, r4
1a001fc0:	d969      	bls.n	1a002096 <__udivmoddi4+0x2ae>
1a001fc2:	3802      	subs	r0, #2
1a001fc4:	4464      	add	r4, ip
1a001fc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001fca:	eba4 0408 	sub.w	r4, r4, r8
1a001fce:	fba0 8902 	umull	r8, r9, r0, r2
1a001fd2:	454c      	cmp	r4, r9
1a001fd4:	46c6      	mov	lr, r8
1a001fd6:	464b      	mov	r3, r9
1a001fd8:	d354      	bcc.n	1a002084 <__udivmoddi4+0x29c>
1a001fda:	d051      	beq.n	1a002080 <__udivmoddi4+0x298>
1a001fdc:	2e00      	cmp	r6, #0
1a001fde:	d069      	beq.n	1a0020b4 <__udivmoddi4+0x2cc>
1a001fe0:	ebb1 020e 	subs.w	r2, r1, lr
1a001fe4:	eb64 0403 	sbc.w	r4, r4, r3
1a001fe8:	fa04 f505 	lsl.w	r5, r4, r5
1a001fec:	fa22 f307 	lsr.w	r3, r2, r7
1a001ff0:	40fc      	lsrs	r4, r7
1a001ff2:	431d      	orrs	r5, r3
1a001ff4:	e9c6 5400 	strd	r5, r4, [r6]
1a001ff8:	2700      	movs	r7, #0
1a001ffa:	e746      	b.n	1a001e8a <__udivmoddi4+0xa2>
1a001ffc:	4637      	mov	r7, r6
1a001ffe:	4630      	mov	r0, r6
1a002000:	e743      	b.n	1a001e8a <__udivmoddi4+0xa2>
1a002002:	4618      	mov	r0, r3
1a002004:	e737      	b.n	1a001e76 <__udivmoddi4+0x8e>
1a002006:	4607      	mov	r7, r0
1a002008:	e71f      	b.n	1a001e4a <__udivmoddi4+0x62>
1a00200a:	f1c2 0320 	rsb	r3, r2, #32
1a00200e:	fa20 f703 	lsr.w	r7, r0, r3
1a002012:	4095      	lsls	r5, r2
1a002014:	fa01 f002 	lsl.w	r0, r1, r2
1a002018:	fa21 f303 	lsr.w	r3, r1, r3
1a00201c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002020:	4338      	orrs	r0, r7
1a002022:	0c01      	lsrs	r1, r0, #16
1a002024:	fbb3 f7fe 	udiv	r7, r3, lr
1a002028:	fa1f f885 	uxth.w	r8, r5
1a00202c:	fb0e 3317 	mls	r3, lr, r7, r3
1a002030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002034:	fb07 f308 	mul.w	r3, r7, r8
1a002038:	428b      	cmp	r3, r1
1a00203a:	fa04 f402 	lsl.w	r4, r4, r2
1a00203e:	d907      	bls.n	1a002050 <__udivmoddi4+0x268>
1a002040:	1869      	adds	r1, r5, r1
1a002042:	f107 3cff 	add.w	ip, r7, #4294967295
1a002046:	d228      	bcs.n	1a00209a <__udivmoddi4+0x2b2>
1a002048:	428b      	cmp	r3, r1
1a00204a:	d926      	bls.n	1a00209a <__udivmoddi4+0x2b2>
1a00204c:	3f02      	subs	r7, #2
1a00204e:	4429      	add	r1, r5
1a002050:	1acb      	subs	r3, r1, r3
1a002052:	b281      	uxth	r1, r0
1a002054:	fbb3 f0fe 	udiv	r0, r3, lr
1a002058:	fb0e 3310 	mls	r3, lr, r0, r3
1a00205c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002060:	fb00 f308 	mul.w	r3, r0, r8
1a002064:	428b      	cmp	r3, r1
1a002066:	d907      	bls.n	1a002078 <__udivmoddi4+0x290>
1a002068:	1869      	adds	r1, r5, r1
1a00206a:	f100 3cff 	add.w	ip, r0, #4294967295
1a00206e:	d210      	bcs.n	1a002092 <__udivmoddi4+0x2aa>
1a002070:	428b      	cmp	r3, r1
1a002072:	d90e      	bls.n	1a002092 <__udivmoddi4+0x2aa>
1a002074:	3802      	subs	r0, #2
1a002076:	4429      	add	r1, r5
1a002078:	1ac9      	subs	r1, r1, r3
1a00207a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00207e:	e714      	b.n	1a001eaa <__udivmoddi4+0xc2>
1a002080:	4541      	cmp	r1, r8
1a002082:	d2ab      	bcs.n	1a001fdc <__udivmoddi4+0x1f4>
1a002084:	ebb8 0e02 	subs.w	lr, r8, r2
1a002088:	eb69 020c 	sbc.w	r2, r9, ip
1a00208c:	3801      	subs	r0, #1
1a00208e:	4613      	mov	r3, r2
1a002090:	e7a4      	b.n	1a001fdc <__udivmoddi4+0x1f4>
1a002092:	4660      	mov	r0, ip
1a002094:	e7f0      	b.n	1a002078 <__udivmoddi4+0x290>
1a002096:	4618      	mov	r0, r3
1a002098:	e795      	b.n	1a001fc6 <__udivmoddi4+0x1de>
1a00209a:	4667      	mov	r7, ip
1a00209c:	e7d8      	b.n	1a002050 <__udivmoddi4+0x268>
1a00209e:	4681      	mov	r9, r0
1a0020a0:	e77b      	b.n	1a001f9a <__udivmoddi4+0x1b2>
1a0020a2:	4638      	mov	r0, r7
1a0020a4:	e745      	b.n	1a001f32 <__udivmoddi4+0x14a>
1a0020a6:	f1ac 0c02 	sub.w	ip, ip, #2
1a0020aa:	442b      	add	r3, r5
1a0020ac:	e710      	b.n	1a001ed0 <__udivmoddi4+0xe8>
1a0020ae:	3802      	subs	r0, #2
1a0020b0:	442c      	add	r4, r5
1a0020b2:	e721      	b.n	1a001ef8 <__udivmoddi4+0x110>
1a0020b4:	4637      	mov	r7, r6
1a0020b6:	e6e8      	b.n	1a001e8a <__udivmoddi4+0xa2>

1a0020b8 <__aeabi_idiv0>:
1a0020b8:	4770      	bx	lr
1a0020ba:	bf00      	nop

1a0020bc <__libc_init_array>:
1a0020bc:	b570      	push	{r4, r5, r6, lr}
1a0020be:	4d0d      	ldr	r5, [pc, #52]	; (1a0020f4 <__libc_init_array+0x38>)
1a0020c0:	4c0d      	ldr	r4, [pc, #52]	; (1a0020f8 <__libc_init_array+0x3c>)
1a0020c2:	1b64      	subs	r4, r4, r5
1a0020c4:	10a4      	asrs	r4, r4, #2
1a0020c6:	2600      	movs	r6, #0
1a0020c8:	42a6      	cmp	r6, r4
1a0020ca:	d109      	bne.n	1a0020e0 <__libc_init_array+0x24>
1a0020cc:	4d0b      	ldr	r5, [pc, #44]	; (1a0020fc <__libc_init_array+0x40>)
1a0020ce:	4c0c      	ldr	r4, [pc, #48]	; (1a002100 <__libc_init_array+0x44>)
1a0020d0:	f7ff fe70 	bl	1a001db4 <_init>
1a0020d4:	1b64      	subs	r4, r4, r5
1a0020d6:	10a4      	asrs	r4, r4, #2
1a0020d8:	2600      	movs	r6, #0
1a0020da:	42a6      	cmp	r6, r4
1a0020dc:	d105      	bne.n	1a0020ea <__libc_init_array+0x2e>
1a0020de:	bd70      	pop	{r4, r5, r6, pc}
1a0020e0:	f855 3b04 	ldr.w	r3, [r5], #4
1a0020e4:	4798      	blx	r3
1a0020e6:	3601      	adds	r6, #1
1a0020e8:	e7ee      	b.n	1a0020c8 <__libc_init_array+0xc>
1a0020ea:	f855 3b04 	ldr.w	r3, [r5], #4
1a0020ee:	4798      	blx	r3
1a0020f0:	3601      	adds	r6, #1
1a0020f2:	e7f2      	b.n	1a0020da <__libc_init_array+0x1e>
1a0020f4:	1a002e24 	.word	0x1a002e24
1a0020f8:	1a002e24 	.word	0x1a002e24
1a0020fc:	1a002e24 	.word	0x1a002e24
1a002100:	1a002e24 	.word	0x1a002e24

1a002104 <memcpy>:
1a002104:	440a      	add	r2, r1
1a002106:	4291      	cmp	r1, r2
1a002108:	f100 33ff 	add.w	r3, r0, #4294967295
1a00210c:	d100      	bne.n	1a002110 <memcpy+0xc>
1a00210e:	4770      	bx	lr
1a002110:	b510      	push	{r4, lr}
1a002112:	f811 4b01 	ldrb.w	r4, [r1], #1
1a002116:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00211a:	4291      	cmp	r1, r2
1a00211c:	d1f9      	bne.n	1a002112 <memcpy+0xe>
1a00211e:	bd10      	pop	{r4, pc}

1a002120 <memset>:
1a002120:	4402      	add	r2, r0
1a002122:	4603      	mov	r3, r0
1a002124:	4293      	cmp	r3, r2
1a002126:	d100      	bne.n	1a00212a <memset+0xa>
1a002128:	4770      	bx	lr
1a00212a:	f803 1b01 	strb.w	r1, [r3], #1
1a00212e:	e7f9      	b.n	1a002124 <memset+0x4>

1a002130 <siprintf>:
1a002130:	b40e      	push	{r1, r2, r3}
1a002132:	b500      	push	{lr}
1a002134:	b09c      	sub	sp, #112	; 0x70
1a002136:	ab1d      	add	r3, sp, #116	; 0x74
1a002138:	9002      	str	r0, [sp, #8]
1a00213a:	9006      	str	r0, [sp, #24]
1a00213c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a002140:	4809      	ldr	r0, [pc, #36]	; (1a002168 <siprintf+0x38>)
1a002142:	9107      	str	r1, [sp, #28]
1a002144:	9104      	str	r1, [sp, #16]
1a002146:	4909      	ldr	r1, [pc, #36]	; (1a00216c <siprintf+0x3c>)
1a002148:	f853 2b04 	ldr.w	r2, [r3], #4
1a00214c:	9105      	str	r1, [sp, #20]
1a00214e:	6800      	ldr	r0, [r0, #0]
1a002150:	9301      	str	r3, [sp, #4]
1a002152:	a902      	add	r1, sp, #8
1a002154:	f000 f91a 	bl	1a00238c <_svfiprintf_r>
1a002158:	9b02      	ldr	r3, [sp, #8]
1a00215a:	2200      	movs	r2, #0
1a00215c:	701a      	strb	r2, [r3, #0]
1a00215e:	b01c      	add	sp, #112	; 0x70
1a002160:	f85d eb04 	ldr.w	lr, [sp], #4
1a002164:	b003      	add	sp, #12
1a002166:	4770      	bx	lr
1a002168:	100000d8 	.word	0x100000d8
1a00216c:	ffff0208 	.word	0xffff0208

1a002170 <strcpy>:
1a002170:	4603      	mov	r3, r0
1a002172:	f811 2b01 	ldrb.w	r2, [r1], #1
1a002176:	f803 2b01 	strb.w	r2, [r3], #1
1a00217a:	2a00      	cmp	r2, #0
1a00217c:	d1f9      	bne.n	1a002172 <strcpy+0x2>
1a00217e:	4770      	bx	lr

1a002180 <__retarget_lock_acquire_recursive>:
1a002180:	4770      	bx	lr

1a002182 <__retarget_lock_release_recursive>:
1a002182:	4770      	bx	lr

1a002184 <_free_r>:
1a002184:	b538      	push	{r3, r4, r5, lr}
1a002186:	4605      	mov	r5, r0
1a002188:	2900      	cmp	r1, #0
1a00218a:	d045      	beq.n	1a002218 <_free_r+0x94>
1a00218c:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002190:	1f0c      	subs	r4, r1, #4
1a002192:	2b00      	cmp	r3, #0
1a002194:	bfb8      	it	lt
1a002196:	18e4      	addlt	r4, r4, r3
1a002198:	f000 fbe4 	bl	1a002964 <__malloc_lock>
1a00219c:	4a1f      	ldr	r2, [pc, #124]	; (1a00221c <_free_r+0x98>)
1a00219e:	6813      	ldr	r3, [r2, #0]
1a0021a0:	4610      	mov	r0, r2
1a0021a2:	b933      	cbnz	r3, 1a0021b2 <_free_r+0x2e>
1a0021a4:	6063      	str	r3, [r4, #4]
1a0021a6:	6014      	str	r4, [r2, #0]
1a0021a8:	4628      	mov	r0, r5
1a0021aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0021ae:	f000 bbdf 	b.w	1a002970 <__malloc_unlock>
1a0021b2:	42a3      	cmp	r3, r4
1a0021b4:	d90c      	bls.n	1a0021d0 <_free_r+0x4c>
1a0021b6:	6821      	ldr	r1, [r4, #0]
1a0021b8:	1862      	adds	r2, r4, r1
1a0021ba:	4293      	cmp	r3, r2
1a0021bc:	bf04      	itt	eq
1a0021be:	681a      	ldreq	r2, [r3, #0]
1a0021c0:	685b      	ldreq	r3, [r3, #4]
1a0021c2:	6063      	str	r3, [r4, #4]
1a0021c4:	bf04      	itt	eq
1a0021c6:	1852      	addeq	r2, r2, r1
1a0021c8:	6022      	streq	r2, [r4, #0]
1a0021ca:	6004      	str	r4, [r0, #0]
1a0021cc:	e7ec      	b.n	1a0021a8 <_free_r+0x24>
1a0021ce:	4613      	mov	r3, r2
1a0021d0:	685a      	ldr	r2, [r3, #4]
1a0021d2:	b10a      	cbz	r2, 1a0021d8 <_free_r+0x54>
1a0021d4:	42a2      	cmp	r2, r4
1a0021d6:	d9fa      	bls.n	1a0021ce <_free_r+0x4a>
1a0021d8:	6819      	ldr	r1, [r3, #0]
1a0021da:	1858      	adds	r0, r3, r1
1a0021dc:	42a0      	cmp	r0, r4
1a0021de:	d10b      	bne.n	1a0021f8 <_free_r+0x74>
1a0021e0:	6820      	ldr	r0, [r4, #0]
1a0021e2:	4401      	add	r1, r0
1a0021e4:	1858      	adds	r0, r3, r1
1a0021e6:	4282      	cmp	r2, r0
1a0021e8:	6019      	str	r1, [r3, #0]
1a0021ea:	d1dd      	bne.n	1a0021a8 <_free_r+0x24>
1a0021ec:	6810      	ldr	r0, [r2, #0]
1a0021ee:	6852      	ldr	r2, [r2, #4]
1a0021f0:	605a      	str	r2, [r3, #4]
1a0021f2:	4401      	add	r1, r0
1a0021f4:	6019      	str	r1, [r3, #0]
1a0021f6:	e7d7      	b.n	1a0021a8 <_free_r+0x24>
1a0021f8:	d902      	bls.n	1a002200 <_free_r+0x7c>
1a0021fa:	230c      	movs	r3, #12
1a0021fc:	602b      	str	r3, [r5, #0]
1a0021fe:	e7d3      	b.n	1a0021a8 <_free_r+0x24>
1a002200:	6820      	ldr	r0, [r4, #0]
1a002202:	1821      	adds	r1, r4, r0
1a002204:	428a      	cmp	r2, r1
1a002206:	bf04      	itt	eq
1a002208:	6811      	ldreq	r1, [r2, #0]
1a00220a:	6852      	ldreq	r2, [r2, #4]
1a00220c:	6062      	str	r2, [r4, #4]
1a00220e:	bf04      	itt	eq
1a002210:	1809      	addeq	r1, r1, r0
1a002212:	6021      	streq	r1, [r4, #0]
1a002214:	605c      	str	r4, [r3, #4]
1a002216:	e7c7      	b.n	1a0021a8 <_free_r+0x24>
1a002218:	bd38      	pop	{r3, r4, r5, pc}
1a00221a:	bf00      	nop
1a00221c:	10000174 	.word	0x10000174

1a002220 <_malloc_r>:
1a002220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002222:	1ccd      	adds	r5, r1, #3
1a002224:	f025 0503 	bic.w	r5, r5, #3
1a002228:	3508      	adds	r5, #8
1a00222a:	2d0c      	cmp	r5, #12
1a00222c:	bf38      	it	cc
1a00222e:	250c      	movcc	r5, #12
1a002230:	2d00      	cmp	r5, #0
1a002232:	4606      	mov	r6, r0
1a002234:	db01      	blt.n	1a00223a <_malloc_r+0x1a>
1a002236:	42a9      	cmp	r1, r5
1a002238:	d903      	bls.n	1a002242 <_malloc_r+0x22>
1a00223a:	230c      	movs	r3, #12
1a00223c:	6033      	str	r3, [r6, #0]
1a00223e:	2000      	movs	r0, #0
1a002240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002242:	f000 fb8f 	bl	1a002964 <__malloc_lock>
1a002246:	4921      	ldr	r1, [pc, #132]	; (1a0022cc <_malloc_r+0xac>)
1a002248:	680a      	ldr	r2, [r1, #0]
1a00224a:	4614      	mov	r4, r2
1a00224c:	b99c      	cbnz	r4, 1a002276 <_malloc_r+0x56>
1a00224e:	4f20      	ldr	r7, [pc, #128]	; (1a0022d0 <_malloc_r+0xb0>)
1a002250:	683b      	ldr	r3, [r7, #0]
1a002252:	b923      	cbnz	r3, 1a00225e <_malloc_r+0x3e>
1a002254:	4621      	mov	r1, r4
1a002256:	4630      	mov	r0, r6
1a002258:	f7fe ff38 	bl	1a0010cc <_sbrk_r>
1a00225c:	6038      	str	r0, [r7, #0]
1a00225e:	4629      	mov	r1, r5
1a002260:	4630      	mov	r0, r6
1a002262:	f7fe ff33 	bl	1a0010cc <_sbrk_r>
1a002266:	1c43      	adds	r3, r0, #1
1a002268:	d123      	bne.n	1a0022b2 <_malloc_r+0x92>
1a00226a:	230c      	movs	r3, #12
1a00226c:	6033      	str	r3, [r6, #0]
1a00226e:	4630      	mov	r0, r6
1a002270:	f000 fb7e 	bl	1a002970 <__malloc_unlock>
1a002274:	e7e3      	b.n	1a00223e <_malloc_r+0x1e>
1a002276:	6823      	ldr	r3, [r4, #0]
1a002278:	1b5b      	subs	r3, r3, r5
1a00227a:	d417      	bmi.n	1a0022ac <_malloc_r+0x8c>
1a00227c:	2b0b      	cmp	r3, #11
1a00227e:	d903      	bls.n	1a002288 <_malloc_r+0x68>
1a002280:	6023      	str	r3, [r4, #0]
1a002282:	441c      	add	r4, r3
1a002284:	6025      	str	r5, [r4, #0]
1a002286:	e004      	b.n	1a002292 <_malloc_r+0x72>
1a002288:	6863      	ldr	r3, [r4, #4]
1a00228a:	42a2      	cmp	r2, r4
1a00228c:	bf0c      	ite	eq
1a00228e:	600b      	streq	r3, [r1, #0]
1a002290:	6053      	strne	r3, [r2, #4]
1a002292:	4630      	mov	r0, r6
1a002294:	f000 fb6c 	bl	1a002970 <__malloc_unlock>
1a002298:	f104 000b 	add.w	r0, r4, #11
1a00229c:	1d23      	adds	r3, r4, #4
1a00229e:	f020 0007 	bic.w	r0, r0, #7
1a0022a2:	1ac2      	subs	r2, r0, r3
1a0022a4:	d0cc      	beq.n	1a002240 <_malloc_r+0x20>
1a0022a6:	1a1b      	subs	r3, r3, r0
1a0022a8:	50a3      	str	r3, [r4, r2]
1a0022aa:	e7c9      	b.n	1a002240 <_malloc_r+0x20>
1a0022ac:	4622      	mov	r2, r4
1a0022ae:	6864      	ldr	r4, [r4, #4]
1a0022b0:	e7cc      	b.n	1a00224c <_malloc_r+0x2c>
1a0022b2:	1cc4      	adds	r4, r0, #3
1a0022b4:	f024 0403 	bic.w	r4, r4, #3
1a0022b8:	42a0      	cmp	r0, r4
1a0022ba:	d0e3      	beq.n	1a002284 <_malloc_r+0x64>
1a0022bc:	1a21      	subs	r1, r4, r0
1a0022be:	4630      	mov	r0, r6
1a0022c0:	f7fe ff04 	bl	1a0010cc <_sbrk_r>
1a0022c4:	3001      	adds	r0, #1
1a0022c6:	d1dd      	bne.n	1a002284 <_malloc_r+0x64>
1a0022c8:	e7cf      	b.n	1a00226a <_malloc_r+0x4a>
1a0022ca:	bf00      	nop
1a0022cc:	10000174 	.word	0x10000174
1a0022d0:	10000178 	.word	0x10000178

1a0022d4 <__ssputs_r>:
1a0022d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0022d8:	688e      	ldr	r6, [r1, #8]
1a0022da:	429e      	cmp	r6, r3
1a0022dc:	4682      	mov	sl, r0
1a0022de:	460c      	mov	r4, r1
1a0022e0:	4691      	mov	r9, r2
1a0022e2:	4698      	mov	r8, r3
1a0022e4:	d838      	bhi.n	1a002358 <__ssputs_r+0x84>
1a0022e6:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
1a0022ea:	f41c 6f90 	tst.w	ip, #1152	; 0x480
1a0022ee:	d031      	beq.n	1a002354 <__ssputs_r+0x80>
1a0022f0:	6962      	ldr	r2, [r4, #20]
1a0022f2:	6825      	ldr	r5, [r4, #0]
1a0022f4:	6909      	ldr	r1, [r1, #16]
1a0022f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0022fa:	1a6f      	subs	r7, r5, r1
1a0022fc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a002300:	3301      	adds	r3, #1
1a002302:	1055      	asrs	r5, r2, #1
1a002304:	443b      	add	r3, r7
1a002306:	429d      	cmp	r5, r3
1a002308:	bf38      	it	cc
1a00230a:	461d      	movcc	r5, r3
1a00230c:	f41c 6f80 	tst.w	ip, #1024	; 0x400
1a002310:	d030      	beq.n	1a002374 <__ssputs_r+0xa0>
1a002312:	4629      	mov	r1, r5
1a002314:	f7ff ff84 	bl	1a002220 <_malloc_r>
1a002318:	4606      	mov	r6, r0
1a00231a:	b950      	cbnz	r0, 1a002332 <__ssputs_r+0x5e>
1a00231c:	230c      	movs	r3, #12
1a00231e:	f8ca 3000 	str.w	r3, [sl]
1a002322:	89a3      	ldrh	r3, [r4, #12]
1a002324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002328:	81a3      	strh	r3, [r4, #12]
1a00232a:	f04f 30ff 	mov.w	r0, #4294967295
1a00232e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002332:	463a      	mov	r2, r7
1a002334:	6921      	ldr	r1, [r4, #16]
1a002336:	f7ff fee5 	bl	1a002104 <memcpy>
1a00233a:	89a3      	ldrh	r3, [r4, #12]
1a00233c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002344:	81a3      	strh	r3, [r4, #12]
1a002346:	6126      	str	r6, [r4, #16]
1a002348:	6165      	str	r5, [r4, #20]
1a00234a:	443e      	add	r6, r7
1a00234c:	1bed      	subs	r5, r5, r7
1a00234e:	6026      	str	r6, [r4, #0]
1a002350:	60a5      	str	r5, [r4, #8]
1a002352:	4646      	mov	r6, r8
1a002354:	4546      	cmp	r6, r8
1a002356:	d900      	bls.n	1a00235a <__ssputs_r+0x86>
1a002358:	4646      	mov	r6, r8
1a00235a:	4632      	mov	r2, r6
1a00235c:	4649      	mov	r1, r9
1a00235e:	6820      	ldr	r0, [r4, #0]
1a002360:	f000 fae6 	bl	1a002930 <memmove>
1a002364:	68a3      	ldr	r3, [r4, #8]
1a002366:	1b9b      	subs	r3, r3, r6
1a002368:	60a3      	str	r3, [r4, #8]
1a00236a:	6823      	ldr	r3, [r4, #0]
1a00236c:	441e      	add	r6, r3
1a00236e:	6026      	str	r6, [r4, #0]
1a002370:	2000      	movs	r0, #0
1a002372:	e7dc      	b.n	1a00232e <__ssputs_r+0x5a>
1a002374:	462a      	mov	r2, r5
1a002376:	f000 fb01 	bl	1a00297c <_realloc_r>
1a00237a:	4606      	mov	r6, r0
1a00237c:	2800      	cmp	r0, #0
1a00237e:	d1e2      	bne.n	1a002346 <__ssputs_r+0x72>
1a002380:	6921      	ldr	r1, [r4, #16]
1a002382:	4650      	mov	r0, sl
1a002384:	f7ff fefe 	bl	1a002184 <_free_r>
1a002388:	e7c8      	b.n	1a00231c <__ssputs_r+0x48>
1a00238a:	Address 0x1a00238a is out of bounds.


1a00238c <_svfiprintf_r>:
1a00238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002390:	461e      	mov	r6, r3
1a002392:	898b      	ldrh	r3, [r1, #12]
1a002394:	061b      	lsls	r3, r3, #24
1a002396:	b09d      	sub	sp, #116	; 0x74
1a002398:	4607      	mov	r7, r0
1a00239a:	460d      	mov	r5, r1
1a00239c:	4614      	mov	r4, r2
1a00239e:	d50e      	bpl.n	1a0023be <_svfiprintf_r+0x32>
1a0023a0:	690b      	ldr	r3, [r1, #16]
1a0023a2:	b963      	cbnz	r3, 1a0023be <_svfiprintf_r+0x32>
1a0023a4:	2140      	movs	r1, #64	; 0x40
1a0023a6:	f7ff ff3b 	bl	1a002220 <_malloc_r>
1a0023aa:	6028      	str	r0, [r5, #0]
1a0023ac:	6128      	str	r0, [r5, #16]
1a0023ae:	b920      	cbnz	r0, 1a0023ba <_svfiprintf_r+0x2e>
1a0023b0:	230c      	movs	r3, #12
1a0023b2:	603b      	str	r3, [r7, #0]
1a0023b4:	f04f 30ff 	mov.w	r0, #4294967295
1a0023b8:	e0c9      	b.n	1a00254e <_svfiprintf_r+0x1c2>
1a0023ba:	2340      	movs	r3, #64	; 0x40
1a0023bc:	616b      	str	r3, [r5, #20]
1a0023be:	2300      	movs	r3, #0
1a0023c0:	9309      	str	r3, [sp, #36]	; 0x24
1a0023c2:	2320      	movs	r3, #32
1a0023c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0023c8:	f8df 919c 	ldr.w	r9, [pc, #412]	; 1a002568 <_svfiprintf_r+0x1dc>
1a0023cc:	9603      	str	r6, [sp, #12]
1a0023ce:	2330      	movs	r3, #48	; 0x30
1a0023d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0023d4:	f04f 0a01 	mov.w	sl, #1
1a0023d8:	4623      	mov	r3, r4
1a0023da:	461e      	mov	r6, r3
1a0023dc:	f813 2b01 	ldrb.w	r2, [r3], #1
1a0023e0:	b10a      	cbz	r2, 1a0023e6 <_svfiprintf_r+0x5a>
1a0023e2:	2a25      	cmp	r2, #37	; 0x25
1a0023e4:	d1f9      	bne.n	1a0023da <_svfiprintf_r+0x4e>
1a0023e6:	ebb6 0b04 	subs.w	fp, r6, r4
1a0023ea:	d00b      	beq.n	1a002404 <_svfiprintf_r+0x78>
1a0023ec:	465b      	mov	r3, fp
1a0023ee:	4622      	mov	r2, r4
1a0023f0:	4629      	mov	r1, r5
1a0023f2:	4638      	mov	r0, r7
1a0023f4:	f7ff ff6e 	bl	1a0022d4 <__ssputs_r>
1a0023f8:	3001      	adds	r0, #1
1a0023fa:	f000 80a3 	beq.w	1a002544 <_svfiprintf_r+0x1b8>
1a0023fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002400:	445b      	add	r3, fp
1a002402:	9309      	str	r3, [sp, #36]	; 0x24
1a002404:	7833      	ldrb	r3, [r6, #0]
1a002406:	2b00      	cmp	r3, #0
1a002408:	f000 809c 	beq.w	1a002544 <_svfiprintf_r+0x1b8>
1a00240c:	2300      	movs	r3, #0
1a00240e:	f04f 32ff 	mov.w	r2, #4294967295
1a002412:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a002416:	3601      	adds	r6, #1
1a002418:	9304      	str	r3, [sp, #16]
1a00241a:	9307      	str	r3, [sp, #28]
1a00241c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a002420:	931a      	str	r3, [sp, #104]	; 0x68
1a002422:	4634      	mov	r4, r6
1a002424:	2205      	movs	r2, #5
1a002426:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00242a:	484f      	ldr	r0, [pc, #316]	; (1a002568 <_svfiprintf_r+0x1dc>)
1a00242c:	f000 fa30 	bl	1a002890 <memchr>
1a002430:	9b04      	ldr	r3, [sp, #16]
1a002432:	b9c0      	cbnz	r0, 1a002466 <_svfiprintf_r+0xda>
1a002434:	06d9      	lsls	r1, r3, #27
1a002436:	bf44      	itt	mi
1a002438:	2220      	movmi	r2, #32
1a00243a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00243e:	071a      	lsls	r2, r3, #28
1a002440:	bf44      	itt	mi
1a002442:	222b      	movmi	r2, #43	; 0x2b
1a002444:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a002448:	7832      	ldrb	r2, [r6, #0]
1a00244a:	2a2a      	cmp	r2, #42	; 0x2a
1a00244c:	d013      	beq.n	1a002476 <_svfiprintf_r+0xea>
1a00244e:	9a07      	ldr	r2, [sp, #28]
1a002450:	4634      	mov	r4, r6
1a002452:	2000      	movs	r0, #0
1a002454:	260a      	movs	r6, #10
1a002456:	4621      	mov	r1, r4
1a002458:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00245c:	3b30      	subs	r3, #48	; 0x30
1a00245e:	2b09      	cmp	r3, #9
1a002460:	d94b      	bls.n	1a0024fa <_svfiprintf_r+0x16e>
1a002462:	b970      	cbnz	r0, 1a002482 <_svfiprintf_r+0xf6>
1a002464:	e014      	b.n	1a002490 <_svfiprintf_r+0x104>
1a002466:	eba0 0009 	sub.w	r0, r0, r9
1a00246a:	fa0a f000 	lsl.w	r0, sl, r0
1a00246e:	4318      	orrs	r0, r3
1a002470:	9004      	str	r0, [sp, #16]
1a002472:	4626      	mov	r6, r4
1a002474:	e7d5      	b.n	1a002422 <_svfiprintf_r+0x96>
1a002476:	9a03      	ldr	r2, [sp, #12]
1a002478:	1d11      	adds	r1, r2, #4
1a00247a:	6812      	ldr	r2, [r2, #0]
1a00247c:	9103      	str	r1, [sp, #12]
1a00247e:	2a00      	cmp	r2, #0
1a002480:	db01      	blt.n	1a002486 <_svfiprintf_r+0xfa>
1a002482:	9207      	str	r2, [sp, #28]
1a002484:	e004      	b.n	1a002490 <_svfiprintf_r+0x104>
1a002486:	4252      	negs	r2, r2
1a002488:	f043 0302 	orr.w	r3, r3, #2
1a00248c:	9207      	str	r2, [sp, #28]
1a00248e:	9304      	str	r3, [sp, #16]
1a002490:	7823      	ldrb	r3, [r4, #0]
1a002492:	2b2e      	cmp	r3, #46	; 0x2e
1a002494:	d10c      	bne.n	1a0024b0 <_svfiprintf_r+0x124>
1a002496:	7863      	ldrb	r3, [r4, #1]
1a002498:	2b2a      	cmp	r3, #42	; 0x2a
1a00249a:	d133      	bne.n	1a002504 <_svfiprintf_r+0x178>
1a00249c:	9b03      	ldr	r3, [sp, #12]
1a00249e:	1d1a      	adds	r2, r3, #4
1a0024a0:	681b      	ldr	r3, [r3, #0]
1a0024a2:	9203      	str	r2, [sp, #12]
1a0024a4:	2b00      	cmp	r3, #0
1a0024a6:	bfb8      	it	lt
1a0024a8:	f04f 33ff 	movlt.w	r3, #4294967295
1a0024ac:	3402      	adds	r4, #2
1a0024ae:	9305      	str	r3, [sp, #20]
1a0024b0:	4e2e      	ldr	r6, [pc, #184]	; (1a00256c <_svfiprintf_r+0x1e0>)
1a0024b2:	7821      	ldrb	r1, [r4, #0]
1a0024b4:	2203      	movs	r2, #3
1a0024b6:	4630      	mov	r0, r6
1a0024b8:	f000 f9ea 	bl	1a002890 <memchr>
1a0024bc:	b138      	cbz	r0, 1a0024ce <_svfiprintf_r+0x142>
1a0024be:	2340      	movs	r3, #64	; 0x40
1a0024c0:	1b80      	subs	r0, r0, r6
1a0024c2:	fa03 f000 	lsl.w	r0, r3, r0
1a0024c6:	9b04      	ldr	r3, [sp, #16]
1a0024c8:	4303      	orrs	r3, r0
1a0024ca:	3401      	adds	r4, #1
1a0024cc:	9304      	str	r3, [sp, #16]
1a0024ce:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0024d2:	4827      	ldr	r0, [pc, #156]	; (1a002570 <_svfiprintf_r+0x1e4>)
1a0024d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0024d8:	2206      	movs	r2, #6
1a0024da:	f000 f9d9 	bl	1a002890 <memchr>
1a0024de:	2800      	cmp	r0, #0
1a0024e0:	d038      	beq.n	1a002554 <_svfiprintf_r+0x1c8>
1a0024e2:	4b24      	ldr	r3, [pc, #144]	; (1a002574 <_svfiprintf_r+0x1e8>)
1a0024e4:	bb13      	cbnz	r3, 1a00252c <_svfiprintf_r+0x1a0>
1a0024e6:	9b03      	ldr	r3, [sp, #12]
1a0024e8:	3307      	adds	r3, #7
1a0024ea:	f023 0307 	bic.w	r3, r3, #7
1a0024ee:	3308      	adds	r3, #8
1a0024f0:	9303      	str	r3, [sp, #12]
1a0024f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0024f4:	4443      	add	r3, r8
1a0024f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0024f8:	e76e      	b.n	1a0023d8 <_svfiprintf_r+0x4c>
1a0024fa:	fb06 3202 	mla	r2, r6, r2, r3
1a0024fe:	2001      	movs	r0, #1
1a002500:	460c      	mov	r4, r1
1a002502:	e7a8      	b.n	1a002456 <_svfiprintf_r+0xca>
1a002504:	2300      	movs	r3, #0
1a002506:	3401      	adds	r4, #1
1a002508:	9305      	str	r3, [sp, #20]
1a00250a:	4619      	mov	r1, r3
1a00250c:	260a      	movs	r6, #10
1a00250e:	4620      	mov	r0, r4
1a002510:	f810 2b01 	ldrb.w	r2, [r0], #1
1a002514:	3a30      	subs	r2, #48	; 0x30
1a002516:	2a09      	cmp	r2, #9
1a002518:	d903      	bls.n	1a002522 <_svfiprintf_r+0x196>
1a00251a:	2b00      	cmp	r3, #0
1a00251c:	d0c8      	beq.n	1a0024b0 <_svfiprintf_r+0x124>
1a00251e:	9105      	str	r1, [sp, #20]
1a002520:	e7c6      	b.n	1a0024b0 <_svfiprintf_r+0x124>
1a002522:	fb06 2101 	mla	r1, r6, r1, r2
1a002526:	2301      	movs	r3, #1
1a002528:	4604      	mov	r4, r0
1a00252a:	e7f0      	b.n	1a00250e <_svfiprintf_r+0x182>
1a00252c:	ab03      	add	r3, sp, #12
1a00252e:	9300      	str	r3, [sp, #0]
1a002530:	462a      	mov	r2, r5
1a002532:	4b11      	ldr	r3, [pc, #68]	; (1a002578 <_svfiprintf_r+0x1ec>)
1a002534:	a904      	add	r1, sp, #16
1a002536:	4638      	mov	r0, r7
1a002538:	f3af 8000 	nop.w
1a00253c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a002540:	4680      	mov	r8, r0
1a002542:	d1d6      	bne.n	1a0024f2 <_svfiprintf_r+0x166>
1a002544:	89ab      	ldrh	r3, [r5, #12]
1a002546:	065b      	lsls	r3, r3, #25
1a002548:	f53f af34 	bmi.w	1a0023b4 <_svfiprintf_r+0x28>
1a00254c:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00254e:	b01d      	add	sp, #116	; 0x74
1a002550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002554:	ab03      	add	r3, sp, #12
1a002556:	9300      	str	r3, [sp, #0]
1a002558:	462a      	mov	r2, r5
1a00255a:	4b07      	ldr	r3, [pc, #28]	; (1a002578 <_svfiprintf_r+0x1ec>)
1a00255c:	a904      	add	r1, sp, #16
1a00255e:	4638      	mov	r0, r7
1a002560:	f000 f882 	bl	1a002668 <_printf_i>
1a002564:	e7ea      	b.n	1a00253c <_svfiprintf_r+0x1b0>
1a002566:	bf00      	nop
1a002568:	1a002df0 	.word	0x1a002df0
1a00256c:	1a002df6 	.word	0x1a002df6
1a002570:	1a002dfa 	.word	0x1a002dfa
1a002574:	00000000 	.word	0x00000000
1a002578:	1a0022d5 	.word	0x1a0022d5

1a00257c <_printf_common>:
1a00257c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002580:	4691      	mov	r9, r2
1a002582:	461f      	mov	r7, r3
1a002584:	688a      	ldr	r2, [r1, #8]
1a002586:	690b      	ldr	r3, [r1, #16]
1a002588:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00258c:	4293      	cmp	r3, r2
1a00258e:	bfb8      	it	lt
1a002590:	4613      	movlt	r3, r2
1a002592:	f8c9 3000 	str.w	r3, [r9]
1a002596:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00259a:	4606      	mov	r6, r0
1a00259c:	460c      	mov	r4, r1
1a00259e:	b112      	cbz	r2, 1a0025a6 <_printf_common+0x2a>
1a0025a0:	3301      	adds	r3, #1
1a0025a2:	f8c9 3000 	str.w	r3, [r9]
1a0025a6:	6823      	ldr	r3, [r4, #0]
1a0025a8:	0699      	lsls	r1, r3, #26
1a0025aa:	bf42      	ittt	mi
1a0025ac:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0025b0:	3302      	addmi	r3, #2
1a0025b2:	f8c9 3000 	strmi.w	r3, [r9]
1a0025b6:	6825      	ldr	r5, [r4, #0]
1a0025b8:	f015 0506 	ands.w	r5, r5, #6
1a0025bc:	d107      	bne.n	1a0025ce <_printf_common+0x52>
1a0025be:	f104 0a19 	add.w	sl, r4, #25
1a0025c2:	68e3      	ldr	r3, [r4, #12]
1a0025c4:	f8d9 2000 	ldr.w	r2, [r9]
1a0025c8:	1a9b      	subs	r3, r3, r2
1a0025ca:	42ab      	cmp	r3, r5
1a0025cc:	dc28      	bgt.n	1a002620 <_printf_common+0xa4>
1a0025ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0025d2:	6822      	ldr	r2, [r4, #0]
1a0025d4:	3300      	adds	r3, #0
1a0025d6:	bf18      	it	ne
1a0025d8:	2301      	movne	r3, #1
1a0025da:	0692      	lsls	r2, r2, #26
1a0025dc:	d42d      	bmi.n	1a00263a <_printf_common+0xbe>
1a0025de:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0025e2:	4639      	mov	r1, r7
1a0025e4:	4630      	mov	r0, r6
1a0025e6:	47c0      	blx	r8
1a0025e8:	3001      	adds	r0, #1
1a0025ea:	d020      	beq.n	1a00262e <_printf_common+0xb2>
1a0025ec:	6823      	ldr	r3, [r4, #0]
1a0025ee:	68e5      	ldr	r5, [r4, #12]
1a0025f0:	f8d9 2000 	ldr.w	r2, [r9]
1a0025f4:	f003 0306 	and.w	r3, r3, #6
1a0025f8:	2b04      	cmp	r3, #4
1a0025fa:	bf08      	it	eq
1a0025fc:	1aad      	subeq	r5, r5, r2
1a0025fe:	68a3      	ldr	r3, [r4, #8]
1a002600:	6922      	ldr	r2, [r4, #16]
1a002602:	bf0c      	ite	eq
1a002604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a002608:	2500      	movne	r5, #0
1a00260a:	4293      	cmp	r3, r2
1a00260c:	bfc4      	itt	gt
1a00260e:	1a9b      	subgt	r3, r3, r2
1a002610:	18ed      	addgt	r5, r5, r3
1a002612:	f04f 0900 	mov.w	r9, #0
1a002616:	341a      	adds	r4, #26
1a002618:	454d      	cmp	r5, r9
1a00261a:	d11a      	bne.n	1a002652 <_printf_common+0xd6>
1a00261c:	2000      	movs	r0, #0
1a00261e:	e008      	b.n	1a002632 <_printf_common+0xb6>
1a002620:	2301      	movs	r3, #1
1a002622:	4652      	mov	r2, sl
1a002624:	4639      	mov	r1, r7
1a002626:	4630      	mov	r0, r6
1a002628:	47c0      	blx	r8
1a00262a:	3001      	adds	r0, #1
1a00262c:	d103      	bne.n	1a002636 <_printf_common+0xba>
1a00262e:	f04f 30ff 	mov.w	r0, #4294967295
1a002632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002636:	3501      	adds	r5, #1
1a002638:	e7c3      	b.n	1a0025c2 <_printf_common+0x46>
1a00263a:	18e1      	adds	r1, r4, r3
1a00263c:	1c5a      	adds	r2, r3, #1
1a00263e:	2030      	movs	r0, #48	; 0x30
1a002640:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a002644:	4422      	add	r2, r4
1a002646:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00264a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00264e:	3302      	adds	r3, #2
1a002650:	e7c5      	b.n	1a0025de <_printf_common+0x62>
1a002652:	2301      	movs	r3, #1
1a002654:	4622      	mov	r2, r4
1a002656:	4639      	mov	r1, r7
1a002658:	4630      	mov	r0, r6
1a00265a:	47c0      	blx	r8
1a00265c:	3001      	adds	r0, #1
1a00265e:	d0e6      	beq.n	1a00262e <_printf_common+0xb2>
1a002660:	f109 0901 	add.w	r9, r9, #1
1a002664:	e7d8      	b.n	1a002618 <_printf_common+0x9c>
1a002666:	Address 0x1a002666 is out of bounds.


1a002668 <_printf_i>:
1a002668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00266c:	4606      	mov	r6, r0
1a00266e:	460c      	mov	r4, r1
1a002670:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a002674:	7e09      	ldrb	r1, [r1, #24]
1a002676:	b085      	sub	sp, #20
1a002678:	296e      	cmp	r1, #110	; 0x6e
1a00267a:	4698      	mov	r8, r3
1a00267c:	4617      	mov	r7, r2
1a00267e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a002680:	f000 80ba 	beq.w	1a0027f8 <_printf_i+0x190>
1a002684:	d824      	bhi.n	1a0026d0 <_printf_i+0x68>
1a002686:	2963      	cmp	r1, #99	; 0x63
1a002688:	d039      	beq.n	1a0026fe <_printf_i+0x96>
1a00268a:	d80a      	bhi.n	1a0026a2 <_printf_i+0x3a>
1a00268c:	2900      	cmp	r1, #0
1a00268e:	f000 80c3 	beq.w	1a002818 <_printf_i+0x1b0>
1a002692:	2958      	cmp	r1, #88	; 0x58
1a002694:	f000 8091 	beq.w	1a0027ba <_printf_i+0x152>
1a002698:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00269c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0026a0:	e035      	b.n	1a00270e <_printf_i+0xa6>
1a0026a2:	2964      	cmp	r1, #100	; 0x64
1a0026a4:	d001      	beq.n	1a0026aa <_printf_i+0x42>
1a0026a6:	2969      	cmp	r1, #105	; 0x69
1a0026a8:	d1f6      	bne.n	1a002698 <_printf_i+0x30>
1a0026aa:	6825      	ldr	r5, [r4, #0]
1a0026ac:	681a      	ldr	r2, [r3, #0]
1a0026ae:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0026b2:	f102 0104 	add.w	r1, r2, #4
1a0026b6:	d02c      	beq.n	1a002712 <_printf_i+0xaa>
1a0026b8:	6812      	ldr	r2, [r2, #0]
1a0026ba:	6019      	str	r1, [r3, #0]
1a0026bc:	2a00      	cmp	r2, #0
1a0026be:	da03      	bge.n	1a0026c8 <_printf_i+0x60>
1a0026c0:	232d      	movs	r3, #45	; 0x2d
1a0026c2:	4252      	negs	r2, r2
1a0026c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0026c8:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a002888 <_printf_i+0x220>
1a0026cc:	230a      	movs	r3, #10
1a0026ce:	e03f      	b.n	1a002750 <_printf_i+0xe8>
1a0026d0:	2973      	cmp	r1, #115	; 0x73
1a0026d2:	f000 80a5 	beq.w	1a002820 <_printf_i+0x1b8>
1a0026d6:	d808      	bhi.n	1a0026ea <_printf_i+0x82>
1a0026d8:	296f      	cmp	r1, #111	; 0x6f
1a0026da:	d021      	beq.n	1a002720 <_printf_i+0xb8>
1a0026dc:	2970      	cmp	r1, #112	; 0x70
1a0026de:	d1db      	bne.n	1a002698 <_printf_i+0x30>
1a0026e0:	6822      	ldr	r2, [r4, #0]
1a0026e2:	f042 0220 	orr.w	r2, r2, #32
1a0026e6:	6022      	str	r2, [r4, #0]
1a0026e8:	e003      	b.n	1a0026f2 <_printf_i+0x8a>
1a0026ea:	2975      	cmp	r1, #117	; 0x75
1a0026ec:	d018      	beq.n	1a002720 <_printf_i+0xb8>
1a0026ee:	2978      	cmp	r1, #120	; 0x78
1a0026f0:	d1d2      	bne.n	1a002698 <_printf_i+0x30>
1a0026f2:	2278      	movs	r2, #120	; 0x78
1a0026f4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a0026f8:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a00288c <_printf_i+0x224>
1a0026fc:	e061      	b.n	1a0027c2 <_printf_i+0x15a>
1a0026fe:	681a      	ldr	r2, [r3, #0]
1a002700:	1d11      	adds	r1, r2, #4
1a002702:	6019      	str	r1, [r3, #0]
1a002704:	6813      	ldr	r3, [r2, #0]
1a002706:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00270a:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00270e:	2301      	movs	r3, #1
1a002710:	e093      	b.n	1a00283a <_printf_i+0x1d2>
1a002712:	6812      	ldr	r2, [r2, #0]
1a002714:	6019      	str	r1, [r3, #0]
1a002716:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00271a:	bf18      	it	ne
1a00271c:	b212      	sxthne	r2, r2
1a00271e:	e7cd      	b.n	1a0026bc <_printf_i+0x54>
1a002720:	f8d4 c000 	ldr.w	ip, [r4]
1a002724:	681a      	ldr	r2, [r3, #0]
1a002726:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00272a:	f102 0504 	add.w	r5, r2, #4
1a00272e:	601d      	str	r5, [r3, #0]
1a002730:	d001      	beq.n	1a002736 <_printf_i+0xce>
1a002732:	6812      	ldr	r2, [r2, #0]
1a002734:	e003      	b.n	1a00273e <_printf_i+0xd6>
1a002736:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a00273a:	d0fa      	beq.n	1a002732 <_printf_i+0xca>
1a00273c:	8812      	ldrh	r2, [r2, #0]
1a00273e:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a002888 <_printf_i+0x220>
1a002742:	296f      	cmp	r1, #111	; 0x6f
1a002744:	bf0c      	ite	eq
1a002746:	2308      	moveq	r3, #8
1a002748:	230a      	movne	r3, #10
1a00274a:	2100      	movs	r1, #0
1a00274c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a002750:	6865      	ldr	r5, [r4, #4]
1a002752:	60a5      	str	r5, [r4, #8]
1a002754:	2d00      	cmp	r5, #0
1a002756:	bfa2      	ittt	ge
1a002758:	6821      	ldrge	r1, [r4, #0]
1a00275a:	f021 0104 	bicge.w	r1, r1, #4
1a00275e:	6021      	strge	r1, [r4, #0]
1a002760:	b90a      	cbnz	r2, 1a002766 <_printf_i+0xfe>
1a002762:	2d00      	cmp	r5, #0
1a002764:	d046      	beq.n	1a0027f4 <_printf_i+0x18c>
1a002766:	4605      	mov	r5, r0
1a002768:	fbb2 f1f3 	udiv	r1, r2, r3
1a00276c:	fb03 2e11 	mls	lr, r3, r1, r2
1a002770:	4293      	cmp	r3, r2
1a002772:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a002776:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a00277a:	d939      	bls.n	1a0027f0 <_printf_i+0x188>
1a00277c:	2b08      	cmp	r3, #8
1a00277e:	d10b      	bne.n	1a002798 <_printf_i+0x130>
1a002780:	6823      	ldr	r3, [r4, #0]
1a002782:	07da      	lsls	r2, r3, #31
1a002784:	d508      	bpl.n	1a002798 <_printf_i+0x130>
1a002786:	6923      	ldr	r3, [r4, #16]
1a002788:	6862      	ldr	r2, [r4, #4]
1a00278a:	429a      	cmp	r2, r3
1a00278c:	bfde      	ittt	le
1a00278e:	2330      	movle	r3, #48	; 0x30
1a002790:	f805 3c01 	strble.w	r3, [r5, #-1]
1a002794:	f105 35ff 	addle.w	r5, r5, #4294967295
1a002798:	1b40      	subs	r0, r0, r5
1a00279a:	6120      	str	r0, [r4, #16]
1a00279c:	f8cd 8000 	str.w	r8, [sp]
1a0027a0:	463b      	mov	r3, r7
1a0027a2:	aa03      	add	r2, sp, #12
1a0027a4:	4621      	mov	r1, r4
1a0027a6:	4630      	mov	r0, r6
1a0027a8:	f7ff fee8 	bl	1a00257c <_printf_common>
1a0027ac:	3001      	adds	r0, #1
1a0027ae:	d149      	bne.n	1a002844 <_printf_i+0x1dc>
1a0027b0:	f04f 30ff 	mov.w	r0, #4294967295
1a0027b4:	b005      	add	sp, #20
1a0027b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0027ba:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a002888 <_printf_i+0x220>
1a0027be:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0027c2:	681d      	ldr	r5, [r3, #0]
1a0027c4:	6821      	ldr	r1, [r4, #0]
1a0027c6:	f855 2b04 	ldr.w	r2, [r5], #4
1a0027ca:	601d      	str	r5, [r3, #0]
1a0027cc:	060d      	lsls	r5, r1, #24
1a0027ce:	d50b      	bpl.n	1a0027e8 <_printf_i+0x180>
1a0027d0:	07cd      	lsls	r5, r1, #31
1a0027d2:	bf44      	itt	mi
1a0027d4:	f041 0120 	orrmi.w	r1, r1, #32
1a0027d8:	6021      	strmi	r1, [r4, #0]
1a0027da:	b91a      	cbnz	r2, 1a0027e4 <_printf_i+0x17c>
1a0027dc:	6823      	ldr	r3, [r4, #0]
1a0027de:	f023 0320 	bic.w	r3, r3, #32
1a0027e2:	6023      	str	r3, [r4, #0]
1a0027e4:	2310      	movs	r3, #16
1a0027e6:	e7b0      	b.n	1a00274a <_printf_i+0xe2>
1a0027e8:	064b      	lsls	r3, r1, #25
1a0027ea:	bf48      	it	mi
1a0027ec:	b292      	uxthmi	r2, r2
1a0027ee:	e7ef      	b.n	1a0027d0 <_printf_i+0x168>
1a0027f0:	460a      	mov	r2, r1
1a0027f2:	e7b9      	b.n	1a002768 <_printf_i+0x100>
1a0027f4:	4605      	mov	r5, r0
1a0027f6:	e7c1      	b.n	1a00277c <_printf_i+0x114>
1a0027f8:	681a      	ldr	r2, [r3, #0]
1a0027fa:	f8d4 c000 	ldr.w	ip, [r4]
1a0027fe:	6961      	ldr	r1, [r4, #20]
1a002800:	1d15      	adds	r5, r2, #4
1a002802:	601d      	str	r5, [r3, #0]
1a002804:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a002808:	6813      	ldr	r3, [r2, #0]
1a00280a:	d001      	beq.n	1a002810 <_printf_i+0x1a8>
1a00280c:	6019      	str	r1, [r3, #0]
1a00280e:	e003      	b.n	1a002818 <_printf_i+0x1b0>
1a002810:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a002814:	d0fa      	beq.n	1a00280c <_printf_i+0x1a4>
1a002816:	8019      	strh	r1, [r3, #0]
1a002818:	2300      	movs	r3, #0
1a00281a:	6123      	str	r3, [r4, #16]
1a00281c:	4605      	mov	r5, r0
1a00281e:	e7bd      	b.n	1a00279c <_printf_i+0x134>
1a002820:	681a      	ldr	r2, [r3, #0]
1a002822:	1d11      	adds	r1, r2, #4
1a002824:	6019      	str	r1, [r3, #0]
1a002826:	6815      	ldr	r5, [r2, #0]
1a002828:	6862      	ldr	r2, [r4, #4]
1a00282a:	2100      	movs	r1, #0
1a00282c:	4628      	mov	r0, r5
1a00282e:	f000 f82f 	bl	1a002890 <memchr>
1a002832:	b108      	cbz	r0, 1a002838 <_printf_i+0x1d0>
1a002834:	1b40      	subs	r0, r0, r5
1a002836:	6060      	str	r0, [r4, #4]
1a002838:	6863      	ldr	r3, [r4, #4]
1a00283a:	6123      	str	r3, [r4, #16]
1a00283c:	2300      	movs	r3, #0
1a00283e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a002842:	e7ab      	b.n	1a00279c <_printf_i+0x134>
1a002844:	6923      	ldr	r3, [r4, #16]
1a002846:	462a      	mov	r2, r5
1a002848:	4639      	mov	r1, r7
1a00284a:	4630      	mov	r0, r6
1a00284c:	47c0      	blx	r8
1a00284e:	3001      	adds	r0, #1
1a002850:	d0ae      	beq.n	1a0027b0 <_printf_i+0x148>
1a002852:	6823      	ldr	r3, [r4, #0]
1a002854:	079b      	lsls	r3, r3, #30
1a002856:	d413      	bmi.n	1a002880 <_printf_i+0x218>
1a002858:	68e0      	ldr	r0, [r4, #12]
1a00285a:	9b03      	ldr	r3, [sp, #12]
1a00285c:	4298      	cmp	r0, r3
1a00285e:	bfb8      	it	lt
1a002860:	4618      	movlt	r0, r3
1a002862:	e7a7      	b.n	1a0027b4 <_printf_i+0x14c>
1a002864:	2301      	movs	r3, #1
1a002866:	464a      	mov	r2, r9
1a002868:	4639      	mov	r1, r7
1a00286a:	4630      	mov	r0, r6
1a00286c:	47c0      	blx	r8
1a00286e:	3001      	adds	r0, #1
1a002870:	d09e      	beq.n	1a0027b0 <_printf_i+0x148>
1a002872:	3501      	adds	r5, #1
1a002874:	68e3      	ldr	r3, [r4, #12]
1a002876:	9a03      	ldr	r2, [sp, #12]
1a002878:	1a9b      	subs	r3, r3, r2
1a00287a:	42ab      	cmp	r3, r5
1a00287c:	dcf2      	bgt.n	1a002864 <_printf_i+0x1fc>
1a00287e:	e7eb      	b.n	1a002858 <_printf_i+0x1f0>
1a002880:	2500      	movs	r5, #0
1a002882:	f104 0919 	add.w	r9, r4, #25
1a002886:	e7f5      	b.n	1a002874 <_printf_i+0x20c>
1a002888:	1a002e01 	.word	0x1a002e01
1a00288c:	1a002e12 	.word	0x1a002e12

1a002890 <memchr>:
1a002890:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a002894:	2a10      	cmp	r2, #16
1a002896:	db2b      	blt.n	1a0028f0 <memchr+0x60>
1a002898:	f010 0f07 	tst.w	r0, #7
1a00289c:	d008      	beq.n	1a0028b0 <memchr+0x20>
1a00289e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0028a2:	3a01      	subs	r2, #1
1a0028a4:	428b      	cmp	r3, r1
1a0028a6:	d02d      	beq.n	1a002904 <memchr+0x74>
1a0028a8:	f010 0f07 	tst.w	r0, #7
1a0028ac:	b342      	cbz	r2, 1a002900 <memchr+0x70>
1a0028ae:	d1f6      	bne.n	1a00289e <memchr+0xe>
1a0028b0:	b4f0      	push	{r4, r5, r6, r7}
1a0028b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0028b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0028ba:	f022 0407 	bic.w	r4, r2, #7
1a0028be:	f07f 0700 	mvns.w	r7, #0
1a0028c2:	2300      	movs	r3, #0
1a0028c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0028c8:	3c08      	subs	r4, #8
1a0028ca:	ea85 0501 	eor.w	r5, r5, r1
1a0028ce:	ea86 0601 	eor.w	r6, r6, r1
1a0028d2:	fa85 f547 	uadd8	r5, r5, r7
1a0028d6:	faa3 f587 	sel	r5, r3, r7
1a0028da:	fa86 f647 	uadd8	r6, r6, r7
1a0028de:	faa5 f687 	sel	r6, r5, r7
1a0028e2:	b98e      	cbnz	r6, 1a002908 <memchr+0x78>
1a0028e4:	d1ee      	bne.n	1a0028c4 <memchr+0x34>
1a0028e6:	bcf0      	pop	{r4, r5, r6, r7}
1a0028e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0028ec:	f002 0207 	and.w	r2, r2, #7
1a0028f0:	b132      	cbz	r2, 1a002900 <memchr+0x70>
1a0028f2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0028f6:	3a01      	subs	r2, #1
1a0028f8:	ea83 0301 	eor.w	r3, r3, r1
1a0028fc:	b113      	cbz	r3, 1a002904 <memchr+0x74>
1a0028fe:	d1f8      	bne.n	1a0028f2 <memchr+0x62>
1a002900:	2000      	movs	r0, #0
1a002902:	4770      	bx	lr
1a002904:	3801      	subs	r0, #1
1a002906:	4770      	bx	lr
1a002908:	2d00      	cmp	r5, #0
1a00290a:	bf06      	itte	eq
1a00290c:	4635      	moveq	r5, r6
1a00290e:	3803      	subeq	r0, #3
1a002910:	3807      	subne	r0, #7
1a002912:	f015 0f01 	tst.w	r5, #1
1a002916:	d107      	bne.n	1a002928 <memchr+0x98>
1a002918:	3001      	adds	r0, #1
1a00291a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00291e:	bf02      	ittt	eq
1a002920:	3001      	addeq	r0, #1
1a002922:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a002926:	3001      	addeq	r0, #1
1a002928:	bcf0      	pop	{r4, r5, r6, r7}
1a00292a:	3801      	subs	r0, #1
1a00292c:	4770      	bx	lr
1a00292e:	bf00      	nop

1a002930 <memmove>:
1a002930:	4288      	cmp	r0, r1
1a002932:	b510      	push	{r4, lr}
1a002934:	eb01 0302 	add.w	r3, r1, r2
1a002938:	d902      	bls.n	1a002940 <memmove+0x10>
1a00293a:	4283      	cmp	r3, r0
1a00293c:	461c      	mov	r4, r3
1a00293e:	d807      	bhi.n	1a002950 <memmove+0x20>
1a002940:	1e42      	subs	r2, r0, #1
1a002942:	4299      	cmp	r1, r3
1a002944:	d008      	beq.n	1a002958 <memmove+0x28>
1a002946:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00294a:	f802 4f01 	strb.w	r4, [r2, #1]!
1a00294e:	e7f8      	b.n	1a002942 <memmove+0x12>
1a002950:	1883      	adds	r3, r0, r2
1a002952:	1a9a      	subs	r2, r3, r2
1a002954:	429a      	cmp	r2, r3
1a002956:	d100      	bne.n	1a00295a <memmove+0x2a>
1a002958:	bd10      	pop	{r4, pc}
1a00295a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
1a00295e:	f803 1d01 	strb.w	r1, [r3, #-1]!
1a002962:	e7f7      	b.n	1a002954 <memmove+0x24>

1a002964 <__malloc_lock>:
1a002964:	4801      	ldr	r0, [pc, #4]	; (1a00296c <__malloc_lock+0x8>)
1a002966:	f7ff bc0b 	b.w	1a002180 <__retarget_lock_acquire_recursive>
1a00296a:	bf00      	nop
1a00296c:	10000194 	.word	0x10000194

1a002970 <__malloc_unlock>:
1a002970:	4801      	ldr	r0, [pc, #4]	; (1a002978 <__malloc_unlock+0x8>)
1a002972:	f7ff bc06 	b.w	1a002182 <__retarget_lock_release_recursive>
1a002976:	bf00      	nop
1a002978:	10000194 	.word	0x10000194

1a00297c <_realloc_r>:
1a00297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00297e:	4607      	mov	r7, r0
1a002980:	4614      	mov	r4, r2
1a002982:	460e      	mov	r6, r1
1a002984:	b921      	cbnz	r1, 1a002990 <_realloc_r+0x14>
1a002986:	4611      	mov	r1, r2
1a002988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a00298c:	f7ff bc48 	b.w	1a002220 <_malloc_r>
1a002990:	b922      	cbnz	r2, 1a00299c <_realloc_r+0x20>
1a002992:	f7ff fbf7 	bl	1a002184 <_free_r>
1a002996:	4625      	mov	r5, r4
1a002998:	4628      	mov	r0, r5
1a00299a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00299c:	f000 f814 	bl	1a0029c8 <_malloc_usable_size_r>
1a0029a0:	42a0      	cmp	r0, r4
1a0029a2:	d20f      	bcs.n	1a0029c4 <_realloc_r+0x48>
1a0029a4:	4621      	mov	r1, r4
1a0029a6:	4638      	mov	r0, r7
1a0029a8:	f7ff fc3a 	bl	1a002220 <_malloc_r>
1a0029ac:	4605      	mov	r5, r0
1a0029ae:	2800      	cmp	r0, #0
1a0029b0:	d0f2      	beq.n	1a002998 <_realloc_r+0x1c>
1a0029b2:	4631      	mov	r1, r6
1a0029b4:	4622      	mov	r2, r4
1a0029b6:	f7ff fba5 	bl	1a002104 <memcpy>
1a0029ba:	4631      	mov	r1, r6
1a0029bc:	4638      	mov	r0, r7
1a0029be:	f7ff fbe1 	bl	1a002184 <_free_r>
1a0029c2:	e7e9      	b.n	1a002998 <_realloc_r+0x1c>
1a0029c4:	4635      	mov	r5, r6
1a0029c6:	e7e7      	b.n	1a002998 <_realloc_r+0x1c>

1a0029c8 <_malloc_usable_size_r>:
1a0029c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0029cc:	1f18      	subs	r0, r3, #4
1a0029ce:	2b00      	cmp	r3, #0
1a0029d0:	bfbc      	itt	lt
1a0029d2:	580b      	ldrlt	r3, [r1, r0]
1a0029d4:	18c0      	addlt	r0, r0, r3
1a0029d6:	4770      	bx	lr
1a0029d8:	7245      	strb	r5, [r0, #9]
1a0029da:	6f72      	ldr	r2, [r6, #116]	; 0x74
1a0029dc:	2072      	movs	r0, #114	; 0x72
1a0029de:	2020      	movs	r0, #32
1a0029e0:	2020      	movs	r0, #32
1a0029e2:	2020      	movs	r0, #32
1a0029e4:	2020      	movs	r0, #32
1a0029e6:	2020      	movs	r0, #32
1a0029e8:	0000      	movs	r0, r0
1a0029ea:	0000      	movs	r0, r0
1a0029ec:	7345      	strb	r5, [r0, #13]
1a0029ee:	6570      	str	r0, [r6, #84]	; 0x54
1a0029f0:	6572      	str	r2, [r6, #84]	; 0x54
1a0029f2:	7020      	strb	r0, [r4, #0]
1a0029f4:	726f      	strb	r7, [r5, #9]
1a0029f6:	6620      	str	r0, [r4, #96]	; 0x60
1a0029f8:	7661      	strb	r1, [r4, #25]
1a0029fa:	726f      	strb	r7, [r5, #9]
1a0029fc:	0000      	movs	r0, r0
1a0029fe:	0000      	movs	r0, r0
1a002a00:	4848      	ldr	r0, [pc, #288]	; (1a002b24 <gpioPinsInit+0x4c>)
1a002a02:	4d3a      	ldr	r5, [pc, #232]	; (1a002aec <gpioPinsInit+0x14>)
1a002a04:	204d      	movs	r0, #77	; 0x4d
1a002a06:	2020      	movs	r0, #32
1a002a08:	2020      	movs	r0, #32
1a002a0a:	2020      	movs	r0, #32
1a002a0c:	2020      	movs	r0, #32
1a002a0e:	2020      	movs	r0, #32
1a002a10:	0000      	movs	r0, r0
1a002a12:	0000      	movs	r0, r0
1a002a14:	6f50      	ldr	r0, [r2, #116]	; 0x74
1a002a16:	6372      	str	r2, [r6, #52]	; 0x34
1a002a18:	6e65      	ldr	r5, [r4, #100]	; 0x64
1a002a1a:	6174      	str	r4, [r6, #20]
1a002a1c:	656a      	str	r2, [r5, #84]	; 0x54
1a002a1e:	6320      	str	r0, [r4, #48]	; 0x30
1a002a20:	6d6f      	ldr	r7, [r5, #84]	; 0x54
1a002a22:	6469      	str	r1, [r5, #68]	; 0x44
1a002a24:	0061      	lsls	r1, r4, #1
1a002a26:	0000      	movs	r0, r0
1a002a28:	6c45      	ldr	r5, [r0, #68]	; 0x44
1a002a2a:	6765      	str	r5, [r4, #116]	; 0x74
1a002a2c:	6320      	str	r0, [r4, #48]	; 0x30
1a002a2e:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a002a30:	2074      	movs	r0, #116	; 0x74
1a002a32:	6f63      	ldr	r3, [r4, #116]	; 0x74
1a002a34:	696d      	ldr	r5, [r5, #20]
1a002a36:	6164      	str	r4, [r4, #20]
1a002a38:	0000      	movs	r0, r0
1a002a3a:	0000      	movs	r0, r0
1a002a3c:	2020      	movs	r0, #32
1a002a3e:	2020      	movs	r0, #32
1a002a40:	2020      	movs	r0, #32
1a002a42:	2020      	movs	r0, #32
1a002a44:	2020      	movs	r0, #32
1a002a46:	2020      	movs	r0, #32
1a002a48:	2020      	movs	r0, #32
1a002a4a:	2020      	movs	r0, #32
1a002a4c:	0000      	movs	r0, r0
1a002a4e:	0000      	movs	r0, r0
1a002a50:	6425      	str	r5, [r4, #64]	; 0x40
1a002a52:	0000      	movs	r0, r0
1a002a54:	6720      	str	r0, [r4, #112]	; 0x70
1a002a56:	6172      	str	r2, [r6, #20]
1a002a58:	6f6d      	ldr	r5, [r5, #116]	; 0x74
1a002a5a:	2073      	movs	r0, #115	; 0x73
1a002a5c:	20202020 	.word	0x20202020
1a002a60:	00000020 	.word	0x00000020
1a002a64:	67656c45 	.word	0x67656c45
1a002a68:	68207269 	.word	0x68207269
1a002a6c:	2061726f 	.word	0x2061726f
1a002a70:	20202020 	.word	0x20202020
1a002a74:	00000000 	.word	0x00000000
1a002a78:	20202020 	.word	0x20202020
1a002a7c:	20202020 	.word	0x20202020
1a002a80:	00202020 	.word	0x00202020
1a002a84:	20726144 	.word	0x20726144
1a002a88:	696d6f63 	.word	0x696d6f63
1a002a8c:	00006164 	.word	0x00006164
1a002a90:	666e6f43 	.word	0x666e6f43
1a002a94:	616d7269 	.word	0x616d7269
1a002a98:	20203f72 	.word	0x20203f72
1a002a9c:	20202020 	.word	0x20202020
1a002aa0:	00000000 	.word	0x00000000
1a002aa4:	70736944 	.word	0x70736944
1a002aa8:	61736e65 	.word	0x61736e65
1a002aac:	2e6f646e 	.word	0x2e6f646e
1a002ab0:	20202e2e 	.word	0x20202e2e
1a002ab4:	ffffff00 	.word	0xffffff00
1a002ab8:	303a3431 	.word	0x303a3431
1a002abc:	00000030 	.word	0x00000030
1a002ac0:	303a3631 	.word	0x303a3631
1a002ac4:	00000030 	.word	0x00000030
1a002ac8:	303a3032 	.word	0x303a3032
1a002acc:	00000030 	.word	0x00000030
1a002ad0:	303a3132 	.word	0x303a3132
1a002ad4:	ffff0030 	.word	0xffff0030

1a002ad8 <gpioPinsInit>:
1a002ad8:	02000104 00050701 05010d03 04080100     ................
1a002ae8:	02020002 02000304 00000403 04070002     ................
1a002af8:	030c0300 09050402 05040103 04030208     ................
1a002b08:	04020305 06040504 0802000c 03000b06     ................
1a002b18:	00090607 07060503 060f0504 03030004     ................
1a002b28:	02000404 00050404 06040502 04060200     ................
1a002b38:	0c050408 05040a04 0003010e 14010a00     ................
1a002b48:	010f0000 0d000012 00001101 0010010c     ................
1a002b58:	07070300 000f0300 01000001 00000000     ................
1a002b68:	000a0600 08060603 06100504 04030005     ................
1a002b78:	03000106 04090400 04010d05 010b0000     ................
1a002b88:	0200000f 00000001 00010104 02010800     ................
1a002b98:	01090000 09010006 05040002 04010200     ................
1a002ba8:	02020105 02020504 0e00000a 01000b02     ................
1a002bb8:	000c020b 00040c01 04000200 01020001     ................
1a002bc8:	02000204 00030402 03070302 070b0300     ................
1a002bd8:	0c030004 03000507 0006070d 01020e03     ................
1a002be8:	04010504 06020006 02000504 00040405     ................
1a002bf8:	08040402 040c0504 0d050409 05040a04     ................
1a002c08:	0005010e ffff0801 d494c080              ............

1a002c14 <ultrasonicSensorsIrqMap>:
1a002c14:	ff020100                                ....

1a002c18 <InitClkStates>:
1a002c18:	01010f01                                ....

1a002c1c <pinmuxing>:
1a002c1c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002c2c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002c3c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002c4c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002c5c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002c6c:	00d50301 00d50401 00160107 00560207     ..............V.
1a002c7c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002c8c:	00570206                                ..W.

1a002c90 <ExtRateIn>:
1a002c90:	00000000                                ....

1a002c94 <GpioButtons>:
1a002c94:	08000400 09010900                       ........

1a002c9c <GpioLeds>:
1a002c9c:	01050005 0e000205 0c010b01              ............

1a002ca8 <GpioPorts>:
1a002ca8:	03030003 0f050403 05031005 07030603     ................
1a002cb8:	ffff0802                                ....

1a002cbc <OscRateIn>:
1a002cbc:	00b71b00                                ....

1a002cc0 <InitClkStates>:
1a002cc0:	00010100 00010909 0001090a 01010701     ................
1a002cd0:	00010902 00010906 0101090c 0001090d     ................
1a002ce0:	0001090e 0001090f 00010910 00010911     ................
1a002cf0:	00010912 00010913 00011114 00011119     ................
1a002d00:	0001111a 0001111b 08040201 0f0f0f03     ................
1a002d10:	000000ff                                ....

1a002d14 <periph_to_base>:
1a002d14:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002d24:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002d34:	000100e0 01000100 01200003 00060120     .......... . ...
1a002d44:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002d54:	01820013 00120182 01a201a2 01c20011     ................
1a002d64:	001001c2 01e201e2 0202000f 000e0202     ................
1a002d74:	02220222 0223000d 001c0223              "."...#.#...

1a002d80 <UART_BClock>:
1a002d80:	01a201c2 01620182                       ......b.

1a002d88 <UART_PClock>:
1a002d88:	00820081 00a200a1                       ........

1a002d90 <__sf_fake_stderr>:
	...

1a002db0 <__sf_fake_stdin>:
	...

1a002dd0 <__sf_fake_stdout>:
	...
1a002df0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1a002e00:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1a002e10:	31300046 35343332 39383736 64636261     F.0123456789abcd
1a002e20:	ff006665                                ef..
